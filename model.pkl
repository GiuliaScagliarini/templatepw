{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J1R1QrFCgybH"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from prophet import Prophet\n",
        "from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JvjAeE87YOkH",
        "outputId": "6fbfe97e-c321-40b7-bf90-75756f2af7ee"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/root\n"
          ]
        }
      ],
      "source": [
        "cd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UBytTdWDwNBE",
        "outputId": "8164c111-146a-4afa-8c41-4acb274e49bd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/Colab Notebooks/Project ML\n"
          ]
        }
      ],
      "source": [
        "# Impostare path della directory\n",
        "%cd /content/drive/MyDrive/Colab Notebooks/Project ML/"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IFrDgSmivlkS",
        "outputId": "8ff191ae-3e1a-4b66-f8ba-f1b3c3985655"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Bifor_Burger.ipynb  dati.xlsx\n"
          ]
        }
      ],
      "source": [
        "# Verificare i file dentro alla directory\n",
        "!ls "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "mZKSxVfPtZ0J",
        "outputId": "7023d936-2e11-4221-f7bf-08453b449611"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b88a4ccd-ca05-455d-98da-26d1ee8df8f9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "      <th>Tipologia</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calendario</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-05-05</th>\n",
              "      <td>2.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-21</th>\n",
              "      <td>3.25</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-25</th>\n",
              "      <td>228.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-26</th>\n",
              "      <td>181.80</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-27</th>\n",
              "      <td>256.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-05</th>\n",
              "      <td>128.18</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-19</th>\n",
              "      <td>58.12</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-20</th>\n",
              "      <td>16.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-21</th>\n",
              "      <td>12.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-22</th>\n",
              "      <td>1.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2600 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b88a4ccd-ca05-455d-98da-26d1ee8df8f9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b88a4ccd-ca05-455d-98da-26d1ee8df8f9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b88a4ccd-ca05-455d-98da-26d1ee8df8f9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Quantita Tipologia\n",
              "Calendario                    \n",
              "2021-05-05      2.00     Spine\n",
              "2021-05-21      3.25     Spine\n",
              "2021-05-25    228.00     Spine\n",
              "2021-05-26    181.80     Spine\n",
              "2021-05-27    256.00     Spine\n",
              "...              ...       ...\n",
              "2022-11-05    128.18  Cocktail\n",
              "2022-11-19     58.12  Cocktail\n",
              "2022-11-20     16.00  Cocktail\n",
              "2022-11-21     12.00  Cocktail\n",
              "2022-11-22      1.00  Cocktail\n",
              "\n",
              "[2600 rows x 2 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Importo dataset\n",
        "data = pd.read_excel('dati.xlsx', \n",
        "                     index_col = 'Calendario',\n",
        "                     parse_dates = True\n",
        "                     )\n",
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "ix7hTaFXvHOV",
        "outputId": "01b6cb62-e5cc-4cf8-af99-c03d7d1946c6"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-92de55a9-251f-409f-92b1-e3728ef677a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "      <th>Tipologia</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calendario</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-05-08</th>\n",
              "      <td>13.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-21</th>\n",
              "      <td>3.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-25</th>\n",
              "      <td>58.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-26</th>\n",
              "      <td>62.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-27</th>\n",
              "      <td>55.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-05</th>\n",
              "      <td>65.09</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-19</th>\n",
              "      <td>62.20</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-20</th>\n",
              "      <td>46.24</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-21</th>\n",
              "      <td>27.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-22</th>\n",
              "      <td>16.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>520 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92de55a9-251f-409f-92b1-e3728ef677a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-92de55a9-251f-409f-92b1-e3728ef677a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-92de55a9-251f-409f-92b1-e3728ef677a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Quantita Tipologia\n",
              "Calendario                    \n",
              "2021-05-08     13.00    Burger\n",
              "2021-05-21      3.00    Burger\n",
              "2021-05-25     58.00    Burger\n",
              "2021-05-26     62.00    Burger\n",
              "2021-05-27     55.00    Burger\n",
              "...              ...       ...\n",
              "2022-11-05     65.09    Burger\n",
              "2022-11-19     62.20    Burger\n",
              "2022-11-20     46.24    Burger\n",
              "2022-11-21     27.00    Burger\n",
              "2022-11-22     16.00    Burger\n",
              "\n",
              "[520 rows x 2 columns]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Creo dataset con solo i dati relativi ai burger\n",
        "df_burger = data[data['Tipologia'] == 'Burger']\n",
        "df_burger"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Qj6tfYxSziR5",
        "outputId": "82b52891-9d1c-4f63-fd9c-9eab8264da1d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-efeb8c00-5e47-40a7-bae3-082f38a81f78\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>520.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>56.594115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>26.094139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>38.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>52.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>71.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>144.970000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efeb8c00-5e47-40a7-bae3-082f38a81f78')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-efeb8c00-5e47-40a7-bae3-082f38a81f78 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-efeb8c00-5e47-40a7-bae3-082f38a81f78');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "         Quantita\n",
              "count  520.000000\n",
              "mean    56.594115\n",
              "std     26.094139\n",
              "min      1.000000\n",
              "25%     38.000000\n",
              "50%     52.000000\n",
              "75%     71.250000\n",
              "max    144.970000"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_burger.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "9vWUJsef1qTz",
        "outputId": "78d2e81d-4d5d-40af-f4f5-646ac0a2fd0c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-943a8e4b-b777-42d0-9ac6-79ce3f0e1dfa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "      <th>Tipologia</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calendario</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01-10</th>\n",
              "      <td>1.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-21</th>\n",
              "      <td>3.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-11-15</th>\n",
              "      <td>11.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-11-10</th>\n",
              "      <td>11.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-10-11</th>\n",
              "      <td>11.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-07-08</th>\n",
              "      <td>137.00</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-09-18</th>\n",
              "      <td>138.98</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-19</th>\n",
              "      <td>139.98</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-07-27</th>\n",
              "      <td>142.87</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-20</th>\n",
              "      <td>144.97</td>\n",
              "      <td>Burger</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>520 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-943a8e4b-b777-42d0-9ac6-79ce3f0e1dfa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-943a8e4b-b777-42d0-9ac6-79ce3f0e1dfa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-943a8e4b-b777-42d0-9ac6-79ce3f0e1dfa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Quantita Tipologia\n",
              "Calendario                    \n",
              "2022-01-10      1.00    Burger\n",
              "2021-05-21      3.00    Burger\n",
              "2021-11-15     11.00    Burger\n",
              "2021-11-10     11.00    Burger\n",
              "2021-10-11     11.00    Burger\n",
              "...              ...       ...\n",
              "2022-07-08    137.00    Burger\n",
              "2022-09-18    138.98    Burger\n",
              "2022-08-19    139.98    Burger\n",
              "2022-07-27    142.87    Burger\n",
              "2022-08-20    144.97    Burger\n",
              "\n",
              "[520 rows x 2 columns]"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_burger.sort_values(by= 'Quantita', ascending = True)\n",
        "# anche qui (come a lezione) ci sono degli outlier -> da capire se eliminare dati con quantitÃ  troppo basse o troppo alte"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "3ZdgZNCZ_EKz",
        "outputId": "40eb3efd-1a1b-4d2e-b788-4b944700eb32"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-864abfa3-87ae-44a2-8806-d03399c09d26\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calendario</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-05-08</th>\n",
              "      <td>13.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-21</th>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-25</th>\n",
              "      <td>58.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-26</th>\n",
              "      <td>62.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-27</th>\n",
              "      <td>55.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-05</th>\n",
              "      <td>65.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-19</th>\n",
              "      <td>62.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-20</th>\n",
              "      <td>46.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-21</th>\n",
              "      <td>27.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-22</th>\n",
              "      <td>16.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>520 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-864abfa3-87ae-44a2-8806-d03399c09d26')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-864abfa3-87ae-44a2-8806-d03399c09d26 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-864abfa3-87ae-44a2-8806-d03399c09d26');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Quantita\n",
              "Calendario          \n",
              "2021-05-08     13.00\n",
              "2021-05-21      3.00\n",
              "2021-05-25     58.00\n",
              "2021-05-26     62.00\n",
              "2021-05-27     55.00\n",
              "...              ...\n",
              "2022-11-05     65.09\n",
              "2022-11-19     62.20\n",
              "2022-11-20     46.24\n",
              "2022-11-21     27.00\n",
              "2022-11-22     16.00\n",
              "\n",
              "[520 rows x 1 columns]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Tolgo colonna della tipologia che non serve piÃ¹\n",
        "df_burger = df_burger.drop('Tipologia', axis = 1)\n",
        "df_burger"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 588
        },
        "id": "B36llrZw2OWV",
        "outputId": "274158f8-0176-4918-df6f-99584e49750b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f339ddf4220>"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1296x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from matplotlib.figure import figaspect\n",
        "# Grafico con Matplotlib\n",
        "ax = plt.gca()\n",
        "df_burger.plot(figsize=(18,10), ax=ax)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bUEvbf1i392t"
      },
      "outputs": [],
      "source": [
        "import plotly.graph_objects as go"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "id": "3UtB0XRn29cM",
        "outputId": "f12107f2-fe06-48db-d286-9cb23ef5ad50"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"64658ce2-2166-495c-8e3e-c2bf7e201092\" class=\"plotly-graph-div\" style=\"height:700px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"64658ce2-2166-495c-8e3e-c2bf7e201092\")) {                    Plotly.newPlot(                        \"64658ce2-2166-495c-8e3e-c2bf7e201092\",                        [{\"line\":{\"color\":\"#0000FF\"},\"mode\":\"lines\",\"name\":\"Burger\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\"],\"y\":[13.0,3.0,58.0,62.0,55.0,74.0,64.0,66.0,34.0,65.0,67.0,48.0,76.0,73.0,48.0,46.0,60.0,78.0,36.0,75.0,63.0,72.0,36.0,78.0,74.0,48.0,75.0,51.0,42.0,48.0,52.0,77.0,86.0,48.0,42.0,62.0,29.0,49.2,46.0,37.0,70.0,58.0,70.0,31.0,47.0,58.0,39.0,57.0,58.0,69.0,33.0,55.0,68.0,72.0,54.0,101.0,70.0,27.0,54.0,77.0,79.0,56.0,33.0,67.0,49.0,80.0,78.0,65.0,70.0,64.0,53.0,40.0,69.0,46.0,21.0,44.0,68.0,47.0,55.0,81.0,48.0,69.0,75.0,63.0,57.0,38.0,42.0,69.0,58.0,52.0,74.0,54.0,41.0,31.0,68.0,63.0,31.0,42.0,55.0,52.0,86.0,83.0,64.0,67.0,75.0,79.0,65.0,81.0,85.8,61.0,30.0,75.0,63.0,49.15,97.0,124.0,54.0,45.0,63.0,51.0,59.0,60.0,110.0,52.0,29.0,56.0,62.0,78.01,70.0,115.0,86.0,23.0,66.0,53.0,23.0,47.0,94.0,51.0,11.0,44.0,16.0,51.0,75.0,95.0,67.0,26.0,33.0,53.0,43.33,63.98,83.86,44.0,24.99,21.97,37.0,39.0,48.93,67.0,52.0,43.0,17.0,38.0,47.0,77.0,70.0,31.0,20.0,31.0,11.0,39.0,57.0,88.97,45.0,11.0,31.0,50.0,40.0,65.98,79.0,43.0,17.99,39.0,42.0,46.11,46.0,60.02,37.0,21.0,22.0,35.0,34.0,42.0,69.12,51.0,35.0,36.59,45.81,39.0,41.0,42.0,44.0,45.05,43.0,49.0,52.0,57.97,72.0,50.0,33.0,68.0,34.98,47.69,37.97,16.0,41.0,39.0,51.0,61.2,54.0,50.0,1.0,27.0,48.0,26.0,43.0,73.97,29.0,33.0,36.98,48.99,38.0,51.0,82.0,48.98,18.0,57.0,38.0,36.0,93.94,97.16,57.0,27.0,35.98,43.0,43.97,73.97,56.97,50.76,18.0,17.0,77.94,43.0,72.0,79.98,26.0,29.0,36.03,89.29,40.97,60.3,83.0,68.02,13.0,13.99,48.0,31.0,60.0,50.97,44.0,30.0,21.0,40.0,41.0,54.98,78.0,34.0,23.98,52.0,47.0,18.6,56.0,75.97,38.0,24.0,72.0,47.0,75.0,68.6,79.0,58.0,37.78,38.97,37.0,40.0,91.02,79.0,41.0,13.0,33.0,46.2,17.99,61.2,68.97,61.2,22.0,38.99,45.0,33.24,51.93,58.0,43.0,42.0,40.0,22.0,66.88,38.0,51.0,43.0,57.98,38.97,34.0,42.68,47.97,65.19,68.38,49.0,21.0,45.17,57.0,81.97,54.0,57.0,15.0,35.97,34.0,33.05,44.0,83.13,26.0,42.0,62.0,52.0,20.0,85.73,99.0,54.98,43.0,17.0,66.97,43.0,64.0,81.0,63.0,24.0,63.97,38.99,40.0,67.0,83.0,51.0,34.0,35.0,71.0,42.12,57.0,80.0,61.0,35.0,70.1,87.16,31.0,43.0,99.0,56.0,28.0,60.93,62.97,39.96,36.97,45.0,38.0,36.0,40.0,73.0,46.0,62.97,39.0,43.0,43.01,44.0,77.0,41.0,36.0,41.0,59.07,39.97,50.0,75.0,88.0,137.0,131.97,110.0,33.97,86.0,125.98,90.91,117.1,98.0,111.0,44.0,106.0,119.01,104.99,106.07,94.97,97.0,48.85,111.97,142.87,103.0,74.0,88.97,106.97,56.0,76.0,116.0,93.08,109.0,69.0,97.0,60.97,115.0,63.0,101.0,104.0,76.0,80.98,139.98,144.97,106.94,34.97,69.0,102.12,85.97,121.0,75.0,123.98,52.97,75.0,83.0,66.97,94.98,101.98,109.0,34.05,89.0,83.0,90.07,96.97,121.97,68.0,34.99,87.0,64.0,60.0,107.95,134.88,138.98,31.0,54.97,70.0,67.13,119.99,118.97,95.0,13.0,36.0,27.0,32.98,46.0,78.64,25.0,14.0,34.99,31.0,31.0,39.0,66.94,51.0,31.0,40.0,20.0,23.0,35.0,79.91,35.0,39.97,23.9,39.0,28.0,61.97,92.97,21.0,29.0,58.24,41.91,22.0,56.98,69.0,52.09,58.97,23.98,23.0,26.0,33.93,65.09,62.2,46.24,27.0,16.0],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Burger venduti\"},\"xaxis\":{\"title\":{\"text\":\"Date\"},\"rangeslider\":{\"visible\":true},\"rangeselector\":{\"buttons\":[{\"count\":1,\"label\":\"1m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":2,\"label\":\"3m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":3,\"label\":\"5m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"step\":\"all\"}]}},\"yaxis\":{\"title\":{\"text\":\"Quantit\\u00e0\"}},\"width\":1000,\"height\":700},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('64658ce2-2166-495c-8e3e-c2bf7e201092');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from tables import index\n",
        "# Grafico con Plotly\n",
        "fig = go.Figure()\n",
        "\n",
        "fig.add_trace(go.Scatter(x = df_burger.index, \n",
        "                         y = df_burger['Quantita'],\n",
        "                         mode = \"lines\",\n",
        "                         name = \"Burger\",\n",
        "                         line_color='#0000FF',\n",
        "                         ))\n",
        "# adjust layout\n",
        "fig.update_layout(title = \"Burger venduti\",\n",
        "                  xaxis_title = \"Date\",\n",
        "                  yaxis_title = \"QuantitÃ \",\n",
        "                  width = 1000,\n",
        "                  height = 700,\n",
        "                  )\n",
        "\n",
        "# zoomming\n",
        "fig.update_xaxes(\n",
        "    rangeslider_visible=True,\n",
        "    rangeselector=dict(\n",
        "        buttons=list([\n",
        "            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n",
        "            dict(count=2, label=\"3m\", step=\"month\", stepmode=\"backward\"),\n",
        "            dict(count=3, label=\"5m\", step=\"month\", stepmode=\"backward\"),\n",
        "            dict(step=\"all\")\n",
        "        ])\n",
        "    )\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "ebjSkyikAZ9X",
        "outputId": "797245b2-c3af-4d6f-8f58-932418cc4fca"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1296x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Analizzare correlazione\n",
        "import matplotlib.pyplot as plt\n",
        "from pandas.plotting import lag_plot\n",
        "\n",
        "plt.figure(figsize=(18,10))\n",
        "lag_plot(df_burger['Quantita']);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "oUNcy5dYDTuV",
        "outputId": "6d4cbc03-7741-4170-b144-ddadd29098d8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-623fcafd-881e-449b-adb5-1849fffcfa13\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Calendario</th>\n",
              "      <th>Quantita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-05-08</td>\n",
              "      <td>13.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-05-21</td>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-05-25</td>\n",
              "      <td>58.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-05-26</td>\n",
              "      <td>62.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-05-27</td>\n",
              "      <td>55.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515</th>\n",
              "      <td>2022-11-05</td>\n",
              "      <td>65.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>516</th>\n",
              "      <td>2022-11-19</td>\n",
              "      <td>62.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>517</th>\n",
              "      <td>2022-11-20</td>\n",
              "      <td>46.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>518</th>\n",
              "      <td>2022-11-21</td>\n",
              "      <td>27.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>2022-11-22</td>\n",
              "      <td>16.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>520 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-623fcafd-881e-449b-adb5-1849fffcfa13')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-623fcafd-881e-449b-adb5-1849fffcfa13 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-623fcafd-881e-449b-adb5-1849fffcfa13');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    Calendario  Quantita\n",
              "0   2021-05-08     13.00\n",
              "1   2021-05-21      3.00\n",
              "2   2021-05-25     58.00\n",
              "3   2021-05-26     62.00\n",
              "4   2021-05-27     55.00\n",
              "..         ...       ...\n",
              "515 2022-11-05     65.09\n",
              "516 2022-11-19     62.20\n",
              "517 2022-11-20     46.24\n",
              "518 2022-11-21     27.00\n",
              "519 2022-11-22     16.00\n",
              "\n",
              "[520 rows x 2 columns]"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Resetto indice per poter riportare la data come colonna e poter creare la colonna ds per Prophet\n",
        "df_burger = df_burger.reset_index()\n",
        "df_burger"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "u1wJaIZWD-la",
        "outputId": "fa34c95f-153d-4f46-b0b3-cf177da270cb"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-88488462-c906-4c77-9af5-3b054f6bcaed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ds</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-05-08</td>\n",
              "      <td>13.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-05-21</td>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-05-25</td>\n",
              "      <td>58.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-05-26</td>\n",
              "      <td>62.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-05-27</td>\n",
              "      <td>55.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515</th>\n",
              "      <td>2022-11-05</td>\n",
              "      <td>65.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>516</th>\n",
              "      <td>2022-11-19</td>\n",
              "      <td>62.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>517</th>\n",
              "      <td>2022-11-20</td>\n",
              "      <td>46.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>518</th>\n",
              "      <td>2022-11-21</td>\n",
              "      <td>27.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>2022-11-22</td>\n",
              "      <td>16.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>520 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88488462-c906-4c77-9af5-3b054f6bcaed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88488462-c906-4c77-9af5-3b054f6bcaed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88488462-c906-4c77-9af5-3b054f6bcaed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            ds      y\n",
              "0   2021-05-08  13.00\n",
              "1   2021-05-21   3.00\n",
              "2   2021-05-25  58.00\n",
              "3   2021-05-26  62.00\n",
              "4   2021-05-27  55.00\n",
              "..         ...    ...\n",
              "515 2022-11-05  65.09\n",
              "516 2022-11-19  62.20\n",
              "517 2022-11-20  46.24\n",
              "518 2022-11-21  27.00\n",
              "519 2022-11-22  16.00\n",
              "\n",
              "[520 rows x 2 columns]"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Credo colonne ds e y \n",
        "df_burger.columns = ['ds', 'y']\n",
        "df_burger"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pEh6O4j4EaTr",
        "outputId": "e5256696-c1e3-4026-ba5c-96acaa5d7ca4"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j3p3xdlc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2nl23bmy.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=17165', 'data', 'file=/tmp/tmpoat8y4sf/j3p3xdlc.json', 'init=/tmp/tmpoat8y4sf/2nl23bmy.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelissffr7a/prophet_model-20221204100741.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n"
          ]
        }
      ],
      "source": [
        "# Creo il modello\n",
        "m = Prophet(seasonality_mode='multiplicative', \n",
        "            interval_width=0.95)\n",
        "model = m.fit(df_burger)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wE9YSWTEFdBC"
      },
      "outputs": [],
      "source": [
        "# Faccio previsione\n",
        "future = model.make_future_dataframe(periods=30, freq='D')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tjg-rz6SFvLM",
        "outputId": "5117e9a3-611b-4012-bdb1-964e97c6331f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "520\n",
            "550\n"
          ]
        }
      ],
      "source": [
        "# Controllo che tornino le dimensioni\n",
        "print(len(df_burger))\n",
        "print(len(future))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 661
        },
        "id": "l-NSdghpF_3X",
        "outputId": "36cf2299-1a34-49f1-f272-c01267ca7e44"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-a8da5c89-c88c-4bf0-9a56-14a5c126fc63\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ds</th>\n",
              "      <th>trend</th>\n",
              "      <th>yhat_lower</th>\n",
              "      <th>yhat_upper</th>\n",
              "      <th>trend_lower</th>\n",
              "      <th>trend_upper</th>\n",
              "      <th>multiplicative_terms</th>\n",
              "      <th>multiplicative_terms_lower</th>\n",
              "      <th>multiplicative_terms_upper</th>\n",
              "      <th>weekly</th>\n",
              "      <th>weekly_lower</th>\n",
              "      <th>weekly_upper</th>\n",
              "      <th>additive_terms</th>\n",
              "      <th>additive_terms_lower</th>\n",
              "      <th>additive_terms_upper</th>\n",
              "      <th>yhat</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2021-05-08</td>\n",
              "      <td>55.614261</td>\n",
              "      <td>33.975000</td>\n",
              "      <td>117.595118</td>\n",
              "      <td>55.614261</td>\n",
              "      <td>55.614261</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.344355</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>74.765285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2021-05-21</td>\n",
              "      <td>55.370875</td>\n",
              "      <td>26.024576</td>\n",
              "      <td>105.974627</td>\n",
              "      <td>55.370875</td>\n",
              "      <td>55.370875</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.169102</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>64.734173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2021-05-25</td>\n",
              "      <td>55.295987</td>\n",
              "      <td>10.233188</td>\n",
              "      <td>94.555524</td>\n",
              "      <td>55.295987</td>\n",
              "      <td>55.295987</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>50.909472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2021-05-26</td>\n",
              "      <td>55.277265</td>\n",
              "      <td>15.971142</td>\n",
              "      <td>100.895926</td>\n",
              "      <td>55.277265</td>\n",
              "      <td>55.277265</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>56.679786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2021-05-27</td>\n",
              "      <td>55.258542</td>\n",
              "      <td>3.844715</td>\n",
              "      <td>92.008769</td>\n",
              "      <td>55.258542</td>\n",
              "      <td>55.258542</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>49.112207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>545</th>\n",
              "      <td>2022-12-18</td>\n",
              "      <td>68.116275</td>\n",
              "      <td>30.899442</td>\n",
              "      <td>113.102308</td>\n",
              "      <td>67.861693</td>\n",
              "      <td>68.329111</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.050499</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>71.556107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>546</th>\n",
              "      <td>2022-12-19</td>\n",
              "      <td>68.154993</td>\n",
              "      <td>-1.286030</td>\n",
              "      <td>82.997176</td>\n",
              "      <td>67.885484</td>\n",
              "      <td>68.382568</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>-0.398771</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.976735</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>547</th>\n",
              "      <td>2022-12-20</td>\n",
              "      <td>68.193710</td>\n",
              "      <td>19.302081</td>\n",
              "      <td>103.962589</td>\n",
              "      <td>67.909051</td>\n",
              "      <td>68.437762</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>-0.079328</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>62.784046</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>548</th>\n",
              "      <td>2022-12-21</td>\n",
              "      <td>68.232427</td>\n",
              "      <td>26.455433</td>\n",
              "      <td>113.205430</td>\n",
              "      <td>67.933812</td>\n",
              "      <td>68.501676</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.025372</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>69.963653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>549</th>\n",
              "      <td>2022-12-22</td>\n",
              "      <td>68.271144</td>\n",
              "      <td>16.322217</td>\n",
              "      <td>103.894096</td>\n",
              "      <td>67.958572</td>\n",
              "      <td>68.559828</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>-0.111229</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>60.677434</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>550 rows Ã— 16 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8da5c89-c88c-4bf0-9a56-14a5c126fc63')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a8da5c89-c88c-4bf0-9a56-14a5c126fc63 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a8da5c89-c88c-4bf0-9a56-14a5c126fc63');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            ds      trend  yhat_lower  yhat_upper  trend_lower  trend_upper  \\\n",
              "0   2021-05-08  55.614261   33.975000  117.595118    55.614261    55.614261   \n",
              "1   2021-05-21  55.370875   26.024576  105.974627    55.370875    55.370875   \n",
              "2   2021-05-25  55.295987   10.233188   94.555524    55.295987    55.295987   \n",
              "3   2021-05-26  55.277265   15.971142  100.895926    55.277265    55.277265   \n",
              "4   2021-05-27  55.258542    3.844715   92.008769    55.258542    55.258542   \n",
              "..         ...        ...         ...         ...          ...          ...   \n",
              "545 2022-12-18  68.116275   30.899442  113.102308    67.861693    68.329111   \n",
              "546 2022-12-19  68.154993   -1.286030   82.997176    67.885484    68.382568   \n",
              "547 2022-12-20  68.193710   19.302081  103.962589    67.909051    68.437762   \n",
              "548 2022-12-21  68.232427   26.455433  113.205430    67.933812    68.501676   \n",
              "549 2022-12-22  68.271144   16.322217  103.894096    67.958572    68.559828   \n",
              "\n",
              "     multiplicative_terms  multiplicative_terms_lower  \\\n",
              "0                0.344355                    0.344355   \n",
              "1                0.169102                    0.169102   \n",
              "2               -0.079328                   -0.079328   \n",
              "3                0.025372                    0.025372   \n",
              "4               -0.111229                   -0.111229   \n",
              "..                    ...                         ...   \n",
              "545              0.050499                    0.050499   \n",
              "546             -0.398771                   -0.398771   \n",
              "547             -0.079328                   -0.079328   \n",
              "548              0.025372                    0.025372   \n",
              "549             -0.111229                   -0.111229   \n",
              "\n",
              "     multiplicative_terms_upper    weekly  weekly_lower  weekly_upper  \\\n",
              "0                      0.344355  0.344355      0.344355      0.344355   \n",
              "1                      0.169102  0.169102      0.169102      0.169102   \n",
              "2                     -0.079328 -0.079328     -0.079328     -0.079328   \n",
              "3                      0.025372  0.025372      0.025372      0.025372   \n",
              "4                     -0.111229 -0.111229     -0.111229     -0.111229   \n",
              "..                          ...       ...           ...           ...   \n",
              "545                    0.050499  0.050499      0.050499      0.050499   \n",
              "546                   -0.398771 -0.398771     -0.398771     -0.398771   \n",
              "547                   -0.079328 -0.079328     -0.079328     -0.079328   \n",
              "548                    0.025372  0.025372      0.025372      0.025372   \n",
              "549                   -0.111229 -0.111229     -0.111229     -0.111229   \n",
              "\n",
              "     additive_terms  additive_terms_lower  additive_terms_upper       yhat  \n",
              "0               0.0                   0.0                   0.0  74.765285  \n",
              "1               0.0                   0.0                   0.0  64.734173  \n",
              "2               0.0                   0.0                   0.0  50.909472  \n",
              "3               0.0                   0.0                   0.0  56.679786  \n",
              "4               0.0                   0.0                   0.0  49.112207  \n",
              "..              ...                   ...                   ...        ...  \n",
              "545             0.0                   0.0                   0.0  71.556107  \n",
              "546             0.0                   0.0                   0.0  40.976735  \n",
              "547             0.0                   0.0                   0.0  62.784046  \n",
              "548             0.0                   0.0                   0.0  69.963653  \n",
              "549             0.0                   0.0                   0.0  60.677434  \n",
              "\n",
              "[550 rows x 16 columns]"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Faccio forecast\n",
        "forecast = model.predict(future)\n",
        "forecast\n",
        "# di tutte questa variabili mi servono solo yhat, yhat_lower,\tyhat_upper"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "sTjMo65QGTa0",
        "outputId": "30bfd932-43c9-48b5-80a1-9db36b9154f6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "model.plot(forecast);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "JR4E2DXbGzSo",
        "outputId": "510ae5b8-6866-4949-df4c-f095083979b9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Guardo i change points\n",
        "from prophet.plot import add_changepoints_to_plot\n",
        "\n",
        "plot = model.plot(forecast)\n",
        "a = add_changepoints_to_plot(plot.gca(), model, forecast)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "olJwmr3bHh3U",
        "outputId": "f94f4dc5-9e06-4cdf-df83-42e9fb562c23"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"35e3b9df-5c11-4309-b50f-9453bf6e6423\" class=\"plotly-graph-div\" style=\"height:600px; width:900px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"35e3b9df-5c11-4309-b50f-9453bf6e6423\")) {                    Plotly.newPlot(                        \"35e3b9df-5c11-4309-b50f-9453bf6e6423\",                        [{\"marker\":{\"color\":\"black\",\"size\":4},\"mode\":\"markers\",\"name\":\"Actual\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\"],\"y\":[13.0,3.0,58.0,62.0,55.0,74.0,64.0,66.0,34.0,65.0,67.0,48.0,76.0,73.0,48.0,46.0,60.0,78.0,36.0,75.0,63.0,72.0,36.0,78.0,74.0,48.0,75.0,51.0,42.0,48.0,52.0,77.0,86.0,48.0,42.0,62.0,29.0,49.2,46.0,37.0,70.0,58.0,70.0,31.0,47.0,58.0,39.0,57.0,58.0,69.0,33.0,55.0,68.0,72.0,54.0,101.0,70.0,27.0,54.0,77.0,79.0,56.0,33.0,67.0,49.0,80.0,78.0,65.0,70.0,64.0,53.0,40.0,69.0,46.0,21.0,44.0,68.0,47.0,55.0,81.0,48.0,69.0,75.0,63.0,57.0,38.0,42.0,69.0,58.0,52.0,74.0,54.0,41.0,31.0,68.0,63.0,31.0,42.0,55.0,52.0,86.0,83.0,64.0,67.0,75.0,79.0,65.0,81.0,85.8,61.0,30.0,75.0,63.0,49.15,97.0,124.0,54.0,45.0,63.0,51.0,59.0,60.0,110.0,52.0,29.0,56.0,62.0,78.01,70.0,115.0,86.0,23.0,66.0,53.0,23.0,47.0,94.0,51.0,11.0,44.0,16.0,51.0,75.0,95.0,67.0,26.0,33.0,53.0,43.33,63.98,83.86,44.0,24.99,21.97,37.0,39.0,48.93,67.0,52.0,43.0,17.0,38.0,47.0,77.0,70.0,31.0,20.0,31.0,11.0,39.0,57.0,88.97,45.0,11.0,31.0,50.0,40.0,65.98,79.0,43.0,17.99,39.0,42.0,46.11,46.0,60.02,37.0,21.0,22.0,35.0,34.0,42.0,69.12,51.0,35.0,36.59,45.81,39.0,41.0,42.0,44.0,45.05,43.0,49.0,52.0,57.97,72.0,50.0,33.0,68.0,34.98,47.69,37.97,16.0,41.0,39.0,51.0,61.2,54.0,50.0,1.0,27.0,48.0,26.0,43.0,73.97,29.0,33.0,36.98,48.99,38.0,51.0,82.0,48.98,18.0,57.0,38.0,36.0,93.94,97.16,57.0,27.0,35.98,43.0,43.97,73.97,56.97,50.76,18.0,17.0,77.94,43.0,72.0,79.98,26.0,29.0,36.03,89.29,40.97,60.3,83.0,68.02,13.0,13.99,48.0,31.0,60.0,50.97,44.0,30.0,21.0,40.0,41.0,54.98,78.0,34.0,23.98,52.0,47.0,18.6,56.0,75.97,38.0,24.0,72.0,47.0,75.0,68.6,79.0,58.0,37.78,38.97,37.0,40.0,91.02,79.0,41.0,13.0,33.0,46.2,17.99,61.2,68.97,61.2,22.0,38.99,45.0,33.24,51.93,58.0,43.0,42.0,40.0,22.0,66.88,38.0,51.0,43.0,57.98,38.97,34.0,42.68,47.97,65.19,68.38,49.0,21.0,45.17,57.0,81.97,54.0,57.0,15.0,35.97,34.0,33.05,44.0,83.13,26.0,42.0,62.0,52.0,20.0,85.73,99.0,54.98,43.0,17.0,66.97,43.0,64.0,81.0,63.0,24.0,63.97,38.99,40.0,67.0,83.0,51.0,34.0,35.0,71.0,42.12,57.0,80.0,61.0,35.0,70.1,87.16,31.0,43.0,99.0,56.0,28.0,60.93,62.97,39.96,36.97,45.0,38.0,36.0,40.0,73.0,46.0,62.97,39.0,43.0,43.01,44.0,77.0,41.0,36.0,41.0,59.07,39.97,50.0,75.0,88.0,137.0,131.97,110.0,33.97,86.0,125.98,90.91,117.1,98.0,111.0,44.0,106.0,119.01,104.99,106.07,94.97,97.0,48.85,111.97,142.87,103.0,74.0,88.97,106.97,56.0,76.0,116.0,93.08,109.0,69.0,97.0,60.97,115.0,63.0,101.0,104.0,76.0,80.98,139.98,144.97,106.94,34.97,69.0,102.12,85.97,121.0,75.0,123.98,52.97,75.0,83.0,66.97,94.98,101.98,109.0,34.05,89.0,83.0,90.07,96.97,121.97,68.0,34.99,87.0,64.0,60.0,107.95,134.88,138.98,31.0,54.97,70.0,67.13,119.99,118.97,95.0,13.0,36.0,27.0,32.98,46.0,78.64,25.0,14.0,34.99,31.0,31.0,39.0,66.94,51.0,31.0,40.0,20.0,23.0,35.0,79.91,35.0,39.97,23.9,39.0,28.0,61.97,92.97,21.0,29.0,58.24,41.91,22.0,56.98,69.0,52.09,58.97,23.98,23.0,26.0,33.93,65.09,62.2,46.24,27.0,16.0],\"type\":\"scatter\"},{\"hoverinfo\":\"skip\",\"line\":{\"width\":0},\"mode\":\"lines\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[33.975000382823886,26.024575514242695,10.233188431635215,15.971142077863064,3.8447147387998633,20.209503382478744,31.7208279610754,14.68999405705289,-12.823120329791854,8.322084512681386,14.263503820574119,7.4073579158459015,20.591663780014525,28.07956262530997,12.357174655104483,-9.977773783358614,4.7925831888421015,14.416574940389992,4.585179794978542,21.758627073715175,30.802929829768214,11.142148939625057,-8.471410597696778,4.229348998311293,12.485998448536956,5.804948090630594,19.54398430375141,33.91152271640267,17.701041900812964,-9.926857873769308,7.495544652989536,15.640355910481484,4.863296784409698,24.643120939427373,30.49707995102321,14.984183529939504,-11.421394308769038,8.563849006615573,12.788416759408715,2.9971727726202877,23.61991199022866,29.518537447586827,15.579519969825581,-8.81461047748244,9.278148214920831,14.021375823639225,8.61482000443346,19.32694256534011,29.92460908031004,18.209517777995956,-11.235046149776945,7.5362111514109404,15.72751750579803,6.29643578310166,19.55839996393253,30.956811086813342,12.9713657249962,-10.061612429575638,7.860302621208088,7.562668116409738,5.305513661591021,20.280766653389513,31.235601275129635,13.240030546462618,-7.0260892232745675,8.674742385993913,10.405837616142158,5.28385464807431,19.612926727811548,25.919220759356747,10.568494878714333,-10.204634720344854,6.712866230145477,7.989355468505364,5.143873059755147,19.46460811389848,31.835265228681564,14.971696232017095,-11.9440343767904,8.517880481820116,14.15313548096012,4.837877892711328,-12.08719074564439,6.491287588717318,11.9701832656201,2.6097980727064463,21.289713747629833,28.775395657339903,8.381177966730307,-11.950204776564256,8.725516559444475,14.477000440394399,3.412910873039795,20.377708502567124,27.0581748293166,14.544569888409972,-10.030190326684364,8.633778454674795,12.026792736599006,1.3208790117261962,18.020673935973576,26.99023134872441,16.439308026502086,-12.302066946163656,7.202887632468389,11.778923685093067,5.7137352217398005,22.16627200118586,32.52817370609483,12.512973465585583,-10.375804629625005,6.2008504822955555,10.065876444138675,4.687267252817951,17.614710942249744,29.817116747233978,6.751259804882176,-9.98746665240872,3.935289883383258,13.694797288835147,5.740385033100109,17.458006186494675,28.62713996888979,13.693098545826173,-11.961796126825677,5.642384405062792,10.33345590676997,-0.5754890833740655,18.377655576047157,26.85240881945255,12.424540126353286,-13.676285788832931,5.190095237151999,12.979450272794706,6.868473538772905,16.51978248433705,26.593164604160677,11.615432881765301,-12.057669733198214,3.47828350583583,10.467687913938711,4.617462879336043,18.20641843085723,29.04714833124244,11.498894302269651,-14.504444462331252,5.764660429801774,8.800501605550991,4.36427839216396,16.8195281022937,24.304343342940907,14.86347686683973,-10.143583583832415,8.298128170479604,9.598762282438903,6.662216786868363,19.892148257511128,29.77927401781251,14.927906960231885,-12.173411708485272,6.12356077853096,9.415000595427356,2.5350260043004367,19.85298665314664,26.267532864348595,9.541339961628307,-11.47489150666476,4.185232158704627,11.310492900541277,5.973313989437239,17.31194502623234,25.47314572850777,10.239535098413198,-10.869708139632802,0.7652726438275296,10.760525658932925,4.772574934067355,14.174609391663179,29.11941679216606,7.929793084254854,-14.032916140325725,4.367444580338289,11.417073339640321,4.380456322549734,16.89804105561503,28.09613811304769,11.814689995032522,-12.227361067260134,5.347133713116998,8.5891415763272,0.42316584214162506,11.747297488760221,25.84276756244447,8.325929656816788,-9.756522487071582,1.554702740189434,9.923764364469514,-0.46486116528169846,18.338048977018218,26.389640963570137,7.9977369633910085,-12.09478492881358,7.481251782458578,8.052006326822053,4.002739696897173,16.905973848118695,24.415616000941824,10.180358882113676,-9.225023169820917,2.269899836262251,8.883063367804347,4.3443634206219475,17.300169652781648,24.464191768020903,10.273406518911775,-15.947965419117336,3.3626871095699107,9.611558455507044,9.233642314805214,11.731426284152448,-13.212708334714002,2.5794398865271586,7.710930517150677,2.5707968321875185,15.032480630805097,26.53557562780268,12.516909555543348,-11.396002006606373,5.662076483538435,7.793043980044388,2.7322716032264216,16.14343093454879,26.249031939877852,11.895571104752342,-11.198786401919067,4.817109229644764,7.948356414390157,4.573318977108956,15.097384438177583,24.72077815051865,9.308666312430343,-9.240245224696944,6.590388598087819,10.655000053227003,2.0152983656962915,20.47706400772886,25.434772623840576,13.514845082559455,-13.649912330447357,1.0616665574943704,9.757773975267307,-1.3982843578037767,16.599573984215088,25.756119452795318,12.275836544518917,-12.075803253811221,8.103182801053988,11.212738812437117,3.999686222473561,15.858793132530035,24.968320411286346,14.525732072421432,-13.62709054838241,7.683238579891879,9.887178892764718,2.7630099922015114,15.080851473721832,28.818190527314204,10.733914247331455,-11.63004744266365,9.212625038274664,10.856431724685821,3.6268526171476014,21.22254828011324,27.6624599233103,11.418009193532846,-13.917352315243662,2.9550298915640214,14.258342585095365,5.513478246959629,17.633149679713963,27.89313170678914,16.056172374766515,-9.146202474728446,6.7009650240874965,11.824145399373688,5.461394431801241,21.800224897549725,31.110461812550973,13.938415431542092,-12.430844752926564,6.793840024824708,14.748695456766434,5.700361796535937,17.261114259526316,30.20835068704248,13.691193652298375,-8.185061400053014,5.8588404469642965,11.155684045007686,6.639340327654756,19.52813232661733,32.659974987240666,13.483993910541061,-8.233273290483114,3.4018410846250378,15.933944971487978,10.178155669565106,20.344598864039465,29.54310159990412,18.90355481946328,-10.577501595682198,8.611570932853848,16.185541824771548,6.773944647262895,23.360195854544788,30.991907705991522,13.615551955089195,-9.227542920897019,8.017142219000498,14.486125010712021,6.586501612417067,22.95316231665066,33.09911272661464,17.74119032176525,-9.868116672203255,9.027500506742495,16.314588328644103,8.057012471374522,24.196239896777968,32.143924452402615,17.66737792356261,-8.208398360769806,10.194228516520392,15.457908327007582,8.254395967266513,24.257803214731013,32.42414668785235,18.165899870363294,-9.39276524013567,11.035569592447608,17.474168756425627,7.531699514942015,28.51509296658525,34.50920778976161,17.539728321731896,-7.067146210868947,7.603277678366893,17.08872667698502,9.052629053114545,25.071412680733665,35.121502402515496,17.99959219619988,-10.393672918487471,7.915707924778821,19.004936505708816,6.917831346351986,19.819864899691083,31.951890467730184,16.704052744199597,-7.394880373505246,9.606537161506955,18.263403764945085,7.592779992303458,23.012250445538065,35.62855546947747,18.27646955112413,-9.365011526132545,10.648838897654617,15.194523509920375,9.550270825209152,26.432334964661948,38.155953090680335,19.970098010413963,-5.721834125982188,13.46851365621323,16.760769666816458,12.126343505966103,28.385450691990183,36.40246516337866,20.2196498788666,-3.8862442760711717,13.430118405814634,17.855935631471738,12.378685754955603,26.69366697687238,39.87960674963982,20.007231815287106,-4.55726025112407,12.677393076658491,19.86815858948505,13.439404416524493,29.48010351535153,39.0122142615642,20.695754200812264,-4.427057663118696,13.645564203644483,17.519397098786165,11.62400226357925,31.23293929800567,39.28427771236962,19.819066045820644,-6.991934282657335,13.357904950090369,19.265956787256513,11.413461314496839,28.74446220568695,42.12171962593161,23.154107738389094,-5.046317898746646,12.230475815995009,20.90112777106709,12.981866158043628,30.06244669685752,41.953713950450904,20.838065581801352,-4.925082466332063,13.054490702512107,21.449625404251126,14.530931680050909,30.928245054887864,41.91199239093714,20.15177180403963,-5.0365924753589475,13.502113800383457,23.948598865029787,12.37599915035192,25.65612978697277,40.77040589053938,21.89014023506316,-2.965462683003224,14.683585421524466,20.705949968789255,12.78873175652744,14.80712747501578,20.032248616783203,13.040206753276378,32.20785165909999,41.51158108042318,23.397844310732186,-6.671981887959918,16.392486291998875,22.77969298547757,16.19767458068107,32.21389332632907,42.747304928385255,22.210165808548748,-2.7392685948733733,18.900593356011402,22.027008961084984,9.025267018712492,33.508077914733015,43.956098113399115,25.23679092425195,-1.4070740395162593,14.381546160472881,23.147131439926895,15.092463861668138,31.12607205309117,44.872571975524075,22.718722941663685,-5.011347259586183,11.483639588359326,26.285521394352546,12.281327590748226,35.65505781956516,42.63554063167946,25.145376244761074,-3.162850667332099,15.312779441149672,22.622951229230758,15.450598173300442,30.710297328534878,43.30416026401986,25.921348731904462,-2.5494648300416896,14.768873273449563,26.53209189161269,14.460641425654721,33.86662857165426,43.71014767706415,22.172187467249984,-5.423797317819781,16.42958356382979,25.939230162319333,15.942108069578966,32.38557503207082,43.156537523395635,26.424287263080263,-2.525045296559104,17.261782716619653,29.191098998292773,14.18327066084756,31.493746079509467,43.62458001375359,27.855473624272058,-3.7213321848556427,14.511391730737783,22.139207279102642,15.76089347676533,34.87350908975655,46.708537053785584,25.703836198036434,-6.675218539079774,17.526536983292058,23.106792247399333,16.878690426488593,33.26406607375622,44.22511896631856,22.555604343371545,-3.527951663258605,20.210796410350735,23.601626586608646,17.91187391153913,35.1612309728171,46.51376819006203,47.15617794399678,24.361129634746806,-1.7802671428921537,19.15800972677516,24.534383688507994,16.413527345951493,38.05548466336591,49.54647959843448,25.357575633985835,-0.7175592351707605,18.31768387135173,21.953254093698703,16.50497757406589,35.88124960629731,48.07645006621906,30.173969327031624,-3.9456922351855814,15.840290927871246,25.931044582378576,21.52480400704078,38.24633029864496,47.97650169835539,30.301989541995244,-4.511000546388378,19.889378394032114,27.377170197981474,15.711955293369412,37.69309755957514,50.72128248322235,30.89944236228975,-1.2860295678072071,19.302080625450667,26.455432737846774,16.32221693584043],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 114, 178, 0.2)\",\"line\":{\"color\":\"#0072B2\",\"width\":2},\"mode\":\"lines\",\"name\":\"Predicted\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[74.76528521329429,64.73417323024454,50.909472019541575,56.679785902378505,49.112206641244626,64.58095748477294,74.2367349981811,57.990063402210716,33.17799427804259,50.78881400918307,56.54540645983498,48.99572936691737,64.42774173933188,74.06055159314428,57.852390969462625,33.099200695258304,50.6681559989015,56.411027017271856,48.879252092158204,64.2745259928258,73.88436818630701,57.714718534728945,33.02040711114415,50.5474979861762,56.27664757153361,48.76277481508268,64.12131024365733,73.70818477710723,57.57704609860176,32.94161352649808,50.426839972983196,56.14226812583448,48.64629753798387,63.96809449458066,73.5320013661262,57.43937365970249,32.862819939468004,50.30618195497753,56.00788867333428,48.52982025385164,63.814878734710014,73.3558179445279,57.301701213876676,32.784026349271,50.185523933360585,55.87350921814875,48.41334296854719,63.66166297482416,73.17963452289999,57.16402876805096,32.705232759073986,50.06486591170363,55.7391297629298,48.296865683196025,63.50844721484605,73.00345110111232,57.02635632205928,32.6264391687709,49.944207889917784,55.604750307556365,48.18038839774779,63.3552314547459,72.82726767924622,56.8886838761658,32.54764557845469,49.82354986810041,55.47037085216366,48.06391111188509,63.20201569358019,72.65108425567223,56.75101142836762,32.4688519868835,49.70289184397507,55.33599139376991,47.94743382380218,63.048799930029475,72.47490082982101,56.61333897923553,32.39005839478505,49.582233819369115,55.2016119353377,47.830956535700274,32.311264802686644,49.461575794838275,55.067232475849664,47.714479245700055,62.742368399167226,72.12253397238898,56.33799407548434,32.232471206753644,49.3409177634247,54.932853009752165,47.59800195095788,62.589152626861576,71.94635053649573,56.2003216184985,32.153677610160656,49.2202597320266,54.79847354369281,47.481524656230626,62.4359368545855,71.77016710199234,56.06264916369727,32.074884015456,49.09960170442651,54.664094082926084,47.36504736701046,62.28272109078878,71.59398367589677,55.92497671435748,31.996090423238982,48.9789436796551,54.52971462431067,47.248570078751904,62.12950532691795,71.41780024977231,55.78730426501836,31.917296830775946,48.85828565414999,54.39533516436547,47.13209278891498,61.97628956057158,71.24161682012492,55.64963181245217,31.83850323671259,48.73762762660983,54.26095570260109,47.01561549792693,61.82307379319932,71.06543338988772,55.5119593600086,31.75970964265808,48.61696959906962,54.12657624081789,46.899138205648576,61.66985802242735,70.88924995394837,55.37428690151822,31.68091604436896,48.49631156374067,53.99219676895211,46.78266090589231,61.51664224353096,70.71306651044269,55.23661443858494,31.60212244438043,48.37565352705562,53.857817297048804,46.6661836061137,61.36342646460528,70.53688306805141,55.098941977404515,31.523328845888795,48.25499549348752,53.723437829425265,46.54970631078656,61.21021069252552,70.36069963240628,54.96126952060985,31.444535249422167,48.13433746225541,53.589058363532324,46.43322901620513,61.05699492043117,70.18451619674826,54.8235970638153,31.365741652938077,48.01367944894763,53.45467893761822,46.31675177359227,60.90377923948702,70.00833289207398,54.685924729955374,31.286948138472592,47.89302154327741,53.32029961158328,46.20027460021482,60.75056362685487,69.83214963978236,54.54825241644604,31.208154623994528,47.77236363760716,53.18592028552987,46.08379742687395,60.59776603613847,69.65692775783823,54.4117069473849,31.130221006798706,47.653351701861055,53.05374074238975,45.96954476662988,60.44747657743698,69.48410930176274,54.27666393758869,31.052932312534292,47.534998153976666,52.921927829669606,45.85529210636761,60.297187118735415,69.3112908457076,54.151882791773524,30.98738989169643,47.4436255213249,52.8301805573214,45.784449514032836,60.215420272242,69.23039922319136,54.08867282901526,30.951213154442026,47.38822744216566,52.768482515238304,45.73097094887281,60.14507386114752,69.1495076006904,54.02546286625649,30.91503641717044,47.332829362949745,52.721454946376724,45.70292449896422,54.0374027813827,30.954509637395347,47.40644788187685,52.80344548729319,45.77399217529636,60.21839142087158,69.25305005468215,54.12140251394353,30.978547274226926,47.44325714135536,52.844440757779786,45.8095260134624,60.26513310106602,69.3067985016553,54.18252692517524,31.024475879125063,47.53034944208982,52.960104446211616,45.92596111933001,60.439577096868184,69.53186659235202,54.3583986062398,31.125131904206206,47.684485797902106,53.13176944809831,46.07475673227821,60.635304811837344,69.7569346830334,54.534270287185144,31.225787929287357,47.838622153699454,53.321504030798025,46.254877010352644,60.89283984439482,70.07676608599031,54.80270386223244,31.390014705154243,48.10633003014065,53.61965609811734,46.51330895116562,61.23278463355427,70.4676699731346,55.10816219492036,31.56483660614334,48.37403790665428,53.917808165436455,46.771740891978546,61.57272942272839,70.87982325353528,55.446829735643284,31.76816827216365,48.69995579468976,54.29699742292449,47.114462431097756,62.042029138274955,71.41947289338368,55.86852029602906,32.00951295818454,49.06953119133993,54.708601556447235,47.47123223661559,62.511328853821816,71.95912253323996,56.290210856413395,32.25644347765051,49.45621395952799,55.148784965954356,47.861031262502195,63.034937410452955,72.57371212016358,56.78022052041708,32.53688899770573,49.885665156560584,55.62707407675577,48.27560220373135,63.58026950344796,73.20079169829701,57.270230184419816,32.81733451776098,50.31511635360921,56.1053631876162,48.69017440419465,64.12560490935914,73.82787699055672,57.76024580191971,33.09778429698765,50.74457537714004,56.58366246783494,49.104754160022615,64.6709485973351,74.45496990167983,58.250265884669794,33.37823577988641,51.17403570521086,57.06196174807317,49.519333915889334,65.21629228529592,75.08206281305364,58.74028596768565,33.6586872631402,51.603496033952865,57.54026102926783,49.9339136727354,65.76163597472068,75.70915572594046,59.2303060516798,33.939138746823964,52.03295636313161,58.018560310845075,50.348493429763074,66.3069796642078,76.33624863881896,59.72032613567473,34.21959023052135,52.4624166943161,58.49685959669547,50.76307319233307,66.85232336348562,76.96334156578423,60.210346232864744,34.50004172302573,52.89187703708263,58.97515889332021,51.17765296238613,67.39766707013844,77.59043449836462,60.70036633225431,34.780493215530136,53.321337379849616,59.45345818992559,51.592232732419,67.9430107750308,78.21752742697755,61.19038642698196,35.060944704472895,53.75079771577585,59.93175747743229,52.00681249325601,68.4883544695665,78.84462034563325,61.68040651563156,35.34139619076356,54.18025804901323,60.41005676340177,52.421392254088744,69.03369816398748,79.47171326430623,62.17042660227454,35.62184767489212,54.60971837731252,60.88835604210525,52.83597200702431,69.57904184604097,80.09880616621187,62.66044667768659,35.90229915367421,55.03917869896702,61.36665531528546,53.25055175675078,70.12438552597871,80.72589906809978,63.15046675323636,36.1827506324463,55.468639020704266,61.844954116187715,53.665130687759714,70.6697275904225,81.35298949311043,63.64048440927983,36.46320044963533,55.89809637394321,62.32325008331003,54.07970757185289,71.21506750085226,81.98007806041497,64.13050109757384,36.743649989870285,56.32755372714709,62.80154605038904,54.494284455963175,71.75888235351832,82.6036592875539,64.61640675122356,37.02096239131461,56.751006135045856,63.271816612077004,54.90074571198498,72.29354685958343,83.21847216425314,65.09683102534605,37.29592193865035,57.17205656470428,63.740749606196175,55.307206968050146,72.82821136557905,83.83328504095557,65.57725529946751,37.55487947658912,57.54409867307178,64.1278101549059,55.61904780592129,73.20729468646314,84.23341379718734,65.86196250623125,37.71782495813543,57.79361997791553,64.40570744299309,55.8599233301027,73.52414553329243,84.59776186667553,66.14666971313946,37.88077043970268,58.04314128279582,64.68360473112503,56.10079885432827,58.29266258765801,64.96150201921205,56.34167437853625,74.15784722684558,85.32645800566115,66.71608412666704,38.206661402799874,58.54218389243177,65.23939930732153,56.58254990273962,74.47469807365734,85.69080607513979,67.00079133343114,38.36960688435663,58.79170519729376,65.51729659540825,56.82342542694295,74.79154892046917,86.055154144653,67.28549854019437,38.5325523659134,59.04122650217448,65.79519388354052,57.064300951173436,75.10839976731666,86.41950221414109,67.57020574695738,38.695497847470186,59.290747807018086,66.07309117165109,57.30517647537679,75.42525061412873,86.78385028363869,67.8549129538686,38.85844332902105,59.54026911189916,66.35098845976059,57.54605199958008,75.74210146095879,87.1481983531171,68.13962016063242,39.02138881058867,59.78979041678048,66.6288857478701,57.78692752378332,76.05895230768034,87.51254642261466,68.4243273673947,39.18433429213464,60.039311721643145,66.90678303600394,58.02780304800946,76.37580315451036,87.87689449211229,68.70903457415808,39.347279773691454,60.288833026414764,67.18468032409022,58.26867857218964,76.69265400132238,88.24124256160664,68.99374178107149,39.51022525524829,60.53835433127724,67.46257761222323,58.509554096415876,77.00950484815273,88.60559063110432,69.27844898783505,39.67317073680513,60.787875636159,67.74047490030934,58.7504296206238,77.32635569498328,88.96993870059225,69.56315619459703,39.83611621835093,61.03739694091025,68.01837218839529,58.99130514482689,77.64320654181401,89.33428677008013,90.06298290908214,70.41727781488432,40.32495266302646,61.785960855517274,68.85206405274874,59.71393171748314,78.59375908217642,90.42733097857001,70.70198502164676,40.48789814457716,62.035482160380056,69.12996134083433,59.954807241662515,78.91060992900744,90.7916790480578,70.98669222856358,40.6508436261453,62.2850034652626,69.40785862896794,60.19568276588927,79.22746077572536,91.15602711754559,71.2713994353255,40.81378910769091,62.53452477012569,69.68575591705336,60.43655829009718,79.54431162255632,91.5203751870434,71.55610664208719,40.97673458923644,62.784046074893936,69.96365320516288,60.67743381430013],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 114, 178, 0.2)\",\"hoverinfo\":\"skip\",\"line\":{\"width\":0},\"mode\":\"lines\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[117.59511758108488,105.9746269511468,94.55552386160615,100.8959262784946,92.0087685473862,108.1704889426326,118.1393347538625,98.11788277219358,75.90453232978668,95.18083766680414,102.07113641628378,91.17205244300233,106.2773808558168,116.3941934885524,100.28902870055133,76.83612950201052,95.02910462151875,101.877513327111,91.49226328673964,107.62584771634995,117.93307708041077,98.82797996924899,77.7328865900065,90.28628454778276,99.0141529148012,91.85277709903056,108.04486353494988,118.24678062303842,101.26320430579986,72.32178135157754,93.59634822491597,99.57390042159555,91.81507538504837,109.8753062539262,117.10465771479326,100.5100356764435,77.34077687931483,95.2944228531914,98.46905544013279,89.42375537072697,107.31450472375124,118.05767888717874,99.87850076353374,77.04050738941051,92.16351553686435,99.79913890284665,91.15243483319635,106.93693400387117,115.34369751337957,99.70295025420681,75.29385093354138,90.96079451015504,99.98844600677697,92.3728177817775,105.52120814069856,117.95145429586559,102.83034474715406,77.64104663830415,92.8970635380991,98.34638878218205,90.52262934148345,103.72795579994936,116.9477643383998,98.5089556911876,78.51022508216556,94.3325474931469,99.34275931852827,90.50250055001194,106.08427140135638,115.29769467991227,99.88088573263273,77.37060877599964,92.63251874129335,100.11410294654856,91.37830701798141,104.53332870571262,115.85593526002407,99.2360495223126,74.94243105912535,92.96499557234421,97.36916884545738,90.91745058690726,73.05594522982645,91.57806387791305,98.1435697139076,90.7216324527977,107.46104621319107,118.31621806747683,99.62386075331813,76.6957577955189,91.48562393066784,99.26713806638283,92.74386739794322,102.76966385941961,113.14821364742085,100.50994354122697,73.71177112870386,92.84938425545751,95.78166059439152,87.1784035000082,101.46848653510237,114.32470416862868,98.65818240793854,72.3076055790662,94.36562589626226,96.17898515395234,92.6084600333812,105.9129742706152,116.60094743160714,100.02165180147712,72.86424000457288,92.94421053262354,97.27478654151741,93.22687760264401,107.68936099257107,112.23694408974322,101.26519659522722,75.30221043756241,92.09615090983408,99.86663920223246,91.97143114645525,110.0257595524737,117.09562755931933,98.63815129107653,73.46186304504185,91.59863586704935,95.17820817868851,91.31607451878057,103.8809060466526,112.93016565147708,99.3440007054326,71.58163972620076,93.94978556946938,99.16357953767894,87.1944556189446,105.32020763680556,114.73847675859167,100.81569371679797,78.15347971451965,92.22283035104824,97.67117465594036,95.13385998699987,104.49490900275875,112.56843865851799,99.2251366612309,71.00887350950636,90.74875415166716,96.4196787654178,93.20094833341115,101.35601538546253,112.24368338380864,96.18511440670152,75.46292426816719,94.0548250850769,96.13825019305688,89.0115969073166,108.40686506358207,115.09029536389521,100.49531911525486,76.56717953777515,89.39206868230686,95.96096031974545,89.54526731810671,104.64528035645971,115.19638856749356,96.25902349377895,75.52715038558368,93.19359847239465,97.99583487851878,93.50286188051399,106.30327637727164,112.0849762997713,96.94651880035218,75.54414646172813,90.16719637935626,94.62301794503138,90.7847672443552,102.30609607933265,114.78176311365047,97.50601165089488,77.89295934558776,91.19198138831521,96.28320670475738,89.0245707090413,103.47838029169989,115.21870798812655,96.57877978800441,73.61989610071923,88.64413220317184,96.98804651467533,87.37142735253354,103.16389132237107,115.22661067366764,98.79383558087456,76.97130412070882,89.82686360710264,96.67530218122597,90.5869348439911,102.60880387608614,115.06084292319038,98.48392914775928,73.61242885359177,90.87732839345276,93.60499245477507,93.98159902153338,108.03648722919479,108.69457717910518,98.83300313513578,75.35544544308367,88.30388698674024,95.2256606093154,86.74303982332704,105.42199841763068,114.1053088479133,97.37391175840905,73.01991812160993,89.01121192685221,96.14384860212115,87.8061563079859,94.91613178582975,76.06497306493505,90.5203624156669,97.30940901611223,88.58362069852897,100.75633789079974,110.204993105538,99.9998738760268,74.67929892294651,92.7938751062798,93.81429824693575,88.55673257005951,104.8340407713931,116.04728582291843,100.24382026684677,74.50824814734499,90.29261471190783,97.37694505042153,87.30287870801821,100.96659380874759,112.97143726157805,99.00028861059769,77.58229901842898,88.41305586955635,96.01106264907352,88.23383375633982,103.45075241870487,112.92410666519892,98.04512181305718,73.87889346180246,86.99957090606136,97.59860354352952,89.59289251679405,104.58971516955089,112.358865069643,96.93964026844625,72.71386698058657,90.54959400411109,94.97813576579874,92.748052066832,101.96263804926843,111.64189791475327,97.75856543983718,73.34613646164819,92.54974553489745,96.4124221183266,89.54084840031747,102.88618037558706,112.62111544472904,101.21971752395964,74.75967000927979,93.58396797412698,96.1805147107474,88.65388638232123,107.21000471197583,111.57762951283557,97.57410349533117,74.15410175371136,90.92224325025985,96.87718266626678,90.109238382165,102.57050167900012,114.64641629067714,101.41086222413821,76.5616827905204,92.7805551006939,96.62001679396181,91.43959711912922,106.05506246330835,114.2998345709404,100.31749279649742,74.06768638998032,94.5993650579177,97.19981691311318,91.89488255789793,102.82587851600736,119.39662217935377,104.73118922331388,74.3480359247425,92.03324201864544,101.43662175820296,88.55235651144646,109.12356983255741,118.51178612742382,98.86163610771628,76.00834706898372,96.51927697481611,100.30660894873917,93.95947272480633,108.73648234047184,120.57231436692281,104.42217102609861,80.36553317990344,91.58213405909805,103.57394027781235,95.75698123036034,109.61282469830705,119.65803340763146,103.0852424940347,75.19732006569663,98.1609168743171,102.06124471488133,91.08834848032235,108.503580878962,119.64149481425022,103.42460148811985,78.62204854252418,95.10775905740863,100.89369148569739,92.3682767926715,108.94166584537845,123.2052076507243,100.95691252148468,77.97776719086174,94.79278990812378,101.7041668340353,95.94184000421961,109.27443418345922,122.3471435544163,104.14670199707741,78.7057059711531,94.77949954388801,101.19268637194727,92.8671127537268,110.21515890802746,123.15585920020945,101.305664390853,77.61287491130457,97.24025759193283,102.10355399760219,93.11167609786202,111.42575328060774,117.58491356003513,104.63060579243684,79.9442681106971,97.52377489947618,105.23570725637218,98.99645234771734,112.26480297850388,121.65776357369657,105.39906071285448,78.04489843450921,92.73949015599747,105.9108698982097,98.18791834912184,115.51311233835642,120.03170518658516,101.39584840914695,78.15553378920636,95.09189740652917,101.79333701333265,90.56766109212214,112.2685623495765,125.43671865895594,106.28206678857022,76.75847768973833,98.6924352077506,105.47281001362455,94.99823017123812,113.92920206186986,124.34476930474537,105.9257627174144,81.82736980777746,99.72419799709647,105.34590682785287,96.77324473425492,113.88529508870609,125.91929105242572,110.09591618935075,84.0145123800569,100.38065011657567,108.54894383433216,96.26872488328542,117.25436380661186,126.32234691256642,103.93853061912347,77.88600637464769,96.11240478259951,104.94629667556038,101.45055657679627,113.78594702796889,122.93653983141046,108.04979937209045,77.03888056190817,99.00077267694992,103.92879094057575,100.74992324029398,114.75092615024973,122.68213092760112,105.399470228526,83.04905287599026,100.10479291872119,106.74448792945236,98.64638447020012,113.98861384997036,126.71154083946176,107.41662931560805,82.94325816544081,100.64374454681132,104.73882351275688,98.4244235942274,115.66229814302882,125.1850523991651,108.97844547900321,79.93599366730047,99.15013138968311,109.0690669547259,103.37358422323796,114.65688085742292,126.19977954740406,108.71128619238944,78.13829636152096,100.17196463477417,109.19925944049784,98.80963458896304,100.2763076396438,106.82266621400862,98.84670591804361,115.95180453783428,124.67204890157497,107.68683431898292,84.83670460564291,107.00376895961543,107.91511711658009,102.54304853258088,114.58016731649982,131.21408254563946,111.78794682625082,80.10277006073743,101.99644494330481,111.42437864804762,101.76262672857311,118.40683735937813,129.68146791274836,111.3080143507983,80.42967451921095,99.25478171440288,107.31944384072379,101.43865237018726,119.90637166163442,126.88941300411581,111.9403907173148,80.01832709109198,101.45926786975464,110.09666609577636,98.25923988663524,120.10941530371292,131.09805331510358,107.2776975709044,79.67627074942102,101.18746658184651,110.11743568202662,96.69232933968539,117.05204058230467,132.14969698930017,110.8685707012683,82.34498013121977,101.35061252606201,108.4073913443944,101.99578925984822,125.16042785020879,134.1611592511561,110.75706481415872,84.14512137135146,106.64873164506365,109.41443973193337,99.79739960386277,122.86115079494806,132.61207092276823,112.31442559454295,83.02955173018123,103.52361444323695,112.04880699544121,101.64012082776073,123.7504681660161,129.93442525977076,113.15041669036475,83.35630159123748,99.88595946094122,109.89368088907518,106.72198318713606,122.43421682277315,133.37837841077067,115.59968992232893,81.81643906674488,106.07953072837678,111.33102645256238,103.13194928673188,119.80601764965483,127.32940229535164,113.53342621270804,82.36460088441959,104.79352219696715,112.07857714592538,103.32023358559458,119.95172214822895,133.0810011425971,134.77934321780697,115.73151525838503,83.08574789792372,104.60206802295197,107.64567508325806,105.63658417436793,125.77032805083044,132.21729208131802,112.8933895696864,83.93377468903688,104.23981374858487,113.32355658577404,105.48495449457322,121.71610510794454,135.00613330719045,116.6239778700557,84.39444962915572,107.65333649644417,114.60524143268469,102.08655230305027,126.07787413623204,135.4335667346462,114.71861072247019,84.82145063778997,108.3832047654239,110.79484129097891,103.99707370682005,122.57297048524141,140.0382478359965,113.10230750914496,82.9971762630671,103.96258862039491,113.2054300744719,103.89409572593868],\"type\":\"scatter\"}],                        {\"height\":600,\"showlegend\":false,\"width\":900,\"xaxis\":{\"rangeselector\":{\"buttons\":[{\"count\":7,\"label\":\"1w\",\"step\":\"day\",\"stepmode\":\"backward\"},{\"count\":1,\"label\":\"1m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":6,\"label\":\"6m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":1,\"label\":\"1y\",\"step\":\"year\",\"stepmode\":\"backward\"},{\"step\":\"all\"}]},\"rangeslider\":{\"visible\":true},\"title\":{\"text\":\"Date\"},\"type\":\"date\"},\"yaxis\":{\"title\":{\"text\":\"Quantit\\u00e0\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Vendita Burger\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('35e3b9df-5c11-4309-b50f-9453bf6e6423');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Grafico su plotly\n",
        "from prophet.plot import plot_plotly\n",
        "from datetime import datetime\n",
        "\n",
        "fig = plot_plotly(model, forecast)\n",
        "\n",
        "fig.update_layout(yaxis_title = 'QuantitÃ ',\n",
        "                  xaxis_title = 'Date',\n",
        "                  title = 'Vendita Burger'\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "oCydDlxJIodN",
        "outputId": "fce77d6e-dc80-4a23-d67b-47447036fd42"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 648x432 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Stampo componenti\n",
        "model.plot_components(forecast);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "HHC_y6b2JGsw",
        "outputId": "63d9edd6-dd3d-415b-8644-31e9a63d0f09"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3cfe8d61-c3cd-409e-9ec3-0d040f3b12c1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ds</th>\n",
              "      <th>yhat</th>\n",
              "      <th>yhat_lower</th>\n",
              "      <th>yhat_upper</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>515</th>\n",
              "      <td>2022-11-05</td>\n",
              "      <td>89.334287</td>\n",
              "      <td>46.513768</td>\n",
              "      <td>133.081001</td>\n",
              "      <td>65.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>516</th>\n",
              "      <td>2022-11-19</td>\n",
              "      <td>90.062983</td>\n",
              "      <td>47.156178</td>\n",
              "      <td>134.779343</td>\n",
              "      <td>62.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>517</th>\n",
              "      <td>2022-11-20</td>\n",
              "      <td>70.417278</td>\n",
              "      <td>24.361130</td>\n",
              "      <td>115.731515</td>\n",
              "      <td>46.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>518</th>\n",
              "      <td>2022-11-21</td>\n",
              "      <td>40.324953</td>\n",
              "      <td>-1.780267</td>\n",
              "      <td>83.085748</td>\n",
              "      <td>27.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>519</th>\n",
              "      <td>2022-11-22</td>\n",
              "      <td>61.785961</td>\n",
              "      <td>19.158010</td>\n",
              "      <td>104.602068</td>\n",
              "      <td>16.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cfe8d61-c3cd-409e-9ec3-0d040f3b12c1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3cfe8d61-c3cd-409e-9ec3-0d040f3b12c1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3cfe8d61-c3cd-409e-9ec3-0d040f3b12c1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            ds       yhat  yhat_lower  yhat_upper      y\n",
              "515 2022-11-05  89.334287   46.513768  133.081001  65.09\n",
              "516 2022-11-19  90.062983   47.156178  134.779343  62.20\n",
              "517 2022-11-20  70.417278   24.361130  115.731515  46.24\n",
              "518 2022-11-21  40.324953   -1.780267   83.085748  27.00\n",
              "519 2022-11-22  61.785961   19.158010  104.602068  16.00"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Unisco dataset\n",
        "df_merge = pd.merge(df_burger, forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']], on = 'ds')\n",
        "\n",
        "# Tengo solo le variabili che mi interessano\n",
        "df_merge = df_merge[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'y']]\n",
        "df_merge.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zc7U9LrqatPV",
        "outputId": "d5d59896-409e-4bf3-c386-6c3ab7c77143"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "MAE:  17.03833717710181\n",
            "MSE:  488.42672631144944\n",
            "MAPE:  0.48455185022644076\n"
          ]
        }
      ],
      "source": [
        "# Calcolo gl indici per vedere errori\n",
        "y_true = df_merge['y'].values\n",
        "y_pred = df_merge['yhat'].values\n",
        "\n",
        "mae = mean_absolute_error(y_true, y_pred)\n",
        "print('MAE: ', mae)\n",
        "\n",
        "mse = mean_squared_error(y_true, y_pred)\n",
        "print('MSE: ', mse)\n",
        "\n",
        "mape = mean_absolute_percentage_error(y_true, y_pred)\n",
        "print('MAPE: ', mape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "5f73f2ca477740368bce6b1a1f84aa0a",
            "2f80c3d7ffa34966a78334d8e5c1c640",
            "0bde97b031224aa8aa3073b67d71f992",
            "71fc5d0a5b794803a1ddffbe8dc78343",
            "b3643947ab8f43f28164954558629f56",
            "be01eecb3cf44ae5a386c3aecdbafcd8",
            "24cd3d5a26e4410a8fbb8936cf2d63f0",
            "384e162cff9b40a2b93ae7b5399d1059",
            "b1424e2cada644d09ae8d320ddf4dde2",
            "a54ff83ded0f4401bd977929f87befc8",
            "00577790f1554400baa4786eb929df0e"
          ]
        },
        "id": "v8zw57uttNDD",
        "outputId": "b8f63fbd-4341-457d-af08-b5ec3ffc9f22"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "5f73f2ca477740368bce6b1a1f84aa0a",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n_s4ld8b.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0ki2zsly.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65124', 'data', 'file=/tmp/tmpoat8y4sf/n_s4ld8b.json', 'init=/tmp/tmpoat8y4sf/0ki2zsly.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0wsl_nas/prophet_model-20221204100748.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ptdqf4y5.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/087p1d1k.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14063', 'data', 'file=/tmp/tmpoat8y4sf/ptdqf4y5.json', 'init=/tmp/tmpoat8y4sf/087p1d1k.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model51626r3f/prophet_model-20221204100750.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/egpqrojq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7yp28v3s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31568', 'data', 'file=/tmp/tmpoat8y4sf/egpqrojq.json', 'init=/tmp/tmpoat8y4sf/7yp28v3s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5g7qf9an/prophet_model-20221204100751.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4y__um1e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vr_d3qsx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75151', 'data', 'file=/tmp/tmpoat8y4sf/4y__um1e.json', 'init=/tmp/tmpoat8y4sf/vr_d3qsx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxv6usc1y/prophet_model-20221204100752.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6ncyx4jo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d1gmcqqj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42291', 'data', 'file=/tmp/tmpoat8y4sf/6ncyx4jo.json', 'init=/tmp/tmpoat8y4sf/d1gmcqqj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model29_0jy7v/prophet_model-20221204100754.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/laqs16ki.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/itqw9dl0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10713', 'data', 'file=/tmp/tmpoat8y4sf/laqs16ki.json', 'init=/tmp/tmpoat8y4sf/itqw9dl0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfqg_stoa/prophet_model-20221204100755.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wi9exr7g.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xij6shfv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55837', 'data', 'file=/tmp/tmpoat8y4sf/wi9exr7g.json', 'init=/tmp/tmpoat8y4sf/xij6shfv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model906s5ed3/prophet_model-20221204100757.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7jt1v2s7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lia3swpt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51441', 'data', 'file=/tmp/tmpoat8y4sf/7jt1v2s7.json', 'init=/tmp/tmpoat8y4sf/lia3swpt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzfwgnut0/prophet_model-20221204100758.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/re6xdoop.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rbph3x0z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37506', 'data', 'file=/tmp/tmpoat8y4sf/re6xdoop.json', 'init=/tmp/tmpoat8y4sf/rbph3x0z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellz9x65la/prophet_model-20221204100759.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ydphfq11.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nylx7yhs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29303', 'data', 'file=/tmp/tmpoat8y4sf/ydphfq11.json', 'init=/tmp/tmpoat8y4sf/nylx7yhs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellhi2b1_j/prophet_model-20221204100801.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nqty5kdm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_i10ttws.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92394', 'data', 'file=/tmp/tmpoat8y4sf/nqty5kdm.json', 'init=/tmp/tmpoat8y4sf/_i10ttws.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvdbi_gvt/prophet_model-20221204100802.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ct98dm31.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2ffg5xtl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70569', 'data', 'file=/tmp/tmpoat8y4sf/ct98dm31.json', 'init=/tmp/tmpoat8y4sf/2ffg5xtl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxqei_9x4/prophet_model-20221204100804.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2s8cvzqn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/11zcoowe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=60875', 'data', 'file=/tmp/tmpoat8y4sf/2s8cvzqn.json', 'init=/tmp/tmpoat8y4sf/11zcoowe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modele727hw64/prophet_model-20221204100805.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9xc64023.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hgl2vd0i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20550', 'data', 'file=/tmp/tmpoat8y4sf/9xc64023.json', 'init=/tmp/tmpoat8y4sf/hgl2vd0i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellxd5sc26/prophet_model-20221204100806.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5fkz9ux6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dva162gc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10270', 'data', 'file=/tmp/tmpoat8y4sf/5fkz9ux6.json', 'init=/tmp/tmpoat8y4sf/dva162gc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0jqkltni/prophet_model-20221204100806.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/99h5rfny.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/veuh1sl2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=60804', 'data', 'file=/tmp/tmpoat8y4sf/99h5rfny.json', 'init=/tmp/tmpoat8y4sf/veuh1sl2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliy8irk2z/prophet_model-20221204100807.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bfvbai4l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g4szftdf.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49432', 'data', 'file=/tmp/tmpoat8y4sf/bfvbai4l.json', 'init=/tmp/tmpoat8y4sf/g4szftdf.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwwqlleyl/prophet_model-20221204100808.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xyqbbgyc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/th8p7ief.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68718', 'data', 'file=/tmp/tmpoat8y4sf/xyqbbgyc.json', 'init=/tmp/tmpoat8y4sf/th8p7ief.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model191sbs7q/prophet_model-20221204100808.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u8jn7jld.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/83qfltg8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47960', 'data', 'file=/tmp/tmpoat8y4sf/u8jn7jld.json', 'init=/tmp/tmpoat8y4sf/83qfltg8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model79r5r1dp/prophet_model-20221204100809.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ecbfgwgo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yce_fc5x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18180', 'data', 'file=/tmp/tmpoat8y4sf/ecbfgwgo.json', 'init=/tmp/tmpoat8y4sf/yce_fc5x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9pc12zyr/prophet_model-20221204100810.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/teuhm3qk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/npnxgunc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19356', 'data', 'file=/tmp/tmpoat8y4sf/teuhm3qk.json', 'init=/tmp/tmpoat8y4sf/npnxgunc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelg6jfypjh/prophet_model-20221204100810.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5hwaxiwm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qpnec_ae.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25065', 'data', 'file=/tmp/tmpoat8y4sf/5hwaxiwm.json', 'init=/tmp/tmpoat8y4sf/qpnec_ae.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela5bjklk5/prophet_model-20221204100811.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m2bg405p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kwmvv91i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70714', 'data', 'file=/tmp/tmpoat8y4sf/m2bg405p.json', 'init=/tmp/tmpoat8y4sf/kwmvv91i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrmkeowpq/prophet_model-20221204100812.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/04btz7x6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rajcc10e.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97163', 'data', 'file=/tmp/tmpoat8y4sf/04btz7x6.json', 'init=/tmp/tmpoat8y4sf/rajcc10e.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsn9t91tl/prophet_model-20221204100812.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q11mcahz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/acsg9u23.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27404', 'data', 'file=/tmp/tmpoat8y4sf/q11mcahz.json', 'init=/tmp/tmpoat8y4sf/acsg9u23.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model88hf2a39/prophet_model-20221204100813.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rl3tchc6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dcozdsso.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80521', 'data', 'file=/tmp/tmpoat8y4sf/rl3tchc6.json', 'init=/tmp/tmpoat8y4sf/dcozdsso.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_kwm95id/prophet_model-20221204100814.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n"
          ]
        }
      ],
      "source": [
        "# Cross validation\n",
        "from prophet.diagnostics import cross_validation\n",
        "\n",
        "df_cv = cross_validation(model,\n",
        "                         horizon = \"30 days\",\n",
        "                         period = \"15 days\",\n",
        "                         initial = \"150 days\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "L9PbeTAwuAcN",
        "outputId": "3708495d-4d9e-4801-83e5-78ab0b2521e6"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-3e4b8b15-03a2-4434-8de9-37a511e32d02\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>horizon</th>\n",
              "      <th>mse</th>\n",
              "      <th>rmse</th>\n",
              "      <th>mae</th>\n",
              "      <th>mape</th>\n",
              "      <th>mdape</th>\n",
              "      <th>smape</th>\n",
              "      <th>coverage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3 days</td>\n",
              "      <td>591.022877</td>\n",
              "      <td>24.310962</td>\n",
              "      <td>18.672757</td>\n",
              "      <td>0.390266</td>\n",
              "      <td>0.284327</td>\n",
              "      <td>0.329276</td>\n",
              "      <td>0.839831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4 days</td>\n",
              "      <td>697.566465</td>\n",
              "      <td>26.411484</td>\n",
              "      <td>20.449872</td>\n",
              "      <td>0.482536</td>\n",
              "      <td>0.299693</td>\n",
              "      <td>0.370234</td>\n",
              "      <td>0.812434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5 days</td>\n",
              "      <td>747.072365</td>\n",
              "      <td>27.332625</td>\n",
              "      <td>20.623479</td>\n",
              "      <td>0.556847</td>\n",
              "      <td>0.295036</td>\n",
              "      <td>0.385821</td>\n",
              "      <td>0.794521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6 days</td>\n",
              "      <td>686.415514</td>\n",
              "      <td>26.199533</td>\n",
              "      <td>19.648433</td>\n",
              "      <td>0.530721</td>\n",
              "      <td>0.261808</td>\n",
              "      <td>0.369838</td>\n",
              "      <td>0.808219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7 days</td>\n",
              "      <td>646.519038</td>\n",
              "      <td>25.426739</td>\n",
              "      <td>18.896003</td>\n",
              "      <td>0.433897</td>\n",
              "      <td>0.231507</td>\n",
              "      <td>0.329763</td>\n",
              "      <td>0.838470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8 days</td>\n",
              "      <td>520.269924</td>\n",
              "      <td>22.809426</td>\n",
              "      <td>17.212313</td>\n",
              "      <td>0.346301</td>\n",
              "      <td>0.217876</td>\n",
              "      <td>0.289590</td>\n",
              "      <td>0.882192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>9 days</td>\n",
              "      <td>518.255025</td>\n",
              "      <td>22.765215</td>\n",
              "      <td>16.498794</td>\n",
              "      <td>0.325647</td>\n",
              "      <td>0.212384</td>\n",
              "      <td>0.273297</td>\n",
              "      <td>0.892603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>10 days</td>\n",
              "      <td>591.525343</td>\n",
              "      <td>24.321294</td>\n",
              "      <td>17.545914</td>\n",
              "      <td>0.409865</td>\n",
              "      <td>0.212384</td>\n",
              "      <td>0.304064</td>\n",
              "      <td>0.851507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>11 days</td>\n",
              "      <td>709.209017</td>\n",
              "      <td>26.630979</td>\n",
              "      <td>20.114165</td>\n",
              "      <td>0.482605</td>\n",
              "      <td>0.241180</td>\n",
              "      <td>0.355620</td>\n",
              "      <td>0.826301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>12 days</td>\n",
              "      <td>762.792633</td>\n",
              "      <td>27.618701</td>\n",
              "      <td>21.348755</td>\n",
              "      <td>0.542134</td>\n",
              "      <td>0.270306</td>\n",
              "      <td>0.389124</td>\n",
              "      <td>0.813699</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e4b8b15-03a2-4434-8de9-37a511e32d02')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e4b8b15-03a2-4434-8de9-37a511e32d02 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e4b8b15-03a2-4434-8de9-37a511e32d02');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "  horizon         mse       rmse        mae      mape     mdape     smape  \\\n",
              "0  3 days  591.022877  24.310962  18.672757  0.390266  0.284327  0.329276   \n",
              "1  4 days  697.566465  26.411484  20.449872  0.482536  0.299693  0.370234   \n",
              "2  5 days  747.072365  27.332625  20.623479  0.556847  0.295036  0.385821   \n",
              "3  6 days  686.415514  26.199533  19.648433  0.530721  0.261808  0.369838   \n",
              "4  7 days  646.519038  25.426739  18.896003  0.433897  0.231507  0.329763   \n",
              "5  8 days  520.269924  22.809426  17.212313  0.346301  0.217876  0.289590   \n",
              "6  9 days  518.255025  22.765215  16.498794  0.325647  0.212384  0.273297   \n",
              "7 10 days  591.525343  24.321294  17.545914  0.409865  0.212384  0.304064   \n",
              "8 11 days  709.209017  26.630979  20.114165  0.482605  0.241180  0.355620   \n",
              "9 12 days  762.792633  27.618701  21.348755  0.542134  0.270306  0.389124   \n",
              "\n",
              "   coverage  \n",
              "0  0.839831  \n",
              "1  0.812434  \n",
              "2  0.794521  \n",
              "3  0.808219  \n",
              "4  0.838470  \n",
              "5  0.882192  \n",
              "6  0.892603  \n",
              "7  0.851507  \n",
              "8  0.826301  \n",
              "9  0.813699  "
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from prophet.diagnostics import performance_metrics\n",
        "\n",
        "df_performance = performance_metrics(df_cv)\n",
        "df_performance.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "WSr0MhJFuYNe",
        "outputId": "62eb21c3-31f1-43e6-9016-b3bb795cee76"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/prophet/plot.py:544: FutureWarning:\n",
            "\n",
            "casting timedelta64[ns] values to int64 with .astype(...) is deprecated and will raise in a future version. Use .view(...) instead.\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/prophet/plot.py:545: FutureWarning:\n",
            "\n",
            "casting timedelta64[ns] values to int64 with .astype(...) is deprecated and will raise in a future version. Use .view(...) instead.\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/prophet/plot.py:544: FutureWarning:\n",
            "\n",
            "casting timedelta64[ns] values to int64 with .astype(...) is deprecated and will raise in a future version. Use .view(...) instead.\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/prophet/plot.py:545: FutureWarning:\n",
            "\n",
            "casting timedelta64[ns] values to int64 with .astype(...) is deprecated and will raise in a future version. Use .view(...) instead.\n",
            "\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from prophet.plot import plot_cross_validation_metric\n",
        "\n",
        "fig = plot_cross_validation_metric(df_cv, metric='rmse')\n",
        "\n",
        "fig = plot_cross_validation_metric(df_cv, metric='mape')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ASe6iBJut1w",
        "outputId": "48683bde-c484-4c78-947e-4bb2a4fc10c5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "horizon     16 days 12:00:00\n",
              "mse               811.447429\n",
              "rmse               28.313175\n",
              "mae                21.255944\n",
              "mape                0.558372\n",
              "mdape               0.289234\n",
              "smape               0.374369\n",
              "coverage            0.799966\n",
              "dtype: object"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_performance.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SQs5yLAZu_XC"
      },
      "outputs": [],
      "source": [
        "# GridSearch\n",
        "import itertools\n",
        "\n",
        "param_grid = { 'changepoint_prior_scale':[0.001, 0.01, 0.1, 0.5],\n",
        "              'seasonality_prior_scale':[0.01, 0.1, 1.0, 10.0], }\n",
        "\n",
        "# Genero tutte le combinazioni dei parametri\n",
        "all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\n",
        "rmses = []  # Store the RMSEs for each params here"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "1289879d59a449769cfdc58cdb29479d",
            "d54cff3c92cc47d49075c0e07f9c24c2",
            "fecb328da56f4fa2aee166e9f1c24965",
            "2a35acec239047b3a5a97bdff86dbd5e",
            "b44781c769cf4f88be1e5b854d4f3ebe",
            "10d58ba54f96402db7be31da320a8c71",
            "ac192278cf3b492fae055c3d91aac495",
            "ca91b7077429478fb04ca908db053adc",
            "7dd698405df544a1beb6830cdfc8c120",
            "a7db999e623c424fb129f1a548d8e8e5",
            "b24519b8b0c04dfca1c1a8ff0375a2a1",
            "67083fb32a584418b57b3016b0feb64e",
            "8f2fff0f6f7e42edb189c02dd8962147",
            "50c44cb9a1bf455db9b3cb0d27ddabf0",
            "793fcc4298a3468d8388f0fd9be9cfc1",
            "8957ba2f398a4159babcc3d55e2cec92",
            "998481c2103546859d2a008d1e51d572",
            "a77b10ac70774750a3419aa481a93b13",
            "9134bb8cc4c24e418531a5449fcd9c01",
            "93ee66045f614e56b1596c3457ec3d7a",
            "abe0da8fefdc443cb9d3591fa6530ba2",
            "d50302d4870244b0ae56e9d8dc7e2caf",
            "a9570bca0de34eca9eb1ee8bba67cbbb",
            "e1bc3a6283094c16a5354b30c6c88939",
            "4a9128a24290497baba0a9dd69a00b11",
            "2092f8c5b3c24f15bfb83e29db2a11bf",
            "f197a097b8fd4a148d59a0eee395e0c7",
            "678a4d4fb25646348efd35134880e649",
            "e02237ce6db94f07a65d4838cdfe2963",
            "fbd4c5ce3197404291c3e90a1a82de12",
            "b9ec099d4b6942b4888e649f8a3aa1b1",
            "cae1725b301d4b4eba2a486ac110b8dd",
            "eb9e901d604443fd860e6947d0dab4c4",
            "bf859654aa69416e802406e0f9beeec2",
            "7bb89c010cb24c0f8bef7347b303b1b5",
            "57328abadb6a48108824f0c2ae852ad4",
            "d71b3c787ea74773a6931e9ec5fe6ff2",
            "b1c2189a0eee4b77b3346e5fa996f949",
            "b5db22e396a24aea90988c05c29ed975",
            "890d7d8f4a174e3e95490c2272ec6ede",
            "2315c2f7fa254d2196154100f573a6c6",
            "a72f9fe7f66443b6afe99b4375276a05",
            "c15afebb137f439e96acfff7256262ef",
            "825642a934dd49788b7b4916381c7586",
            "0491709c4a074c0492ca2b87d5e5b9c7",
            "f490ac84ef534391aff37fcf9dcadffc",
            "43e97b68277b4375a56ed4c9f7ff320e",
            "f083f92e059f444784c39bb2920ef428",
            "88c809ca93bd4083bdafc9c06513fa6c",
            "e9c38750112f405486a7ebc7530868c6",
            "ae11956b3c2c42ce823f26844224ca8c",
            "90ede8eced9742fdac79fc1f0450b2a0",
            "e171d32ddb134d63a4873f63636eb4f1",
            "1e12056ee5d240da87459fe8b2432f40",
            "10cd8dff59864385b5e4a85c00d05e78",
            "0d0b6e271c1546b1883f0595fe1a7960",
            "bf8868af998c4e11b4a574480271977d",
            "250293c97fef4a2985a3c7d3889cb74e",
            "201b72dd50e94c6a93034d5c6cfbbde4",
            "ce24f97a1c1f4c73af96123f980975a6",
            "ac7343a1259745d1a9ffdd6a3ae000de",
            "0b3b94a48a9640c39eba002e8ebb09fb",
            "0f5e8d91a9ce41fc831e1f064852c60c",
            "1c3ca86467e74d8fbf18d4daf7567f30",
            "4a552f6a92b1444681a59d69b2ae5acb",
            "d7871c9b5bb8428e8ce62bb450aedf8b",
            "b2c399782be0484884edf9f1d742e535",
            "9f38e8f5afed451d8d8abbe30c261d3d",
            "e62af28f15dd46b5a183bef741b2643e",
            "da36832f6c6745d4866dc8bd06085bea",
            "1a49fac56c484ee6b53507cd59ffd103",
            "223901b3ecb4438f9f65d48a407f2f81",
            "f2752dcaac354f5fafa68514b663ac9a",
            "aa09eba3c47b4234b3dd07df221ff69a",
            "2255145d64734873afc9a6912970ad5e",
            "3bcb58a4cb4c4009834ecb1ec52e8116",
            "5169a9715dab4e419c1e3da76daf50f5",
            "797236a6623c4e59a8e48a6300d633af",
            "8b5b99662b834da981d2795331060b83",
            "26d4bf62d96f4c50a9815cf96279b00f",
            "564f6c98c1c8461d8beebf68fce36404",
            "49cd5aed9c4047fdb824edd022fb2c72",
            "f940c937e370471a85698d4d91dc749f",
            "fc91b6ab98d946868b12f3c2569562ba",
            "da2663a5261240f281b0d8ff6773573e",
            "74827c7a41bd478798ac5c681e6dae68",
            "1208c7fd06d243da93c6add9a2d43900",
            "113b321bcacb4b07a0eb67f5ed52ebe4",
            "1dfa011f57e344c1b06d26e98f21655d",
            "90706474d0fc4d3d8ffd63607ef691bb",
            "02e989694d1b4381a563d8e7869c1ce1",
            "9944b4f7de494da0860bdcd76056d53d",
            "dc5c1d0ffc2d4dd790c4e7f3e72e4e3d",
            "cac0bce5c07945449f59ee13ea533606",
            "9371cbecc9e24fd0ba056a8982918f4d",
            "41fe9df8e6604afda937319be4ec2444",
            "ced0349faa9a464b92069f932e31fdf2",
            "5f6802f38fc94223903f103fcc34c8c0",
            "d3d83870bd8f42f8a1386bdfe314e082",
            "90ba6705901d49f9a753c1084433a71b",
            "be05229af4b34fdb9bf3c0c2023f5f3b",
            "462bc4e3dce648d2b8766cfa4dead886",
            "cd42dcc5c3e24d64a76b9d4aedf45cdf",
            "a2bc695e013740fbaea888ee44998daf",
            "c0cf6fafc3b34a8c9b4288432cce76cd",
            "d962b6bbde8542afbc4cfc2db0299361",
            "ff8234e125874485996eb96d780fa1c6",
            "a5afa7c823314ac88fde18c639f2bef1",
            "28104bf1e7c34229b5d6aa63df65fe6a",
            "48c068f0590f4175ba97a016e36806de",
            "0671b98281bc4f00bcc92dd5b02b0a37",
            "f6d2222fce4a4ffb95c72359d1957aa1",
            "ebf0bf235aaa4d32996f57210fa87aa8",
            "77adf870ba274266a864db81897b4441",
            "20e209426d76480bb3906fb4bb1c1456",
            "5ed349e615564cd48719031e585d7781",
            "7ed69a987e9948709ac048ea29b852c4",
            "17f67ee153dc48f18d9e92512413d39f",
            "ca47fb76a84144c7bf1cba82a8fe94f3",
            "b6d6145b612a4087b67685be412b35c2",
            "a83aa86d4fda47b58dea0582e6c1fc31",
            "60708e0d38184a428bd875d51d5511a8",
            "fbab70642e2444e5abad84742d72d2b0",
            "4f2fc73c97004020ae8390fb89165b79",
            "de7b2caac8d74277a4c4eb5a028c4074",
            "7f079821b70a40bbbbdb35598491fbb9",
            "7a5b86cd2a91485985a0bdfaf14684aa",
            "929d9264dfef4a0991b2ff3344936791",
            "cd2e2148528448e4a8fdd5a2117327d0",
            "9f6db232b3db4e6ab123ba0194bba8e8",
            "e9c9a3edaf5242d097528d76b40a5852",
            "f519155251ee493fa6ea657772621ea2",
            "eacf15826a464c0391a6b3fbb2ea7c22",
            "29a58ecc40364e5cb0207f7ba1fe5317",
            "8e2081a8b7ab465ba5631e6095ca5a4f",
            "479837382fed49faa021030a0ca41d7b",
            "169c17fbb1cf4c9b8e0bafcf542cb126",
            "f13f2d7cde12456bb9ff9b658fff0d3e",
            "9c4a718559c549a59492b4140c9e98ef",
            "b3c3fdaef52543689150282b1950b851",
            "01a9e83170f34645a32f3300097801c4",
            "2583fb152066425d80de4056bce98074",
            "6f416731283b482c9107b35592dfaba6",
            "afc34571f3bf4ecba001b31d0bd8e82b",
            "3a2954d11ca24a2e91b1b3138ebc3df9",
            "0d1f5b590a044c688b3be6d9ecf30117",
            "04c50686bdb04dfa914d4be515b9a1da",
            "6ef1c263e9f6481ea76316d35129e806",
            "fbd2cb1237fc497791af7b5677f2223b",
            "1a334dc355b840d2bdcf5f990e53dc14",
            "c910c2f951c046c39b0ed8173ad76807",
            "8a7a471c2cb743c180905275e3b745bb",
            "96e62d07f8de439d927d79f2e597a5c5",
            "76a8d60a71f74135ac3be8f23fd78205",
            "208a269fa0ef40c5a82a1696e1fa5d0f",
            "98f3a83c89974b03ad17afd3613b4c0e",
            "3c21d28c1d5c437ba6c92fc1f8401b0b",
            "230242e99d28488081fbebf25383f46f",
            "932997138a884569bd6b3fa11d308b52",
            "9a0966b8bc5c46b3996eadc48ffcda97",
            "05191cbb6463461a80c38da3d8337ca7",
            "bc7d1f876b60468aaf409b02c40078de",
            "67a2345f3f09495f9375403cc03d8533",
            "4d3d636e5a3747d68f6f3fcbddf7adef",
            "f3e8e43314ca4c38a9c375d8655f32fe",
            "f747440643e349c0b798c6be5e7d5e7c",
            "6ce9b9c602d044389d258aeda65bb159",
            "aa7dedd3f3d5434bae21108958d766a0",
            "be62328866284b5c932c2212fcad97dd",
            "f81150dfcaa44e4086299af3791abfea",
            "2d598aa9224841fc8c84578c42a84753",
            "6ee721afab5b4a47a95c31fb912b9b3b",
            "cfd88fa93a4b4ba0bc0670fae2c0eb94",
            "eb438c5d46e64f2d92ca3a079a41ebda",
            "37a37567f5e64c6b83b524e47ff7e0fd",
            "e053aac825394dd1b26fb5d00a789264"
          ]
        },
        "id": "S7wxXqTpPQOA",
        "outputId": "6d942680-8b40-4b9c-80ba-bf937ed86367"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/24xuqhh6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0_rsmvgh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59056', 'data', 'file=/tmp/tmpoat8y4sf/24xuqhh6.json', 'init=/tmp/tmpoat8y4sf/0_rsmvgh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model75dn44rp/prophet_model-20221204100815.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:15 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zy7yxyxf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b741naxo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47871', 'data', 'file=/tmp/tmpoat8y4sf/zy7yxyxf.json', 'init=/tmp/tmpoat8y4sf/b741naxo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelch9q3v1l/prophet_model-20221204100815.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1289879d59a449769cfdc58cdb29479d",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ku8mmp6m.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6lykdjnk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77895', 'data', 'file=/tmp/tmpoat8y4sf/ku8mmp6m.json', 'init=/tmp/tmpoat8y4sf/6lykdjnk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt8q4el7m/prophet_model-20221204100816.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:16 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j0qvd_hj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/80s71r1i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31747', 'data', 'file=/tmp/tmpoat8y4sf/j0qvd_hj.json', 'init=/tmp/tmpoat8y4sf/80s71r1i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0ezey9l3/prophet_model-20221204100816.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0cqzohi8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dygoj42g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71230', 'data', 'file=/tmp/tmpoat8y4sf/0cqzohi8.json', 'init=/tmp/tmpoat8y4sf/dygoj42g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxldweumz/prophet_model-20221204100817.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:17 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_xy5f2lu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5m4svdbe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80182', 'data', 'file=/tmp/tmpoat8y4sf/_xy5f2lu.json', 'init=/tmp/tmpoat8y4sf/5m4svdbe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelokoa4dgw/prophet_model-20221204100817.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/obkwgmth.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8qqal94s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50541', 'data', 'file=/tmp/tmpoat8y4sf/obkwgmth.json', 'init=/tmp/tmpoat8y4sf/8qqal94s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model42rdxa97/prophet_model-20221204100819.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:19 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cjmpan80.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o6osq96l.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34963', 'data', 'file=/tmp/tmpoat8y4sf/cjmpan80.json', 'init=/tmp/tmpoat8y4sf/o6osq96l.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3cbr8lfg/prophet_model-20221204100819.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/egr1ijub.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nitvz3ye.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36605', 'data', 'file=/tmp/tmpoat8y4sf/egr1ijub.json', 'init=/tmp/tmpoat8y4sf/nitvz3ye.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model47o2myoh/prophet_model-20221204100820.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:20 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bcw4d97i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zkmxcfsg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59158', 'data', 'file=/tmp/tmpoat8y4sf/bcw4d97i.json', 'init=/tmp/tmpoat8y4sf/zkmxcfsg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_c11da5s/prophet_model-20221204100820.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rbtjmgsn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z5lwzwcx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85441', 'data', 'file=/tmp/tmpoat8y4sf/rbtjmgsn.json', 'init=/tmp/tmpoat8y4sf/z5lwzwcx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelso1qr3yo/prophet_model-20221204100820.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:21 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rn_s9p_7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9qfcy0tz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83880', 'data', 'file=/tmp/tmpoat8y4sf/rn_s9p_7.json', 'init=/tmp/tmpoat8y4sf/9qfcy0tz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelg8lk8dk1/prophet_model-20221204100821.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zlekp4v3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dam1_3tw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70855', 'data', 'file=/tmp/tmpoat8y4sf/zlekp4v3.json', 'init=/tmp/tmpoat8y4sf/dam1_3tw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgyuxdyuj/prophet_model-20221204100821.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:22 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/k0w3o95d.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a2vij2ks.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2350', 'data', 'file=/tmp/tmpoat8y4sf/k0w3o95d.json', 'init=/tmp/tmpoat8y4sf/a2vij2ks.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6b9yh6b1/prophet_model-20221204100822.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/10vi3xth.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qo5iyuag.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83872', 'data', 'file=/tmp/tmpoat8y4sf/10vi3xth.json', 'init=/tmp/tmpoat8y4sf/qo5iyuag.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelooec0p09/prophet_model-20221204100822.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:23 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9xypsxxw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kzl1e2oc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30785', 'data', 'file=/tmp/tmpoat8y4sf/9xypsxxw.json', 'init=/tmp/tmpoat8y4sf/kzl1e2oc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrug34pp5/prophet_model-20221204100823.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/od5ig9l1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uk4gy7fh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61309', 'data', 'file=/tmp/tmpoat8y4sf/od5ig9l1.json', 'init=/tmp/tmpoat8y4sf/uk4gy7fh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsslh_xyr/prophet_model-20221204100824.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:24 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_du62n8z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z1zh5p9x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68940', 'data', 'file=/tmp/tmpoat8y4sf/_du62n8z.json', 'init=/tmp/tmpoat8y4sf/z1zh5p9x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1u_lcefo/prophet_model-20221204100824.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6mqe1vgz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/peh7koyw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50972', 'data', 'file=/tmp/tmpoat8y4sf/6mqe1vgz.json', 'init=/tmp/tmpoat8y4sf/peh7koyw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnz4r1p2c/prophet_model-20221204100825.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:25 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l1h0zczp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u9fi74m2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13005', 'data', 'file=/tmp/tmpoat8y4sf/l1h0zczp.json', 'init=/tmp/tmpoat8y4sf/u9fi74m2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9jilm6y8/prophet_model-20221204100825.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9jju7k71.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9fred9ut.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81888', 'data', 'file=/tmp/tmpoat8y4sf/9jju7k71.json', 'init=/tmp/tmpoat8y4sf/9fred9ut.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5wxzlh0o/prophet_model-20221204100826.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d9_2_izy.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nzy7zdr9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99855', 'data', 'file=/tmp/tmpoat8y4sf/d9_2_izy.json', 'init=/tmp/tmpoat8y4sf/nzy7zdr9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmdj33ohb/prophet_model-20221204100827.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:27 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ssj1si4f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ozz4nkjl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87135', 'data', 'file=/tmp/tmpoat8y4sf/ssj1si4f.json', 'init=/tmp/tmpoat8y4sf/ozz4nkjl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0ucgf_82/prophet_model-20221204100827.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gpv6nxyx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6meo6u1a.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8268', 'data', 'file=/tmp/tmpoat8y4sf/gpv6nxyx.json', 'init=/tmp/tmpoat8y4sf/6meo6u1a.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfh2ifeya/prophet_model-20221204100828.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:28 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kiuq6z0e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0p74qy98.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23256', 'data', 'file=/tmp/tmpoat8y4sf/kiuq6z0e.json', 'init=/tmp/tmpoat8y4sf/0p74qy98.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeleccfraas/prophet_model-20221204100828.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gqsj5op7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h75ivkr8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62697', 'data', 'file=/tmp/tmpoat8y4sf/gqsj5op7.json', 'init=/tmp/tmpoat8y4sf/h75ivkr8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr0mg1jl3/prophet_model-20221204100829.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:29 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7hlgtkaf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1usg8dp8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69887', 'data', 'file=/tmp/tmpoat8y4sf/7hlgtkaf.json', 'init=/tmp/tmpoat8y4sf/1usg8dp8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellpleo0ut/prophet_model-20221204100829.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t94tcsvv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pbj6tlrk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10879', 'data', 'file=/tmp/tmpoat8y4sf/t94tcsvv.json', 'init=/tmp/tmpoat8y4sf/pbj6tlrk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1ih5mp23/prophet_model-20221204100830.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:30 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dj8d_n1i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f9kygseo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1886', 'data', 'file=/tmp/tmpoat8y4sf/dj8d_n1i.json', 'init=/tmp/tmpoat8y4sf/f9kygseo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpue3oiyh/prophet_model-20221204100830.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2kd7z3jh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d9engdra.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84493', 'data', 'file=/tmp/tmpoat8y4sf/2kd7z3jh.json', 'init=/tmp/tmpoat8y4sf/d9engdra.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelj9ywgjtu/prophet_model-20221204100831.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ub7qviu7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lpbrn0n4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16641', 'data', 'file=/tmp/tmpoat8y4sf/ub7qviu7.json', 'init=/tmp/tmpoat8y4sf/lpbrn0n4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzyrrwf0n/prophet_model-20221204100832.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:32 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c_xpm7tt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pmo7g27g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10532', 'data', 'file=/tmp/tmpoat8y4sf/c_xpm7tt.json', 'init=/tmp/tmpoat8y4sf/pmo7g27g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model76ztfoun/prophet_model-20221204100832.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lhv4m6wv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5d0h6jxc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13099', 'data', 'file=/tmp/tmpoat8y4sf/lhv4m6wv.json', 'init=/tmp/tmpoat8y4sf/5d0h6jxc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldk5r0msi/prophet_model-20221204100833.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:33 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/isjvjq9_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pvl27_nz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7906', 'data', 'file=/tmp/tmpoat8y4sf/isjvjq9_.json', 'init=/tmp/tmpoat8y4sf/pvl27_nz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbmp7ph6t/prophet_model-20221204100833.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_jhp8o_y.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0rc_7i_w.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64440', 'data', 'file=/tmp/tmpoat8y4sf/_jhp8o_y.json', 'init=/tmp/tmpoat8y4sf/0rc_7i_w.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbeu5_yw_/prophet_model-20221204100836.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:36 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n_npv2mj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_nua721t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34121', 'data', 'file=/tmp/tmpoat8y4sf/n_npv2mj.json', 'init=/tmp/tmpoat8y4sf/_nua721t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_wxtym5d/prophet_model-20221204100836.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vdhimf26.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f5vti53j.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18219', 'data', 'file=/tmp/tmpoat8y4sf/vdhimf26.json', 'init=/tmp/tmpoat8y4sf/f5vti53j.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb07q2kix/prophet_model-20221204100838.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:38 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rauwi38w.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vvrjb_vz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29486', 'data', 'file=/tmp/tmpoat8y4sf/rauwi38w.json', 'init=/tmp/tmpoat8y4sf/vvrjb_vz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrmvbhgwp/prophet_model-20221204100838.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mmq_gd2a.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kwlo2biu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86347', 'data', 'file=/tmp/tmpoat8y4sf/mmq_gd2a.json', 'init=/tmp/tmpoat8y4sf/kwlo2biu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf7yfbqlx/prophet_model-20221204100839.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:39 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_id7pxx3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lspxogxd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73729', 'data', 'file=/tmp/tmpoat8y4sf/_id7pxx3.json', 'init=/tmp/tmpoat8y4sf/lspxogxd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyzshx64z/prophet_model-20221204100839.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3cbtiw9s.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jdxbdkxc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54087', 'data', 'file=/tmp/tmpoat8y4sf/3cbtiw9s.json', 'init=/tmp/tmpoat8y4sf/jdxbdkxc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwnry0ja7/prophet_model-20221204100840.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:40 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9c91hnyp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o9a1ofuv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26582', 'data', 'file=/tmp/tmpoat8y4sf/9c91hnyp.json', 'init=/tmp/tmpoat8y4sf/o9a1ofuv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzxxcvooi/prophet_model-20221204100840.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vdvgy4yt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tfwo58_2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93456', 'data', 'file=/tmp/tmpoat8y4sf/vdvgy4yt.json', 'init=/tmp/tmpoat8y4sf/tfwo58_2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5p7bgh1f/prophet_model-20221204100841.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:41 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l7rs976h.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pgw4r8v_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46322', 'data', 'file=/tmp/tmpoat8y4sf/l7rs976h.json', 'init=/tmp/tmpoat8y4sf/pgw4r8v_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb2i3a6d0/prophet_model-20221204100841.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/joexd6px.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2zwfnutm.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71358', 'data', 'file=/tmp/tmpoat8y4sf/joexd6px.json', 'init=/tmp/tmpoat8y4sf/2zwfnutm.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model983io1u9/prophet_model-20221204100843.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nqeitpjs.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e9b3qms6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36180', 'data', 'file=/tmp/tmpoat8y4sf/nqeitpjs.json', 'init=/tmp/tmpoat8y4sf/e9b3qms6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelubvf9sg2/prophet_model-20221204100843.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:43 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tdxkti4z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wv00sxtw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=580', 'data', 'file=/tmp/tmpoat8y4sf/tdxkti4z.json', 'init=/tmp/tmpoat8y4sf/wv00sxtw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model44p_bd42/prophet_model-20221204100843.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4lox5xpg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kmf7xdsb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48632', 'data', 'file=/tmp/tmpoat8y4sf/4lox5xpg.json', 'init=/tmp/tmpoat8y4sf/kmf7xdsb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkgcx2cfa/prophet_model-20221204100845.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7osrsh99.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ueekit0f.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69797', 'data', 'file=/tmp/tmpoat8y4sf/7osrsh99.json', 'init=/tmp/tmpoat8y4sf/ueekit0f.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqyjr0j31/prophet_model-20221204100845.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:45 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0jyfl51p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cukrrhbg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53499', 'data', 'file=/tmp/tmpoat8y4sf/0jyfl51p.json', 'init=/tmp/tmpoat8y4sf/cukrrhbg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt_im9emy/prophet_model-20221204100845.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o4bexytp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1i7xnuta.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36352', 'data', 'file=/tmp/tmpoat8y4sf/o4bexytp.json', 'init=/tmp/tmpoat8y4sf/1i7xnuta.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model77qvq6gx/prophet_model-20221204100847.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:47 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h53jau6n.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ytw6sa16.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54847', 'data', 'file=/tmp/tmpoat8y4sf/h53jau6n.json', 'init=/tmp/tmpoat8y4sf/ytw6sa16.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5ag31vrx/prophet_model-20221204100847.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "67083fb32a584418b57b3016b0feb64e",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pe4o44hp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ye5cpd0k.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53704', 'data', 'file=/tmp/tmpoat8y4sf/pe4o44hp.json', 'init=/tmp/tmpoat8y4sf/ye5cpd0k.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0om7b0gc/prophet_model-20221204100848.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:48 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5563d1hg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5xavs6aq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7365', 'data', 'file=/tmp/tmpoat8y4sf/5563d1hg.json', 'init=/tmp/tmpoat8y4sf/5xavs6aq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelimvy8rw9/prophet_model-20221204100848.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qe2uhkly.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3uozr4rb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84751', 'data', 'file=/tmp/tmpoat8y4sf/qe2uhkly.json', 'init=/tmp/tmpoat8y4sf/3uozr4rb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_models_0sufr9/prophet_model-20221204100849.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:49 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6_try457.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4_z5m646.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62711', 'data', 'file=/tmp/tmpoat8y4sf/6_try457.json', 'init=/tmp/tmpoat8y4sf/4_z5m646.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelar9ofzz5/prophet_model-20221204100849.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bqkffvtw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t4_coc_h.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30234', 'data', 'file=/tmp/tmpoat8y4sf/bqkffvtw.json', 'init=/tmp/tmpoat8y4sf/t4_coc_h.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7mm3kzop/prophet_model-20221204100850.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:50 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tmiu9510.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4nqdy4rv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65427', 'data', 'file=/tmp/tmpoat8y4sf/tmiu9510.json', 'init=/tmp/tmpoat8y4sf/4nqdy4rv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_models_nrm2fx/prophet_model-20221204100850.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7knjkvh6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s2mbkram.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9354', 'data', 'file=/tmp/tmpoat8y4sf/7knjkvh6.json', 'init=/tmp/tmpoat8y4sf/s2mbkram.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_l7uwk94/prophet_model-20221204100851.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:51 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qp5yoz4l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4lxlzong.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53538', 'data', 'file=/tmp/tmpoat8y4sf/qp5yoz4l.json', 'init=/tmp/tmpoat8y4sf/4lxlzong.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhfajwcpl/prophet_model-20221204100851.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3knt0z9s.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0hesiw6h.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81275', 'data', 'file=/tmp/tmpoat8y4sf/3knt0z9s.json', 'init=/tmp/tmpoat8y4sf/0hesiw6h.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5tj8m_6v/prophet_model-20221204100852.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:52 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/is0_c_9z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ztvwwq_3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31890', 'data', 'file=/tmp/tmpoat8y4sf/is0_c_9z.json', 'init=/tmp/tmpoat8y4sf/ztvwwq_3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelug4eyoge/prophet_model-20221204100852.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6tyn8weu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/of4zzrjj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=216', 'data', 'file=/tmp/tmpoat8y4sf/6tyn8weu.json', 'init=/tmp/tmpoat8y4sf/of4zzrjj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelc4iqnjxw/prophet_model-20221204100853.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:53 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2isspuqk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8_xxxwfu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88023', 'data', 'file=/tmp/tmpoat8y4sf/2isspuqk.json', 'init=/tmp/tmpoat8y4sf/8_xxxwfu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modell39214ik/prophet_model-20221204100853.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w75bos_0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j8hc3jja.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72616', 'data', 'file=/tmp/tmpoat8y4sf/w75bos_0.json', 'init=/tmp/tmpoat8y4sf/j8hc3jja.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelv68d_khg/prophet_model-20221204100854.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:54 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3n1qkqu8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/acd7k_ss.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94024', 'data', 'file=/tmp/tmpoat8y4sf/3n1qkqu8.json', 'init=/tmp/tmpoat8y4sf/acd7k_ss.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6rq9dmu0/prophet_model-20221204100854.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ohdm_oc3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/43zzz_c3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99577', 'data', 'file=/tmp/tmpoat8y4sf/ohdm_oc3.json', 'init=/tmp/tmpoat8y4sf/43zzz_c3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeln78wk6z8/prophet_model-20221204100857.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:57 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/65udcstz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/57lc8yd8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61759', 'data', 'file=/tmp/tmpoat8y4sf/65udcstz.json', 'init=/tmp/tmpoat8y4sf/57lc8yd8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8cg6_nrb/prophet_model-20221204100857.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2qm01lz7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sxs_03uh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67156', 'data', 'file=/tmp/tmpoat8y4sf/2qm01lz7.json', 'init=/tmp/tmpoat8y4sf/sxs_03uh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqqstc50t/prophet_model-20221204100858.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:58 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f0wgqo16.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2m2hqlpo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14068', 'data', 'file=/tmp/tmpoat8y4sf/f0wgqo16.json', 'init=/tmp/tmpoat8y4sf/2m2hqlpo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model11s8b_wu/prophet_model-20221204100858.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9g7aeusx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/166r5m24.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94269', 'data', 'file=/tmp/tmpoat8y4sf/9g7aeusx.json', 'init=/tmp/tmpoat8y4sf/166r5m24.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpg01u0g8/prophet_model-20221204100858.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_rlz5fqv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jxnd0kwo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35320', 'data', 'file=/tmp/tmpoat8y4sf/_rlz5fqv.json', 'init=/tmp/tmpoat8y4sf/jxnd0kwo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelc95y_lsl/prophet_model-20221204100859.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:08:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:08:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:08:59 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oc6no5rq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/45fq0vlt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14309', 'data', 'file=/tmp/tmpoat8y4sf/oc6no5rq.json', 'init=/tmp/tmpoat8y4sf/45fq0vlt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model391o9pwv/prophet_model-20221204100859.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:08:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n3tnkf9p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1myaml_z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68427', 'data', 'file=/tmp/tmpoat8y4sf/n3tnkf9p.json', 'init=/tmp/tmpoat8y4sf/1myaml_z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfixqi_pi/prophet_model-20221204100900.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:00 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uvo57du4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ovcbqlgy.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74993', 'data', 'file=/tmp/tmpoat8y4sf/uvo57du4.json', 'init=/tmp/tmpoat8y4sf/ovcbqlgy.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliv779mq0/prophet_model-20221204100900.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ffmgmih1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9slw28e0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72217', 'data', 'file=/tmp/tmpoat8y4sf/ffmgmih1.json', 'init=/tmp/tmpoat8y4sf/9slw28e0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelafyvy8uc/prophet_model-20221204100901.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:01 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o_u8jmvq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w8z2d6v1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18262', 'data', 'file=/tmp/tmpoat8y4sf/o_u8jmvq.json', 'init=/tmp/tmpoat8y4sf/w8z2d6v1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgaml2qt6/prophet_model-20221204100901.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/miivlyd3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0ccshnle.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46997', 'data', 'file=/tmp/tmpoat8y4sf/miivlyd3.json', 'init=/tmp/tmpoat8y4sf/0ccshnle.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model44w7xy_z/prophet_model-20221204100903.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:03 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8rej4iqv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gzyfc8to.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52766', 'data', 'file=/tmp/tmpoat8y4sf/8rej4iqv.json', 'init=/tmp/tmpoat8y4sf/gzyfc8to.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5cq5wfrm/prophet_model-20221204100903.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g841ib6w.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_lq08ibg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53547', 'data', 'file=/tmp/tmpoat8y4sf/g841ib6w.json', 'init=/tmp/tmpoat8y4sf/_lq08ibg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelh82zewba/prophet_model-20221204100904.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_oewtj7b.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7eqq6_g8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47104', 'data', 'file=/tmp/tmpoat8y4sf/_oewtj7b.json', 'init=/tmp/tmpoat8y4sf/7eqq6_g8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqcnbs1es/prophet_model-20221204100904.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:05 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7i2u6qgn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x4xs9f82.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92321', 'data', 'file=/tmp/tmpoat8y4sf/7i2u6qgn.json', 'init=/tmp/tmpoat8y4sf/x4xs9f82.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcdsn_bp6/prophet_model-20221204100905.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dlvl3zi3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bgokn8de.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28178', 'data', 'file=/tmp/tmpoat8y4sf/dlvl3zi3.json', 'init=/tmp/tmpoat8y4sf/bgokn8de.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1meg24hx/prophet_model-20221204100906.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:06 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z0z5tis1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/erqpkkl6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7393', 'data', 'file=/tmp/tmpoat8y4sf/z0z5tis1.json', 'init=/tmp/tmpoat8y4sf/erqpkkl6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelh_rtascw/prophet_model-20221204100906.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b_qfc2b5.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jozao21v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58286', 'data', 'file=/tmp/tmpoat8y4sf/b_qfc2b5.json', 'init=/tmp/tmpoat8y4sf/jozao21v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelazuyyzbu/prophet_model-20221204100907.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:07 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/180bozjt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/26gyl24m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12530', 'data', 'file=/tmp/tmpoat8y4sf/180bozjt.json', 'init=/tmp/tmpoat8y4sf/26gyl24m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpro3d7nm/prophet_model-20221204100907.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bxiu87eo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cvvl_o0w.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10192', 'data', 'file=/tmp/tmpoat8y4sf/bxiu87eo.json', 'init=/tmp/tmpoat8y4sf/cvvl_o0w.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu9rx3j41/prophet_model-20221204100908.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:08 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bi61ogoo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fr1p1yj_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21383', 'data', 'file=/tmp/tmpoat8y4sf/bi61ogoo.json', 'init=/tmp/tmpoat8y4sf/fr1p1yj_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_models8hok2za/prophet_model-20221204100908.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tub6kwm7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/asbr6j0i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69175', 'data', 'file=/tmp/tmpoat8y4sf/tub6kwm7.json', 'init=/tmp/tmpoat8y4sf/asbr6j0i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1ny6i5g5/prophet_model-20221204100909.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:09 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pv6i8cfe.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bz3hj3zb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64946', 'data', 'file=/tmp/tmpoat8y4sf/pv6i8cfe.json', 'init=/tmp/tmpoat8y4sf/bz3hj3zb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrwtzr164/prophet_model-20221204100909.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o3mspa88.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/61hle2it.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59251', 'data', 'file=/tmp/tmpoat8y4sf/o3mspa88.json', 'init=/tmp/tmpoat8y4sf/61hle2it.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltz86vp7p/prophet_model-20221204100910.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:11 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3di3bqbg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cree5mr9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89159', 'data', 'file=/tmp/tmpoat8y4sf/3di3bqbg.json', 'init=/tmp/tmpoat8y4sf/cree5mr9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7rc0r1ya/prophet_model-20221204100911.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lmu9l_kj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u3ynecik.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61012', 'data', 'file=/tmp/tmpoat8y4sf/lmu9l_kj.json', 'init=/tmp/tmpoat8y4sf/u3ynecik.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5w7y2yyx/prophet_model-20221204100912.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:12 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7e5cw_uc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/35m9jw1g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54488', 'data', 'file=/tmp/tmpoat8y4sf/7e5cw_uc.json', 'init=/tmp/tmpoat8y4sf/35m9jw1g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8thyngxc/prophet_model-20221204100912.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ga3hq7lp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kyom6fzs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88488', 'data', 'file=/tmp/tmpoat8y4sf/ga3hq7lp.json', 'init=/tmp/tmpoat8y4sf/kyom6fzs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3dv1opdc/prophet_model-20221204100913.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5qdzaj7c.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8xz_3_um.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82385', 'data', 'file=/tmp/tmpoat8y4sf/5qdzaj7c.json', 'init=/tmp/tmpoat8y4sf/8xz_3_um.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_plel12p/prophet_model-20221204100914.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:14 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tjsqstnq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9ohtqc5w.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52959', 'data', 'file=/tmp/tmpoat8y4sf/tjsqstnq.json', 'init=/tmp/tmpoat8y4sf/9ohtqc5w.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelttd0ghnp/prophet_model-20221204100914.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4de1jz5k.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vm0kwna9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85574', 'data', 'file=/tmp/tmpoat8y4sf/4de1jz5k.json', 'init=/tmp/tmpoat8y4sf/vm0kwna9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt26fck5r/prophet_model-20221204100915.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a5khwdqz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/su8ih1xf.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51363', 'data', 'file=/tmp/tmpoat8y4sf/a5khwdqz.json', 'init=/tmp/tmpoat8y4sf/su8ih1xf.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelx2_wmlw_/prophet_model-20221204100916.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:16 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ucbc21he.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m7fxa590.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20889', 'data', 'file=/tmp/tmpoat8y4sf/ucbc21he.json', 'init=/tmp/tmpoat8y4sf/m7fxa590.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelz64o1b9u/prophet_model-20221204100916.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m3qctxwa.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_5j_jhk7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77324', 'data', 'file=/tmp/tmpoat8y4sf/m3qctxwa.json', 'init=/tmp/tmpoat8y4sf/_5j_jhk7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzu_bqdde/prophet_model-20221204100917.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:17 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tdd2_ipx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p1_qmmr0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5442', 'data', 'file=/tmp/tmpoat8y4sf/tdd2_ipx.json', 'init=/tmp/tmpoat8y4sf/p1_qmmr0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelufsaqfhx/prophet_model-20221204100917.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a9570bca0de34eca9eb1ee8bba67cbbb",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/v8arygaz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ju11r2u9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46664', 'data', 'file=/tmp/tmpoat8y4sf/v8arygaz.json', 'init=/tmp/tmpoat8y4sf/ju11r2u9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluwte2koo/prophet_model-20221204100918.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:18 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b7021130.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j8gd5ujs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77190', 'data', 'file=/tmp/tmpoat8y4sf/b7021130.json', 'init=/tmp/tmpoat8y4sf/j8gd5ujs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloljt12g_/prophet_model-20221204100918.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s81y_ptg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dhc00lf3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49266', 'data', 'file=/tmp/tmpoat8y4sf/s81y_ptg.json', 'init=/tmp/tmpoat8y4sf/dhc00lf3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljxwd0e5_/prophet_model-20221204100919.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:19 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zbxwxqg9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hyach4j7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2928', 'data', 'file=/tmp/tmpoat8y4sf/zbxwxqg9.json', 'init=/tmp/tmpoat8y4sf/hyach4j7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8r_ersra/prophet_model-20221204100919.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g66pkmtg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n4hqig4z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36061', 'data', 'file=/tmp/tmpoat8y4sf/g66pkmtg.json', 'init=/tmp/tmpoat8y4sf/n4hqig4z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrwn1exv1/prophet_model-20221204100920.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:20 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p_7iuajj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uwmx3o6t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41163', 'data', 'file=/tmp/tmpoat8y4sf/p_7iuajj.json', 'init=/tmp/tmpoat8y4sf/uwmx3o6t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelareu03wm/prophet_model-20221204100920.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/witt2hhr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rru8pd62.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46702', 'data', 'file=/tmp/tmpoat8y4sf/witt2hhr.json', 'init=/tmp/tmpoat8y4sf/rru8pd62.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgi439var/prophet_model-20221204100921.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:21 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/egf42dcd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vac66den.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44221', 'data', 'file=/tmp/tmpoat8y4sf/egf42dcd.json', 'init=/tmp/tmpoat8y4sf/vac66den.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5mocpyqb/prophet_model-20221204100921.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3_qqqbze.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tnca9ehe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63370', 'data', 'file=/tmp/tmpoat8y4sf/3_qqqbze.json', 'init=/tmp/tmpoat8y4sf/tnca9ehe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelv_96ufkj/prophet_model-20221204100922.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:22 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5m2pdd_l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5y8ttsj4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91163', 'data', 'file=/tmp/tmpoat8y4sf/5m2pdd_l.json', 'init=/tmp/tmpoat8y4sf/5y8ttsj4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfvz8f5xe/prophet_model-20221204100922.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/64kubg1t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uhkfkj0s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75171', 'data', 'file=/tmp/tmpoat8y4sf/64kubg1t.json', 'init=/tmp/tmpoat8y4sf/uhkfkj0s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfa1w2d9u/prophet_model-20221204100923.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:23 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g2i2cdyl.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qq2llb34.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77854', 'data', 'file=/tmp/tmpoat8y4sf/g2i2cdyl.json', 'init=/tmp/tmpoat8y4sf/qq2llb34.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrscw1bxd/prophet_model-20221204100923.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dbgn641y.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g994lfjj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72504', 'data', 'file=/tmp/tmpoat8y4sf/dbgn641y.json', 'init=/tmp/tmpoat8y4sf/g994lfjj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfvz0q1qm/prophet_model-20221204100924.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:24 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/stgbwf96.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g31pap4v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18215', 'data', 'file=/tmp/tmpoat8y4sf/stgbwf96.json', 'init=/tmp/tmpoat8y4sf/g31pap4v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela9u0x8lu/prophet_model-20221204100924.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w_8u7ylw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hz0_mzuy.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43170', 'data', 'file=/tmp/tmpoat8y4sf/w_8u7ylw.json', 'init=/tmp/tmpoat8y4sf/hz0_mzuy.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelp5ec_0la/prophet_model-20221204100925.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:26 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9issmui_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ikz34zag.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95661', 'data', 'file=/tmp/tmpoat8y4sf/9issmui_.json', 'init=/tmp/tmpoat8y4sf/ikz34zag.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0f3bfwsz/prophet_model-20221204100926.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ga5allql.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5y7ykh5y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19544', 'data', 'file=/tmp/tmpoat8y4sf/ga5allql.json', 'init=/tmp/tmpoat8y4sf/5y7ykh5y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnutwwj1_/prophet_model-20221204100926.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:27 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t3sf2zit.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w901yac2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76777', 'data', 'file=/tmp/tmpoat8y4sf/t3sf2zit.json', 'init=/tmp/tmpoat8y4sf/w901yac2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2_k0sahy/prophet_model-20221204100927.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dq_hlyo8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dv5ypc6g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96119', 'data', 'file=/tmp/tmpoat8y4sf/dq_hlyo8.json', 'init=/tmp/tmpoat8y4sf/dv5ypc6g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3wa4n6y7/prophet_model-20221204100928.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5kuz7zh0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f43bt4qk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10510', 'data', 'file=/tmp/tmpoat8y4sf/5kuz7zh0.json', 'init=/tmp/tmpoat8y4sf/f43bt4qk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljnc6jqm9/prophet_model-20221204100928.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:28 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/449wc1dh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q4xjdneb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56249', 'data', 'file=/tmp/tmpoat8y4sf/449wc1dh.json', 'init=/tmp/tmpoat8y4sf/q4xjdneb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelz20njohu/prophet_model-20221204100928.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ecejxbio.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jch2bdgg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77804', 'data', 'file=/tmp/tmpoat8y4sf/ecejxbio.json', 'init=/tmp/tmpoat8y4sf/jch2bdgg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_41vr63e/prophet_model-20221204100929.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:29 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m_46byha.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/obl3_b59.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23266', 'data', 'file=/tmp/tmpoat8y4sf/m_46byha.json', 'init=/tmp/tmpoat8y4sf/obl3_b59.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbejipxs2/prophet_model-20221204100929.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c_0nqtfw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/id57pu8y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67221', 'data', 'file=/tmp/tmpoat8y4sf/c_0nqtfw.json', 'init=/tmp/tmpoat8y4sf/id57pu8y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwu0u0gu7/prophet_model-20221204100931.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:31 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/esuylii6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rx4pcspt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61862', 'data', 'file=/tmp/tmpoat8y4sf/esuylii6.json', 'init=/tmp/tmpoat8y4sf/rx4pcspt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr4_zwv8x/prophet_model-20221204100931.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/omzitiv2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/335kohvq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45869', 'data', 'file=/tmp/tmpoat8y4sf/omzitiv2.json', 'init=/tmp/tmpoat8y4sf/335kohvq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhv30cs_g/prophet_model-20221204100932.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:32 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/quxq2t95.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u9_jmlx5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29965', 'data', 'file=/tmp/tmpoat8y4sf/quxq2t95.json', 'init=/tmp/tmpoat8y4sf/u9_jmlx5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpu45fsnk/prophet_model-20221204100932.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t1sablas.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d9dfjypp.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44649', 'data', 'file=/tmp/tmpoat8y4sf/t1sablas.json', 'init=/tmp/tmpoat8y4sf/d9dfjypp.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model128o_t_k/prophet_model-20221204100933.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5dsom_ll.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wvsrd7wi.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51396', 'data', 'file=/tmp/tmpoat8y4sf/5dsom_ll.json', 'init=/tmp/tmpoat8y4sf/wvsrd7wi.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmlmb3_z5/prophet_model-20221204100934.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:34 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jzrd6eyf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4kpxu46l.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6428', 'data', 'file=/tmp/tmpoat8y4sf/jzrd6eyf.json', 'init=/tmp/tmpoat8y4sf/4kpxu46l.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeleeumxn1l/prophet_model-20221204100934.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/blayc8ly.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p53ds05b.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45673', 'data', 'file=/tmp/tmpoat8y4sf/blayc8ly.json', 'init=/tmp/tmpoat8y4sf/p53ds05b.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0t61s9y4/prophet_model-20221204100936.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:36 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b_5zxk45.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tfgz61sj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84155', 'data', 'file=/tmp/tmpoat8y4sf/b_5zxk45.json', 'init=/tmp/tmpoat8y4sf/tfgz61sj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellbqrim1g/prophet_model-20221204100936.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z_gj5lmf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kg0a1_22.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33967', 'data', 'file=/tmp/tmpoat8y4sf/z_gj5lmf.json', 'init=/tmp/tmpoat8y4sf/kg0a1_22.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr9833ggf/prophet_model-20221204100937.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:38 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8w6n9kfk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l68jz6ug.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96063', 'data', 'file=/tmp/tmpoat8y4sf/8w6n9kfk.json', 'init=/tmp/tmpoat8y4sf/l68jz6ug.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_i7mx3ok/prophet_model-20221204100938.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ybitnsmv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4o5wo28a.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10788', 'data', 'file=/tmp/tmpoat8y4sf/ybitnsmv.json', 'init=/tmp/tmpoat8y4sf/4o5wo28a.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelo6oqtvz4/prophet_model-20221204100941.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:41 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ezf479ll.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oybiqcvo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8836', 'data', 'file=/tmp/tmpoat8y4sf/ezf479ll.json', 'init=/tmp/tmpoat8y4sf/oybiqcvo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeln2pw03lp/prophet_model-20221204100941.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tbg0x8wo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/61ca8p6s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24739', 'data', 'file=/tmp/tmpoat8y4sf/tbg0x8wo.json', 'init=/tmp/tmpoat8y4sf/61ca8p6s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1wcq1mn8/prophet_model-20221204100942.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:42 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xzu8jt9o.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f9cb5iot.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20127', 'data', 'file=/tmp/tmpoat8y4sf/xzu8jt9o.json', 'init=/tmp/tmpoat8y4sf/f9cb5iot.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu13t6xp0/prophet_model-20221204100942.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6ycfgyep.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8l1u86_b.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2848', 'data', 'file=/tmp/tmpoat8y4sf/6ycfgyep.json', 'init=/tmp/tmpoat8y4sf/8l1u86_b.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4gcautxt/prophet_model-20221204100943.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:43 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6dkno5bq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_45d4zf8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73061', 'data', 'file=/tmp/tmpoat8y4sf/6dkno5bq.json', 'init=/tmp/tmpoat8y4sf/_45d4zf8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelj_cvjuxo/prophet_model-20221204100943.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0oylrjzc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/79a90fk8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47879', 'data', 'file=/tmp/tmpoat8y4sf/0oylrjzc.json', 'init=/tmp/tmpoat8y4sf/79a90fk8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9rxifd7b/prophet_model-20221204100945.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:45 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xkcuwajl.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2yd4t_da.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79771', 'data', 'file=/tmp/tmpoat8y4sf/xkcuwajl.json', 'init=/tmp/tmpoat8y4sf/2yd4t_da.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelg2dg0lqz/prophet_model-20221204100945.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hqhmb0yq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c_xzy_7g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66270', 'data', 'file=/tmp/tmpoat8y4sf/hqhmb0yq.json', 'init=/tmp/tmpoat8y4sf/c_xzy_7g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw6uyxq4l/prophet_model-20221204100946.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ctwvrnmi.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nq5192os.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95418', 'data', 'file=/tmp/tmpoat8y4sf/ctwvrnmi.json', 'init=/tmp/tmpoat8y4sf/nq5192os.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljyyj_gwa/prophet_model-20221204100947.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:47 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/676lgxpg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5gbbelap.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88837', 'data', 'file=/tmp/tmpoat8y4sf/676lgxpg.json', 'init=/tmp/tmpoat8y4sf/5gbbelap.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelilmg9yt7/prophet_model-20221204100947.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mzn2qq_f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6_6z0p31.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80409', 'data', 'file=/tmp/tmpoat8y4sf/mzn2qq_f.json', 'init=/tmp/tmpoat8y4sf/6_6z0p31.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7eso9qdy/prophet_model-20221204100948.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/unhg6se7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/01x_793s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51225', 'data', 'file=/tmp/tmpoat8y4sf/unhg6se7.json', 'init=/tmp/tmpoat8y4sf/01x_793s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelaiqso83t/prophet_model-20221204100949.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:49 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s7o1rwr6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u4y5q2kw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46190', 'data', 'file=/tmp/tmpoat8y4sf/s7o1rwr6.json', 'init=/tmp/tmpoat8y4sf/u4y5q2kw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela9oq2jvy/prophet_model-20221204100949.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g6gg_t4l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qcjwb4o_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8541', 'data', 'file=/tmp/tmpoat8y4sf/g6gg_t4l.json', 'init=/tmp/tmpoat8y4sf/qcjwb4o_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelo3i_er_j/prophet_model-20221204100950.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:50 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/04znioop.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kjj0d3lo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72144', 'data', 'file=/tmp/tmpoat8y4sf/04znioop.json', 'init=/tmp/tmpoat8y4sf/kjj0d3lo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_9mnn573/prophet_model-20221204100950.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "bf859654aa69416e802406e0f9beeec2",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4ibvpvf0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ve24adhi.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58681', 'data', 'file=/tmp/tmpoat8y4sf/4ibvpvf0.json', 'init=/tmp/tmpoat8y4sf/ve24adhi.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljvr0z5bi/prophet_model-20221204100951.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:51 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g7qir3ib.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x24dyjho.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31224', 'data', 'file=/tmp/tmpoat8y4sf/g7qir3ib.json', 'init=/tmp/tmpoat8y4sf/x24dyjho.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9nhdc27f/prophet_model-20221204100951.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5bbftmrr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f3ob9_5x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83809', 'data', 'file=/tmp/tmpoat8y4sf/5bbftmrr.json', 'init=/tmp/tmpoat8y4sf/f3ob9_5x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelncr99p6x/prophet_model-20221204100952.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:52 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u4xrlp0f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oqf2l7jx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14416', 'data', 'file=/tmp/tmpoat8y4sf/u4xrlp0f.json', 'init=/tmp/tmpoat8y4sf/oqf2l7jx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model36vfg43o/prophet_model-20221204100952.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_ne_x3qp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ryd5c_0t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79785', 'data', 'file=/tmp/tmpoat8y4sf/_ne_x3qp.json', 'init=/tmp/tmpoat8y4sf/ryd5c_0t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9eerpd32/prophet_model-20221204100953.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:53 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y6u53g8x.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vy81qybj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87654', 'data', 'file=/tmp/tmpoat8y4sf/y6u53g8x.json', 'init=/tmp/tmpoat8y4sf/vy81qybj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf72f1hvu/prophet_model-20221204100953.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bfd2qyrf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hiw6ipee.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51699', 'data', 'file=/tmp/tmpoat8y4sf/bfd2qyrf.json', 'init=/tmp/tmpoat8y4sf/hiw6ipee.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modely4tstm81/prophet_model-20221204100954.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:54 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hrsgmxdr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hwg_ej3n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69903', 'data', 'file=/tmp/tmpoat8y4sf/hrsgmxdr.json', 'init=/tmp/tmpoat8y4sf/hwg_ej3n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9mn09us5/prophet_model-20221204100954.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sg6fq5u2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jaavcosn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63104', 'data', 'file=/tmp/tmpoat8y4sf/sg6fq5u2.json', 'init=/tmp/tmpoat8y4sf/jaavcosn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljo0jfix4/prophet_model-20221204100955.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:55 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0mlw81tp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/brouma3n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61014', 'data', 'file=/tmp/tmpoat8y4sf/0mlw81tp.json', 'init=/tmp/tmpoat8y4sf/brouma3n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltfyydufi/prophet_model-20221204100955.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nm14yefb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pr_2nydw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79321', 'data', 'file=/tmp/tmpoat8y4sf/nm14yefb.json', 'init=/tmp/tmpoat8y4sf/pr_2nydw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvhxici24/prophet_model-20221204100956.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:56 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e2amd2d_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uc6bqk4n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1335', 'data', 'file=/tmp/tmpoat8y4sf/e2amd2d_.json', 'init=/tmp/tmpoat8y4sf/uc6bqk4n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8d7j29kz/prophet_model-20221204100956.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lr8kqz8l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m1csr5x1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41635', 'data', 'file=/tmp/tmpoat8y4sf/lr8kqz8l.json', 'init=/tmp/tmpoat8y4sf/m1csr5x1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_vhy98gw/prophet_model-20221204100957.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:57 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x7cgqol8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1r844lih.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6017', 'data', 'file=/tmp/tmpoat8y4sf/x7cgqol8.json', 'init=/tmp/tmpoat8y4sf/1r844lih.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelv4tyr7t7/prophet_model-20221204100958.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4y1djdjw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9db1vqnn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11583', 'data', 'file=/tmp/tmpoat8y4sf/4y1djdjw.json', 'init=/tmp/tmpoat8y4sf/9db1vqnn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelg05awyq5/prophet_model-20221204100959.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:09:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:09:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:09:59 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nwcdh_qt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q2q98apr.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77868', 'data', 'file=/tmp/tmpoat8y4sf/nwcdh_qt.json', 'init=/tmp/tmpoat8y4sf/q2q98apr.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6_1v_est/prophet_model-20221204100959.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:09:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7v04qssa.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gm3anxzv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26874', 'data', 'file=/tmp/tmpoat8y4sf/7v04qssa.json', 'init=/tmp/tmpoat8y4sf/gm3anxzv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela5o78vmu/prophet_model-20221204101001.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:01 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hich60a_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0e9hq1_1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6992', 'data', 'file=/tmp/tmpoat8y4sf/hich60a_.json', 'init=/tmp/tmpoat8y4sf/0e9hq1_1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzqgpmook/prophet_model-20221204101001.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uiaq19h9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yny8mbzz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71323', 'data', 'file=/tmp/tmpoat8y4sf/uiaq19h9.json', 'init=/tmp/tmpoat8y4sf/yny8mbzz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4npsep98/prophet_model-20221204101002.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fpcb278f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dotg_80o.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99035', 'data', 'file=/tmp/tmpoat8y4sf/fpcb278f.json', 'init=/tmp/tmpoat8y4sf/dotg_80o.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5zac4j0s/prophet_model-20221204101003.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:03 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ai3vbbbz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/37jm53k3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56802', 'data', 'file=/tmp/tmpoat8y4sf/ai3vbbbz.json', 'init=/tmp/tmpoat8y4sf/37jm53k3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnajq16p0/prophet_model-20221204101003.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lgamu09z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/izim8l0k.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16893', 'data', 'file=/tmp/tmpoat8y4sf/lgamu09z.json', 'init=/tmp/tmpoat8y4sf/izim8l0k.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr_9fonp0/prophet_model-20221204101004.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:04 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vlzflsvd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s9tscd8q.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43004', 'data', 'file=/tmp/tmpoat8y4sf/vlzflsvd.json', 'init=/tmp/tmpoat8y4sf/s9tscd8q.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model71wk6si5/prophet_model-20221204101004.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ji5j28ah.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g4xw347j.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=43317', 'data', 'file=/tmp/tmpoat8y4sf/ji5j28ah.json', 'init=/tmp/tmpoat8y4sf/g4xw347j.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7ra8jiih/prophet_model-20221204101005.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:05 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zlbh9twq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wq3omrro.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82641', 'data', 'file=/tmp/tmpoat8y4sf/zlbh9twq.json', 'init=/tmp/tmpoat8y4sf/wq3omrro.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelab4svhf7/prophet_model-20221204101005.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/745s52o3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s88cwc67.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51232', 'data', 'file=/tmp/tmpoat8y4sf/745s52o3.json', 'init=/tmp/tmpoat8y4sf/s88cwc67.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrc6fhk2n/prophet_model-20221204101008.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:08 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_4m9x82l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ja5nil0c.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37127', 'data', 'file=/tmp/tmpoat8y4sf/_4m9x82l.json', 'init=/tmp/tmpoat8y4sf/ja5nil0c.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3e408gx0/prophet_model-20221204101008.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3leegx9h.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l_tbaaq_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76262', 'data', 'file=/tmp/tmpoat8y4sf/3leegx9h.json', 'init=/tmp/tmpoat8y4sf/l_tbaaq_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeli3qlun1e/prophet_model-20221204101010.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/729nhpn8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/836i8r5z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63250', 'data', 'file=/tmp/tmpoat8y4sf/729nhpn8.json', 'init=/tmp/tmpoat8y4sf/836i8r5z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloq8edd8m/prophet_model-20221204101010.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:10 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/in2o5ifo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yzy_8po1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=80034', 'data', 'file=/tmp/tmpoat8y4sf/in2o5ifo.json', 'init=/tmp/tmpoat8y4sf/yzy_8po1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelq2emw9y2/prophet_model-20221204101010.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/54ck7yyk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8ab5_v51.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6529', 'data', 'file=/tmp/tmpoat8y4sf/54ck7yyk.json', 'init=/tmp/tmpoat8y4sf/8ab5_v51.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluqu730px/prophet_model-20221204101012.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:12 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j_xp7_oa.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o8h46uxy.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59807', 'data', 'file=/tmp/tmpoat8y4sf/j_xp7_oa.json', 'init=/tmp/tmpoat8y4sf/o8h46uxy.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelp7qo5tbt/prophet_model-20221204101012.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3ia0emhz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sfmvklyh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57262', 'data', 'file=/tmp/tmpoat8y4sf/3ia0emhz.json', 'init=/tmp/tmpoat8y4sf/sfmvklyh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliwnk4_09/prophet_model-20221204101013.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:13 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yg4s4333.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vl6zltxh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76459', 'data', 'file=/tmp/tmpoat8y4sf/yg4s4333.json', 'init=/tmp/tmpoat8y4sf/vl6zltxh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvvv2am6t/prophet_model-20221204101013.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uho_wxkb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gb6ervk2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28176', 'data', 'file=/tmp/tmpoat8y4sf/uho_wxkb.json', 'init=/tmp/tmpoat8y4sf/gb6ervk2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeli068i7_p/prophet_model-20221204101015.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:15 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s6717wse.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3_pyd9xb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=92475', 'data', 'file=/tmp/tmpoat8y4sf/s6717wse.json', 'init=/tmp/tmpoat8y4sf/3_pyd9xb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7nqgou9z/prophet_model-20221204101015.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g1nou7v3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9uqvq_54.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85152', 'data', 'file=/tmp/tmpoat8y4sf/g1nou7v3.json', 'init=/tmp/tmpoat8y4sf/9uqvq_54.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0pem1mdm/prophet_model-20221204101017.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:17 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c7osrk30.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nqliecs6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48103', 'data', 'file=/tmp/tmpoat8y4sf/c7osrk30.json', 'init=/tmp/tmpoat8y4sf/nqliecs6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnk2ojrxl/prophet_model-20221204101017.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ix_7rf9f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/heuhktul.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38248', 'data', 'file=/tmp/tmpoat8y4sf/ix_7rf9f.json', 'init=/tmp/tmpoat8y4sf/heuhktul.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelru967_yo/prophet_model-20221204101018.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:18 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2kto_7o2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/88j_1szq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34374', 'data', 'file=/tmp/tmpoat8y4sf/2kto_7o2.json', 'init=/tmp/tmpoat8y4sf/88j_1szq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelc2noeff9/prophet_model-20221204101018.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dobozkvf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wbj4zr_l.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49391', 'data', 'file=/tmp/tmpoat8y4sf/dobozkvf.json', 'init=/tmp/tmpoat8y4sf/wbj4zr_l.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrpz71p82/prophet_model-20221204101019.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:19 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fucju35m.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4qvukeuo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68236', 'data', 'file=/tmp/tmpoat8y4sf/fucju35m.json', 'init=/tmp/tmpoat8y4sf/4qvukeuo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modell85gttx4/prophet_model-20221204101019.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e72sbnqk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hp1zan_r.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71937', 'data', 'file=/tmp/tmpoat8y4sf/e72sbnqk.json', 'init=/tmp/tmpoat8y4sf/hp1zan_r.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeln1yxepdk/prophet_model-20221204101020.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t51rl5ps.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hdchd59m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1515', 'data', 'file=/tmp/tmpoat8y4sf/t51rl5ps.json', 'init=/tmp/tmpoat8y4sf/hdchd59m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbvsmilvp/prophet_model-20221204101021.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:21 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xz3_6x7u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/71q_ukp9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61943', 'data', 'file=/tmp/tmpoat8y4sf/xz3_6x7u.json', 'init=/tmp/tmpoat8y4sf/71q_ukp9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0tkxmjc4/prophet_model-20221204101021.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ydhm12ah.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y8wb0o_n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9752', 'data', 'file=/tmp/tmpoat8y4sf/ydhm12ah.json', 'init=/tmp/tmpoat8y4sf/y8wb0o_n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1mp5i4vh/prophet_model-20221204101023.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qyqyrr99.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d6qoruae.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13679', 'data', 'file=/tmp/tmpoat8y4sf/qyqyrr99.json', 'init=/tmp/tmpoat8y4sf/d6qoruae.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_qk1v31f/prophet_model-20221204101023.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:23 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/v7ghcyce.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gsd62yr7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27713', 'data', 'file=/tmp/tmpoat8y4sf/v7ghcyce.json', 'init=/tmp/tmpoat8y4sf/gsd62yr7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelm1lu_itv/prophet_model-20221204101023.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hzqn68de.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b3b6byoh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94973', 'data', 'file=/tmp/tmpoat8y4sf/hzqn68de.json', 'init=/tmp/tmpoat8y4sf/b3b6byoh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelocc93e2k/prophet_model-20221204101025.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0491709c4a074c0492ca2b87d5e5b9c7",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a5rbo2si.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6ij4z54v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72920', 'data', 'file=/tmp/tmpoat8y4sf/a5rbo2si.json', 'init=/tmp/tmpoat8y4sf/6ij4z54v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelray3ktwh/prophet_model-20221204101025.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:25 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/na6vzhav.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ekckg2_o.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65712', 'data', 'file=/tmp/tmpoat8y4sf/na6vzhav.json', 'init=/tmp/tmpoat8y4sf/ekckg2_o.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldmaywfyd/prophet_model-20221204101026.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i2hhw7wk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hyoltt_i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15958', 'data', 'file=/tmp/tmpoat8y4sf/i2hhw7wk.json', 'init=/tmp/tmpoat8y4sf/hyoltt_i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model87fj2_ra/prophet_model-20221204101026.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ugl7lje2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iyurp3p2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37968', 'data', 'file=/tmp/tmpoat8y4sf/ugl7lje2.json', 'init=/tmp/tmpoat8y4sf/iyurp3p2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu0txncwk/prophet_model-20221204101027.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/40jl20ro.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/859nroge.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36286', 'data', 'file=/tmp/tmpoat8y4sf/40jl20ro.json', 'init=/tmp/tmpoat8y4sf/859nroge.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8a6miaek/prophet_model-20221204101028.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pu5d3zma.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qhhzpk0_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25037', 'data', 'file=/tmp/tmpoat8y4sf/pu5d3zma.json', 'init=/tmp/tmpoat8y4sf/qhhzpk0_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7sty9up3/prophet_model-20221204101028.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rbjrxsqi.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1t1673ld.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72523', 'data', 'file=/tmp/tmpoat8y4sf/rbjrxsqi.json', 'init=/tmp/tmpoat8y4sf/1t1673ld.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model933uew1j/prophet_model-20221204101029.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8wd4g_ds.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6k2ps8qe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24081', 'data', 'file=/tmp/tmpoat8y4sf/8wd4g_ds.json', 'init=/tmp/tmpoat8y4sf/6k2ps8qe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloai59f82/prophet_model-20221204101030.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fx7ijosg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/06bj3ods.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75869', 'data', 'file=/tmp/tmpoat8y4sf/fx7ijosg.json', 'init=/tmp/tmpoat8y4sf/06bj3ods.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfjwtwpd5/prophet_model-20221204101030.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b1dgdm_a.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y579pn6n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57449', 'data', 'file=/tmp/tmpoat8y4sf/b1dgdm_a.json', 'init=/tmp/tmpoat8y4sf/y579pn6n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model123rx264/prophet_model-20221204101031.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hlwa2yr7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h7wynp2v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8337', 'data', 'file=/tmp/tmpoat8y4sf/hlwa2yr7.json', 'init=/tmp/tmpoat8y4sf/h7wynp2v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model12jg3zgy/prophet_model-20221204101032.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2pal5cy4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5b5wgasr.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95520', 'data', 'file=/tmp/tmpoat8y4sf/2pal5cy4.json', 'init=/tmp/tmpoat8y4sf/5b5wgasr.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_bq0hfoa/prophet_model-20221204101033.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zemtu_l1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/swpm_kra.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40032', 'data', 'file=/tmp/tmpoat8y4sf/zemtu_l1.json', 'init=/tmp/tmpoat8y4sf/swpm_kra.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4lccv3bm/prophet_model-20221204101033.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dnzgiung.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8i1v38zy.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41556', 'data', 'file=/tmp/tmpoat8y4sf/dnzgiung.json', 'init=/tmp/tmpoat8y4sf/8i1v38zy.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvjm0xzwx/prophet_model-20221204101034.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7wvbprw8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/r583xasx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71045', 'data', 'file=/tmp/tmpoat8y4sf/7wvbprw8.json', 'init=/tmp/tmpoat8y4sf/r583xasx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_models5j02vtd/prophet_model-20221204101035.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/na63buh2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ad9hwdvv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28773', 'data', 'file=/tmp/tmpoat8y4sf/na63buh2.json', 'init=/tmp/tmpoat8y4sf/ad9hwdvv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeleordvh_l/prophet_model-20221204101035.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7xdp08a3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tf_hw49t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48052', 'data', 'file=/tmp/tmpoat8y4sf/7xdp08a3.json', 'init=/tmp/tmpoat8y4sf/tf_hw49t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmk2d41cz/prophet_model-20221204101036.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i1nvnxm2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wd5bui8t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67957', 'data', 'file=/tmp/tmpoat8y4sf/i1nvnxm2.json', 'init=/tmp/tmpoat8y4sf/wd5bui8t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhdnfh167/prophet_model-20221204101037.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/is06mw5e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lnibnh68.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27758', 'data', 'file=/tmp/tmpoat8y4sf/is06mw5e.json', 'init=/tmp/tmpoat8y4sf/lnibnh68.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk2tl7cyg/prophet_model-20221204101037.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ig35fpqo.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2yiacnv8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28908', 'data', 'file=/tmp/tmpoat8y4sf/ig35fpqo.json', 'init=/tmp/tmpoat8y4sf/2yiacnv8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0ryb7jwn/prophet_model-20221204101038.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/khkdve2d.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/r7iahpc8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93434', 'data', 'file=/tmp/tmpoat8y4sf/khkdve2d.json', 'init=/tmp/tmpoat8y4sf/r7iahpc8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfakyc72d/prophet_model-20221204101039.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1a8tmgdn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xh80djf3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65803', 'data', 'file=/tmp/tmpoat8y4sf/1a8tmgdn.json', 'init=/tmp/tmpoat8y4sf/xh80djf3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model52bt6fo_/prophet_model-20221204101039.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/__37qr53.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y70l0nod.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40200', 'data', 'file=/tmp/tmpoat8y4sf/__37qr53.json', 'init=/tmp/tmpoat8y4sf/y70l0nod.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldgsawoib/prophet_model-20221204101040.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p9ca73mh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ic0h89sl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70256', 'data', 'file=/tmp/tmpoat8y4sf/p9ca73mh.json', 'init=/tmp/tmpoat8y4sf/ic0h89sl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6dwjqjau/prophet_model-20221204101041.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wnlj0h4c.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aunpz3yc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62454', 'data', 'file=/tmp/tmpoat8y4sf/wnlj0h4c.json', 'init=/tmp/tmpoat8y4sf/aunpz3yc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelufzmr9rs/prophet_model-20221204101042.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wuugxy9f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jm3t5ux2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10827', 'data', 'file=/tmp/tmpoat8y4sf/wuugxy9f.json', 'init=/tmp/tmpoat8y4sf/jm3t5ux2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2_dc163a/prophet_model-20221204101042.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xnlwvg3x.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gdug8vkl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87368', 'data', 'file=/tmp/tmpoat8y4sf/xnlwvg3x.json', 'init=/tmp/tmpoat8y4sf/gdug8vkl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfvmqz0ss/prophet_model-20221204101043.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jy071bu0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qcec9kc7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16822', 'data', 'file=/tmp/tmpoat8y4sf/jy071bu0.json', 'init=/tmp/tmpoat8y4sf/qcec9kc7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4n5y8qs6/prophet_model-20221204101044.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0d0b6e271c1546b1883f0595fe1a7960",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/msdnjgmp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hlyvd63t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75025', 'data', 'file=/tmp/tmpoat8y4sf/msdnjgmp.json', 'init=/tmp/tmpoat8y4sf/hlyvd63t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrhowgi2j/prophet_model-20221204101044.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:10:44 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m_g2idhq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w0u6yql7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83194', 'data', 'file=/tmp/tmpoat8y4sf/m_g2idhq.json', 'init=/tmp/tmpoat8y4sf/w0u6yql7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb8tpbvxj/prophet_model-20221204101044.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1ayc5dzj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iy4s8jql.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89962', 'data', 'file=/tmp/tmpoat8y4sf/1ayc5dzj.json', 'init=/tmp/tmpoat8y4sf/iy4s8jql.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellvp1gn05/prophet_model-20221204101045.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nafx3tot.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wm6v2sj6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75887', 'data', 'file=/tmp/tmpoat8y4sf/nafx3tot.json', 'init=/tmp/tmpoat8y4sf/wm6v2sj6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb1__ir48/prophet_model-20221204101046.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ajea2qg_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j1dg_34t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66158', 'data', 'file=/tmp/tmpoat8y4sf/ajea2qg_.json', 'init=/tmp/tmpoat8y4sf/j1dg_34t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela3a_rlww/prophet_model-20221204101046.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/thowvo73.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mdapg2_f.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89996', 'data', 'file=/tmp/tmpoat8y4sf/thowvo73.json', 'init=/tmp/tmpoat8y4sf/mdapg2_f.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnru4gy2y/prophet_model-20221204101047.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ok2ympw0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bmau2f_y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1250', 'data', 'file=/tmp/tmpoat8y4sf/ok2ympw0.json', 'init=/tmp/tmpoat8y4sf/bmau2f_y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk6deokl8/prophet_model-20221204101048.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u2x9_a2n.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1111y7b0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36406', 'data', 'file=/tmp/tmpoat8y4sf/u2x9_a2n.json', 'init=/tmp/tmpoat8y4sf/1111y7b0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelg7tvfyo2/prophet_model-20221204101048.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6mba7az6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5ydm4kf7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=23506', 'data', 'file=/tmp/tmpoat8y4sf/6mba7az6.json', 'init=/tmp/tmpoat8y4sf/5ydm4kf7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0gge99tv/prophet_model-20221204101049.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fuf4a__p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sit9fnh5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8101', 'data', 'file=/tmp/tmpoat8y4sf/fuf4a__p.json', 'init=/tmp/tmpoat8y4sf/sit9fnh5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcglse0qf/prophet_model-20221204101050.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/05rlj47i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h7fnpccd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85826', 'data', 'file=/tmp/tmpoat8y4sf/05rlj47i.json', 'init=/tmp/tmpoat8y4sf/h7fnpccd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model16d_tbrn/prophet_model-20221204101050.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rq14jlz1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/blk0uxxc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20786', 'data', 'file=/tmp/tmpoat8y4sf/rq14jlz1.json', 'init=/tmp/tmpoat8y4sf/blk0uxxc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelylyrg2xc/prophet_model-20221204101051.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/598r260y.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/br9g8ef6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64049', 'data', 'file=/tmp/tmpoat8y4sf/598r260y.json', 'init=/tmp/tmpoat8y4sf/br9g8ef6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_k7ycvuc/prophet_model-20221204101052.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_n6f87pd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/enzdnkhj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33240', 'data', 'file=/tmp/tmpoat8y4sf/_n6f87pd.json', 'init=/tmp/tmpoat8y4sf/enzdnkhj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeld1q2o6jw/prophet_model-20221204101053.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dchjdbr7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m8r_gbmn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58207', 'data', 'file=/tmp/tmpoat8y4sf/dchjdbr7.json', 'init=/tmp/tmpoat8y4sf/m8r_gbmn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4fh9qrvl/prophet_model-20221204101053.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9halvp9d.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yk02rfkd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1354', 'data', 'file=/tmp/tmpoat8y4sf/9halvp9d.json', 'init=/tmp/tmpoat8y4sf/yk02rfkd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5unnwq72/prophet_model-20221204101054.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gdw2goha.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_qjof_i0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90639', 'data', 'file=/tmp/tmpoat8y4sf/gdw2goha.json', 'init=/tmp/tmpoat8y4sf/_qjof_i0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model345cnfyu/prophet_model-20221204101055.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9mu60r6o.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c4w3t9lz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=22350', 'data', 'file=/tmp/tmpoat8y4sf/9mu60r6o.json', 'init=/tmp/tmpoat8y4sf/c4w3t9lz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf1qbha0m/prophet_model-20221204101055.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4wnxnr1l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rjg6n224.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10096', 'data', 'file=/tmp/tmpoat8y4sf/4wnxnr1l.json', 'init=/tmp/tmpoat8y4sf/rjg6n224.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5vkv399k/prophet_model-20221204101056.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u8jsp14p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ss466mmr.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20839', 'data', 'file=/tmp/tmpoat8y4sf/u8jsp14p.json', 'init=/tmp/tmpoat8y4sf/ss466mmr.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbddc86b4/prophet_model-20221204101057.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3r557kf3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g02584w0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35660', 'data', 'file=/tmp/tmpoat8y4sf/3r557kf3.json', 'init=/tmp/tmpoat8y4sf/g02584w0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0kwrl0fc/prophet_model-20221204101057.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tu3zylz7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2bghtgz0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79685', 'data', 'file=/tmp/tmpoat8y4sf/tu3zylz7.json', 'init=/tmp/tmpoat8y4sf/2bghtgz0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnwaksumx/prophet_model-20221204101058.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l7efhvla.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g2r3krpc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58611', 'data', 'file=/tmp/tmpoat8y4sf/l7efhvla.json', 'init=/tmp/tmpoat8y4sf/g2r3krpc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldfpfxvcy/prophet_model-20221204101059.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:10:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:10:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uhei_n3_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4_37ghmc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26346', 'data', 'file=/tmp/tmpoat8y4sf/uhei_n3_.json', 'init=/tmp/tmpoat8y4sf/4_37ghmc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelipxcbahn/prophet_model-20221204101100.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/py74i9l4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xg2s3u_v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64222', 'data', 'file=/tmp/tmpoat8y4sf/py74i9l4.json', 'init=/tmp/tmpoat8y4sf/xg2s3u_v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelo7gcf61r/prophet_model-20221204101100.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m3hey0rk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fpckc1xi.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81124', 'data', 'file=/tmp/tmpoat8y4sf/m3hey0rk.json', 'init=/tmp/tmpoat8y4sf/fpckc1xi.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbewdd5lf/prophet_model-20221204101101.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0racljyx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y75gnila.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51496', 'data', 'file=/tmp/tmpoat8y4sf/0racljyx.json', 'init=/tmp/tmpoat8y4sf/y75gnila.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltdapi3p7/prophet_model-20221204101102.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iizwa8t4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cpa9ilry.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51255', 'data', 'file=/tmp/tmpoat8y4sf/iizwa8t4.json', 'init=/tmp/tmpoat8y4sf/cpa9ilry.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkd4rnxx9/prophet_model-20221204101103.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b2c399782be0484884edf9f1d742e535",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p9h5kffq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n7ok95_f.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71654', 'data', 'file=/tmp/tmpoat8y4sf/p9h5kffq.json', 'init=/tmp/tmpoat8y4sf/n7ok95_f.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelonhypk7p/prophet_model-20221204101103.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:11:03 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dqn8z6_z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n2wl_t1s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36080', 'data', 'file=/tmp/tmpoat8y4sf/dqn8z6_z.json', 'init=/tmp/tmpoat8y4sf/n2wl_t1s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpq4000v6/prophet_model-20221204101103.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c_vw88ek.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xwzvcge3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93720', 'data', 'file=/tmp/tmpoat8y4sf/c_vw88ek.json', 'init=/tmp/tmpoat8y4sf/xwzvcge3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltbi6a8qu/prophet_model-20221204101104.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/k6929913.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fbzvxpuk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72644', 'data', 'file=/tmp/tmpoat8y4sf/k6929913.json', 'init=/tmp/tmpoat8y4sf/fbzvxpuk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluzv6fz1f/prophet_model-20221204101105.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c_ql1mz0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wq58arb3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=39102', 'data', 'file=/tmp/tmpoat8y4sf/c_ql1mz0.json', 'init=/tmp/tmpoat8y4sf/wq58arb3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1akxf4yg/prophet_model-20221204101105.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8z8p6e1q.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c7q_gcnd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11092', 'data', 'file=/tmp/tmpoat8y4sf/8z8p6e1q.json', 'init=/tmp/tmpoat8y4sf/c7q_gcnd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkx5f1idq/prophet_model-20221204101106.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o78xg7n4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ywu8lcru.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=82718', 'data', 'file=/tmp/tmpoat8y4sf/o78xg7n4.json', 'init=/tmp/tmpoat8y4sf/ywu8lcru.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7j7tuxjx/prophet_model-20221204101107.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/noismnyr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/of3cq5yo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13771', 'data', 'file=/tmp/tmpoat8y4sf/noismnyr.json', 'init=/tmp/tmpoat8y4sf/of3cq5yo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_h52_ygw/prophet_model-20221204101107.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/25kaykah.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mq2rbyf4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68126', 'data', 'file=/tmp/tmpoat8y4sf/25kaykah.json', 'init=/tmp/tmpoat8y4sf/mq2rbyf4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpj41_z4h/prophet_model-20221204101108.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/idisp8mh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cs_35ibl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49663', 'data', 'file=/tmp/tmpoat8y4sf/idisp8mh.json', 'init=/tmp/tmpoat8y4sf/cs_35ibl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7ifurfis/prophet_model-20221204101109.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/00qilpt3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ko8r_xp0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77348', 'data', 'file=/tmp/tmpoat8y4sf/00qilpt3.json', 'init=/tmp/tmpoat8y4sf/ko8r_xp0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9nn__ywx/prophet_model-20221204101109.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/781z4fru.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a5lueh5m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46887', 'data', 'file=/tmp/tmpoat8y4sf/781z4fru.json', 'init=/tmp/tmpoat8y4sf/a5lueh5m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzlm46uiw/prophet_model-20221204101110.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mjag8wg7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rwa0qty3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26153', 'data', 'file=/tmp/tmpoat8y4sf/mjag8wg7.json', 'init=/tmp/tmpoat8y4sf/rwa0qty3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_d0jvpyi/prophet_model-20221204101111.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sq21junp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y1at_4x0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93852', 'data', 'file=/tmp/tmpoat8y4sf/sq21junp.json', 'init=/tmp/tmpoat8y4sf/y1at_4x0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrseponkb/prophet_model-20221204101111.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nsya47j4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5_7_j8am.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73221', 'data', 'file=/tmp/tmpoat8y4sf/nsya47j4.json', 'init=/tmp/tmpoat8y4sf/5_7_j8am.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltca5yb8m/prophet_model-20221204101112.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/26gyjb47.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lvkh4ozg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41193', 'data', 'file=/tmp/tmpoat8y4sf/26gyjb47.json', 'init=/tmp/tmpoat8y4sf/lvkh4ozg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf9s_l3oy/prophet_model-20221204101113.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8ngyucgv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h4shzqni.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76744', 'data', 'file=/tmp/tmpoat8y4sf/8ngyucgv.json', 'init=/tmp/tmpoat8y4sf/h4shzqni.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcitqvxku/prophet_model-20221204101113.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gyxjun5g.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gh1eobw7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56586', 'data', 'file=/tmp/tmpoat8y4sf/gyxjun5g.json', 'init=/tmp/tmpoat8y4sf/gh1eobw7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldju2ajb1/prophet_model-20221204101114.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_h38dv2j.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g1pq8kcr.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71500', 'data', 'file=/tmp/tmpoat8y4sf/_h38dv2j.json', 'init=/tmp/tmpoat8y4sf/g1pq8kcr.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelo00om6k3/prophet_model-20221204101115.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wdzj6325.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fhdhtsf6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86097', 'data', 'file=/tmp/tmpoat8y4sf/wdzj6325.json', 'init=/tmp/tmpoat8y4sf/fhdhtsf6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7go7olcn/prophet_model-20221204101116.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2k5ba6rp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mpfu4rrt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58592', 'data', 'file=/tmp/tmpoat8y4sf/2k5ba6rp.json', 'init=/tmp/tmpoat8y4sf/mpfu4rrt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljzzp6ixa/prophet_model-20221204101116.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/niuzzzrz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j6e90cmx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68695', 'data', 'file=/tmp/tmpoat8y4sf/niuzzzrz.json', 'init=/tmp/tmpoat8y4sf/j6e90cmx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnfkizcw5/prophet_model-20221204101117.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i9ntora6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l3p02pz3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41163', 'data', 'file=/tmp/tmpoat8y4sf/i9ntora6.json', 'init=/tmp/tmpoat8y4sf/l3p02pz3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsekogu0f/prophet_model-20221204101118.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0albzv33.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h6owhf0f.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36805', 'data', 'file=/tmp/tmpoat8y4sf/0albzv33.json', 'init=/tmp/tmpoat8y4sf/h6owhf0f.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyywwdy1j/prophet_model-20221204101118.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dlairpxa.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d2qlm1id.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9467', 'data', 'file=/tmp/tmpoat8y4sf/dlairpxa.json', 'init=/tmp/tmpoat8y4sf/d2qlm1id.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcv4inhig/prophet_model-20221204101119.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cvbcy49r.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oz1ipwea.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87107', 'data', 'file=/tmp/tmpoat8y4sf/cvbcy49r.json', 'init=/tmp/tmpoat8y4sf/oz1ipwea.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modell6yvn2mz/prophet_model-20221204101120.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s_5i99v_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6qjlm1w2.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65265', 'data', 'file=/tmp/tmpoat8y4sf/s_5i99v_.json', 'init=/tmp/tmpoat8y4sf/6qjlm1w2.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6olsk66a/prophet_model-20221204101121.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o76x9pk_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/240f5plt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=38396', 'data', 'file=/tmp/tmpoat8y4sf/o76x9pk_.json', 'init=/tmp/tmpoat8y4sf/240f5plt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeln17iytn1/prophet_model-20221204101121.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "797236a6623c4e59a8e48a6300d633af",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nx6sgpml.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w58a5_le.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15296', 'data', 'file=/tmp/tmpoat8y4sf/nx6sgpml.json', 'init=/tmp/tmpoat8y4sf/w58a5_le.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5fmd_frj/prophet_model-20221204101122.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:11:22 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_tojc6df.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/akc5ovfm.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52170', 'data', 'file=/tmp/tmpoat8y4sf/_tojc6df.json', 'init=/tmp/tmpoat8y4sf/akc5ovfm.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkwhv7yko/prophet_model-20221204101122.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:11:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/697pdjwm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/umx902qv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59900', 'data', 'file=/tmp/tmpoat8y4sf/697pdjwm.json', 'init=/tmp/tmpoat8y4sf/umx902qv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxogk3ff7/prophet_model-20221204101123.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i6w29in2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4c42m7cc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35114', 'data', 'file=/tmp/tmpoat8y4sf/i6w29in2.json', 'init=/tmp/tmpoat8y4sf/4c42m7cc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2b4kofbd/prophet_model-20221204101123.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q3eujiyd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d7hppcrv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36633', 'data', 'file=/tmp/tmpoat8y4sf/q3eujiyd.json', 'init=/tmp/tmpoat8y4sf/d7hppcrv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_n3hcf_e/prophet_model-20221204101124.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e6w_2fty.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/34who3b_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93228', 'data', 'file=/tmp/tmpoat8y4sf/e6w_2fty.json', 'init=/tmp/tmpoat8y4sf/34who3b_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqmmdl664/prophet_model-20221204101125.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t8dk_za1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/eg6wqe_y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32467', 'data', 'file=/tmp/tmpoat8y4sf/t8dk_za1.json', 'init=/tmp/tmpoat8y4sf/eg6wqe_y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelz_o43clr/prophet_model-20221204101125.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/akrcg7eb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rk_nyz_1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8011', 'data', 'file=/tmp/tmpoat8y4sf/akrcg7eb.json', 'init=/tmp/tmpoat8y4sf/rk_nyz_1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfihk_h5f/prophet_model-20221204101126.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mcouvzag.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fktetmd5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63452', 'data', 'file=/tmp/tmpoat8y4sf/mcouvzag.json', 'init=/tmp/tmpoat8y4sf/fktetmd5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbsuunjiv/prophet_model-20221204101127.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/znz9bv4v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b6ucmyjn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5495', 'data', 'file=/tmp/tmpoat8y4sf/znz9bv4v.json', 'init=/tmp/tmpoat8y4sf/b6ucmyjn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldq6b_k39/prophet_model-20221204101127.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x39v8uhl.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tojn33qb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54797', 'data', 'file=/tmp/tmpoat8y4sf/x39v8uhl.json', 'init=/tmp/tmpoat8y4sf/tojn33qb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljfrmqory/prophet_model-20221204101128.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/htva43lf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/awyf7uaz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31', 'data', 'file=/tmp/tmpoat8y4sf/htva43lf.json', 'init=/tmp/tmpoat8y4sf/awyf7uaz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelktzs29ow/prophet_model-20221204101129.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/noy9xm3t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/906c3r62.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10885', 'data', 'file=/tmp/tmpoat8y4sf/noy9xm3t.json', 'init=/tmp/tmpoat8y4sf/906c3r62.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbtsl8p0x/prophet_model-20221204101130.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3ppcicnr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2s5tq_vl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97770', 'data', 'file=/tmp/tmpoat8y4sf/3ppcicnr.json', 'init=/tmp/tmpoat8y4sf/2s5tq_vl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw1omdk_4/prophet_model-20221204101130.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7wcd7vgj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6ez23aot.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98457', 'data', 'file=/tmp/tmpoat8y4sf/7wcd7vgj.json', 'init=/tmp/tmpoat8y4sf/6ez23aot.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhodr2_a6/prophet_model-20221204101131.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/drgyag_v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8nz_v4kd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64554', 'data', 'file=/tmp/tmpoat8y4sf/drgyag_v.json', 'init=/tmp/tmpoat8y4sf/8nz_v4kd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3ajev1n0/prophet_model-20221204101132.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9mrpe7gd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w596g5x3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71274', 'data', 'file=/tmp/tmpoat8y4sf/9mrpe7gd.json', 'init=/tmp/tmpoat8y4sf/w596g5x3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7u8etvbe/prophet_model-20221204101132.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0793koa0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/doc94bh6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47580', 'data', 'file=/tmp/tmpoat8y4sf/0793koa0.json', 'init=/tmp/tmpoat8y4sf/doc94bh6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluyi9bie6/prophet_model-20221204101133.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vq4hatlf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1sj4mrmu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11990', 'data', 'file=/tmp/tmpoat8y4sf/vq4hatlf.json', 'init=/tmp/tmpoat8y4sf/1sj4mrmu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsq3q3qaw/prophet_model-20221204101134.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/79h109j_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3rdodsg8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99279', 'data', 'file=/tmp/tmpoat8y4sf/79h109j_.json', 'init=/tmp/tmpoat8y4sf/3rdodsg8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsx9zya63/prophet_model-20221204101135.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mifx4zl9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g9n91op7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47244', 'data', 'file=/tmp/tmpoat8y4sf/mifx4zl9.json', 'init=/tmp/tmpoat8y4sf/g9n91op7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelocra2b5v/prophet_model-20221204101135.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e72lkiph.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a_r0sp07.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34240', 'data', 'file=/tmp/tmpoat8y4sf/e72lkiph.json', 'init=/tmp/tmpoat8y4sf/a_r0sp07.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7c791hmj/prophet_model-20221204101136.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/heqz_vrr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1681qwil.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47318', 'data', 'file=/tmp/tmpoat8y4sf/heqz_vrr.json', 'init=/tmp/tmpoat8y4sf/1681qwil.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeleyn4tyim/prophet_model-20221204101137.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5hojdpc2.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ejj_nsm1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69367', 'data', 'file=/tmp/tmpoat8y4sf/5hojdpc2.json', 'init=/tmp/tmpoat8y4sf/ejj_nsm1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcol2u3xk/prophet_model-20221204101137.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vfemqw_u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hr_1mv18.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59605', 'data', 'file=/tmp/tmpoat8y4sf/vfemqw_u.json', 'init=/tmp/tmpoat8y4sf/hr_1mv18.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelghdx4yrg/prophet_model-20221204101138.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tkwujn1y.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dwes3i5d.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48228', 'data', 'file=/tmp/tmpoat8y4sf/tkwujn1y.json', 'init=/tmp/tmpoat8y4sf/dwes3i5d.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeld26rabmj/prophet_model-20221204101139.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2metcbcu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/klszn_ks.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53784', 'data', 'file=/tmp/tmpoat8y4sf/2metcbcu.json', 'init=/tmp/tmpoat8y4sf/klszn_ks.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeldlz24_kr/prophet_model-20221204101140.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h_lrd4dm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ylqfeg4j.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=53078', 'data', 'file=/tmp/tmpoat8y4sf/h_lrd4dm.json', 'init=/tmp/tmpoat8y4sf/ylqfeg4j.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb34rou20/prophet_model-20221204101140.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1dfa011f57e344c1b06d26e98f21655d",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3tu4mo1k.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hx_e_ben.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=40136', 'data', 'file=/tmp/tmpoat8y4sf/3tu4mo1k.json', 'init=/tmp/tmpoat8y4sf/hx_e_ben.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6cd72hux/prophet_model-20221204101141.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/adtwugz6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aao9d2t1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=5719', 'data', 'file=/tmp/tmpoat8y4sf/adtwugz6.json', 'init=/tmp/tmpoat8y4sf/aao9d2t1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model277dgxs0/prophet_model-20221204101141.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xoms2h7o.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p4utkq9b.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11319', 'data', 'file=/tmp/tmpoat8y4sf/xoms2h7o.json', 'init=/tmp/tmpoat8y4sf/p4utkq9b.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxczdi6e6/prophet_model-20221204101142.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ctp9bf2d.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_22c3k2q.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2383', 'data', 'file=/tmp/tmpoat8y4sf/ctp9bf2d.json', 'init=/tmp/tmpoat8y4sf/_22c3k2q.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcoc9j5jy/prophet_model-20221204101143.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4b3f26_v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cg1s0_0p.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66345', 'data', 'file=/tmp/tmpoat8y4sf/4b3f26_v.json', 'init=/tmp/tmpoat8y4sf/cg1s0_0p.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model08msfpjs/prophet_model-20221204101143.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nk3vvmni.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cejimp5_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89490', 'data', 'file=/tmp/tmpoat8y4sf/nk3vvmni.json', 'init=/tmp/tmpoat8y4sf/cejimp5_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5bkprx_j/prophet_model-20221204101144.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gmdwj8cb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/y0ewguqi.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=93209', 'data', 'file=/tmp/tmpoat8y4sf/gmdwj8cb.json', 'init=/tmp/tmpoat8y4sf/y0ewguqi.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzgljytou/prophet_model-20221204101145.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p6an48ch.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9blegxjb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94966', 'data', 'file=/tmp/tmpoat8y4sf/p6an48ch.json', 'init=/tmp/tmpoat8y4sf/9blegxjb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkc5ent00/prophet_model-20221204101146.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bo29q79d.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tmxqxete.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27385', 'data', 'file=/tmp/tmpoat8y4sf/bo29q79d.json', 'init=/tmp/tmpoat8y4sf/tmxqxete.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelfd5a8suf/prophet_model-20221204101146.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ne4tbt0t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vjyomcab.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33860', 'data', 'file=/tmp/tmpoat8y4sf/ne4tbt0t.json', 'init=/tmp/tmpoat8y4sf/vjyomcab.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljzrsxzth/prophet_model-20221204101147.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c1h2mx2t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yb9rk8me.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96369', 'data', 'file=/tmp/tmpoat8y4sf/c1h2mx2t.json', 'init=/tmp/tmpoat8y4sf/yb9rk8me.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcopu1b7x/prophet_model-20221204101148.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/shajwh6q.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/v_16b1cq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77187', 'data', 'file=/tmp/tmpoat8y4sf/shajwh6q.json', 'init=/tmp/tmpoat8y4sf/v_16b1cq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqqyvfh53/prophet_model-20221204101148.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/anz70efw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c7i87lh3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87266', 'data', 'file=/tmp/tmpoat8y4sf/anz70efw.json', 'init=/tmp/tmpoat8y4sf/c7i87lh3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbolnftgc/prophet_model-20221204101149.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u62nk4mp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rjcctqfq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3539', 'data', 'file=/tmp/tmpoat8y4sf/u62nk4mp.json', 'init=/tmp/tmpoat8y4sf/rjcctqfq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeln475xonk/prophet_model-20221204101150.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x1axwh5e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jplcmg89.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18612', 'data', 'file=/tmp/tmpoat8y4sf/x1axwh5e.json', 'init=/tmp/tmpoat8y4sf/jplcmg89.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9169qnn0/prophet_model-20221204101150.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2zcqmpx7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/84rou74u.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71122', 'data', 'file=/tmp/tmpoat8y4sf/2zcqmpx7.json', 'init=/tmp/tmpoat8y4sf/84rou74u.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwgyylfmi/prophet_model-20221204101151.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/82iyuxmy.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/brs03zzn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98570', 'data', 'file=/tmp/tmpoat8y4sf/82iyuxmy.json', 'init=/tmp/tmpoat8y4sf/brs03zzn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model58n05mml/prophet_model-20221204101152.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/60am_8_u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i4lbgmmg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76104', 'data', 'file=/tmp/tmpoat8y4sf/60am_8_u.json', 'init=/tmp/tmpoat8y4sf/i4lbgmmg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr585t55l/prophet_model-20221204101152.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/k4qeccz3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5glviyaf.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52507', 'data', 'file=/tmp/tmpoat8y4sf/k4qeccz3.json', 'init=/tmp/tmpoat8y4sf/5glviyaf.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelruplfpp9/prophet_model-20221204101153.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h6pgxswl.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s6s7rmjn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98814', 'data', 'file=/tmp/tmpoat8y4sf/h6pgxswl.json', 'init=/tmp/tmpoat8y4sf/s6s7rmjn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw99n9c55/prophet_model-20221204101154.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fbxchzkn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w853er5u.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86469', 'data', 'file=/tmp/tmpoat8y4sf/fbxchzkn.json', 'init=/tmp/tmpoat8y4sf/w853er5u.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelufekgsj3/prophet_model-20221204101155.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z6g87iu1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vd9dml4a.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78669', 'data', 'file=/tmp/tmpoat8y4sf/z6g87iu1.json', 'init=/tmp/tmpoat8y4sf/vd9dml4a.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4v0dcw84/prophet_model-20221204101156.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/li5w37on.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5290qqno.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61702', 'data', 'file=/tmp/tmpoat8y4sf/li5w37on.json', 'init=/tmp/tmpoat8y4sf/5290qqno.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwri47fbz/prophet_model-20221204101156.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yr_xvfxn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lhkcovqc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34922', 'data', 'file=/tmp/tmpoat8y4sf/yr_xvfxn.json', 'init=/tmp/tmpoat8y4sf/lhkcovqc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelaopb7vhb/prophet_model-20221204101157.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mrqp4whz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f4i04jy_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13169', 'data', 'file=/tmp/tmpoat8y4sf/mrqp4whz.json', 'init=/tmp/tmpoat8y4sf/f4i04jy_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelx45_yrwf/prophet_model-20221204101158.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/daa9vx4w.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cm3t9c4w.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77656', 'data', 'file=/tmp/tmpoat8y4sf/daa9vx4w.json', 'init=/tmp/tmpoat8y4sf/cm3t9c4w.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltgewiv4m/prophet_model-20221204101159.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:11:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:11:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tbv2h3zn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/o2946813.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91939', 'data', 'file=/tmp/tmpoat8y4sf/tbv2h3zn.json', 'init=/tmp/tmpoat8y4sf/o2946813.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6bvlv_t3/prophet_model-20221204101200.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "90ba6705901d49f9a753c1084433a71b",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/olrkq3cp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q37r7xuc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7012', 'data', 'file=/tmp/tmpoat8y4sf/olrkq3cp.json', 'init=/tmp/tmpoat8y4sf/q37r7xuc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelarbkcae8/prophet_model-20221204101200.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/75ztwpkm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/91_nw_xc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89072', 'data', 'file=/tmp/tmpoat8y4sf/75ztwpkm.json', 'init=/tmp/tmpoat8y4sf/91_nw_xc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu7ve79n3/prophet_model-20221204101201.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4gmn5jlj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p55oziw4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2029', 'data', 'file=/tmp/tmpoat8y4sf/4gmn5jlj.json', 'init=/tmp/tmpoat8y4sf/p55oziw4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model329dmii0/prophet_model-20221204101201.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8r8k556b.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iv35mwp4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=52656', 'data', 'file=/tmp/tmpoat8y4sf/8r8k556b.json', 'init=/tmp/tmpoat8y4sf/iv35mwp4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhgdzou__/prophet_model-20221204101202.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t539q7hs.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aut2cg_y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96833', 'data', 'file=/tmp/tmpoat8y4sf/t539q7hs.json', 'init=/tmp/tmpoat8y4sf/aut2cg_y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2q_6325e/prophet_model-20221204101203.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/glawg0_h.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1bvmz316.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16123', 'data', 'file=/tmp/tmpoat8y4sf/glawg0_h.json', 'init=/tmp/tmpoat8y4sf/1bvmz316.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model990lj_qt/prophet_model-20221204101203.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6yrrp84k.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6rtoo5tc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18857', 'data', 'file=/tmp/tmpoat8y4sf/6yrrp84k.json', 'init=/tmp/tmpoat8y4sf/6rtoo5tc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelehlcut6h/prophet_model-20221204101204.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_aq_x1tf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/32srp39d.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14724', 'data', 'file=/tmp/tmpoat8y4sf/_aq_x1tf.json', 'init=/tmp/tmpoat8y4sf/32srp39d.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeld6l0invv/prophet_model-20221204101205.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/k8ej1hjw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2sf96uno.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33239', 'data', 'file=/tmp/tmpoat8y4sf/k8ej1hjw.json', 'init=/tmp/tmpoat8y4sf/2sf96uno.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_22rv76b/prophet_model-20221204101206.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/307bt740.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kap98of4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=39556', 'data', 'file=/tmp/tmpoat8y4sf/307bt740.json', 'init=/tmp/tmpoat8y4sf/kap98of4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloh37wyg5/prophet_model-20221204101207.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w289ikof.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m4b5zhr5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69039', 'data', 'file=/tmp/tmpoat8y4sf/w289ikof.json', 'init=/tmp/tmpoat8y4sf/m4b5zhr5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelunpz6oul/prophet_model-20221204101207.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3fd58u1v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ycfyuget.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6844', 'data', 'file=/tmp/tmpoat8y4sf/3fd58u1v.json', 'init=/tmp/tmpoat8y4sf/ycfyuget.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3yhadr0l/prophet_model-20221204101208.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hathwtfg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g8bjchph.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14175', 'data', 'file=/tmp/tmpoat8y4sf/hathwtfg.json', 'init=/tmp/tmpoat8y4sf/g8bjchph.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2oawv2zx/prophet_model-20221204101209.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/63wux19b.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/svjyf6df.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19416', 'data', 'file=/tmp/tmpoat8y4sf/63wux19b.json', 'init=/tmp/tmpoat8y4sf/svjyf6df.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelcy9si9qg/prophet_model-20221204101209.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/droipfl8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kgjjq0ob.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11452', 'data', 'file=/tmp/tmpoat8y4sf/droipfl8.json', 'init=/tmp/tmpoat8y4sf/kgjjq0ob.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4owbowgv/prophet_model-20221204101210.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ryf0yysq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j7_z7hug.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86381', 'data', 'file=/tmp/tmpoat8y4sf/ryf0yysq.json', 'init=/tmp/tmpoat8y4sf/j7_z7hug.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelioc1zqx2/prophet_model-20221204101211.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vmygxcxu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a0mv4rpe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37446', 'data', 'file=/tmp/tmpoat8y4sf/vmygxcxu.json', 'init=/tmp/tmpoat8y4sf/a0mv4rpe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrls5bmpr/prophet_model-20221204101212.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7nc69hy0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bwd6d31j.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69221', 'data', 'file=/tmp/tmpoat8y4sf/7nc69hy0.json', 'init=/tmp/tmpoat8y4sf/bwd6d31j.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeli6fi1w9_/prophet_model-20221204101212.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7l76y8lc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z_joxf_v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75827', 'data', 'file=/tmp/tmpoat8y4sf/7l76y8lc.json', 'init=/tmp/tmpoat8y4sf/z_joxf_v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkvcmpexr/prophet_model-20221204101213.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4226s5a8.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/18u4w0al.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99014', 'data', 'file=/tmp/tmpoat8y4sf/4226s5a8.json', 'init=/tmp/tmpoat8y4sf/18u4w0al.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9jkdemc0/prophet_model-20221204101214.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/646_m67t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ktwohcao.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65556', 'data', 'file=/tmp/tmpoat8y4sf/646_m67t.json', 'init=/tmp/tmpoat8y4sf/ktwohcao.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelinxau_r8/prophet_model-20221204101215.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/awhh7hiu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ytln73ee.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=49788', 'data', 'file=/tmp/tmpoat8y4sf/awhh7hiu.json', 'init=/tmp/tmpoat8y4sf/ytln73ee.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxibmvhbj/prophet_model-20221204101215.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gm2wcyoh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/so0vqzbb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=39452', 'data', 'file=/tmp/tmpoat8y4sf/gm2wcyoh.json', 'init=/tmp/tmpoat8y4sf/so0vqzbb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellcgybe25/prophet_model-20221204101216.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jlh8g8ou.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7j8job1_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99423', 'data', 'file=/tmp/tmpoat8y4sf/jlh8g8ou.json', 'init=/tmp/tmpoat8y4sf/7j8job1_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelp0qp8rk4/prophet_model-20221204101217.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8ix2hryf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/19vdqmk7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71412', 'data', 'file=/tmp/tmpoat8y4sf/8ix2hryf.json', 'init=/tmp/tmpoat8y4sf/19vdqmk7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelflft6spm/prophet_model-20221204101217.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1q4teyvu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f72gf4ek.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14373', 'data', 'file=/tmp/tmpoat8y4sf/1q4teyvu.json', 'init=/tmp/tmpoat8y4sf/f72gf4ek.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelx1e7gidx/prophet_model-20221204101218.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bfhcyl98.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/420a49u3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16826', 'data', 'file=/tmp/tmpoat8y4sf/bfhcyl98.json', 'init=/tmp/tmpoat8y4sf/420a49u3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljddrnimm/prophet_model-20221204101219.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0671b98281bc4f00bcc92dd5b02b0a37",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0hjdhyw1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p9g9rvks.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57911', 'data', 'file=/tmp/tmpoat8y4sf/0hjdhyw1.json', 'init=/tmp/tmpoat8y4sf/p9g9rvks.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbpiz70rt/prophet_model-20221204101219.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/epu7k18p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ve3n4359.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62875', 'data', 'file=/tmp/tmpoat8y4sf/epu7k18p.json', 'init=/tmp/tmpoat8y4sf/ve3n4359.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnujbos1d/prophet_model-20221204101220.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1llta5dz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dcrpjcrv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36040', 'data', 'file=/tmp/tmpoat8y4sf/1llta5dz.json', 'init=/tmp/tmpoat8y4sf/dcrpjcrv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkir63ypo/prophet_model-20221204101221.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4pn9o5yq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hmotce0m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=20512', 'data', 'file=/tmp/tmpoat8y4sf/4pn9o5yq.json', 'init=/tmp/tmpoat8y4sf/hmotce0m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelazd5coi7/prophet_model-20221204101221.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pruzdwv9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c1x2_drb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24571', 'data', 'file=/tmp/tmpoat8y4sf/pruzdwv9.json', 'init=/tmp/tmpoat8y4sf/c1x2_drb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu1j7k2le/prophet_model-20221204101222.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wjaaws0s.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cvbm69tj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7847', 'data', 'file=/tmp/tmpoat8y4sf/wjaaws0s.json', 'init=/tmp/tmpoat8y4sf/cvbm69tj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelid2f0rey/prophet_model-20221204101223.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/78mqr74l.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hg147imo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88937', 'data', 'file=/tmp/tmpoat8y4sf/78mqr74l.json', 'init=/tmp/tmpoat8y4sf/hg147imo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7r1czgnv/prophet_model-20221204101223.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/phgf4uxt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8ecr4st4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97216', 'data', 'file=/tmp/tmpoat8y4sf/phgf4uxt.json', 'init=/tmp/tmpoat8y4sf/8ecr4st4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyjei6m_p/prophet_model-20221204101224.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3s7wutta.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/haxkfrl9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30963', 'data', 'file=/tmp/tmpoat8y4sf/3s7wutta.json', 'init=/tmp/tmpoat8y4sf/haxkfrl9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelm5k5la2v/prophet_model-20221204101225.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2ff5nott.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5yf32prk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=69702', 'data', 'file=/tmp/tmpoat8y4sf/2ff5nott.json', 'init=/tmp/tmpoat8y4sf/5yf32prk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgie43jbv/prophet_model-20221204101225.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p3zui4ys.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/r3xg4j3x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37822', 'data', 'file=/tmp/tmpoat8y4sf/p3zui4ys.json', 'init=/tmp/tmpoat8y4sf/r3xg4j3x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhnuscbgu/prophet_model-20221204101226.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cn_qdszn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xdzhrtyc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35793', 'data', 'file=/tmp/tmpoat8y4sf/cn_qdszn.json', 'init=/tmp/tmpoat8y4sf/xdzhrtyc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela3x0joy_/prophet_model-20221204101227.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cglmb_4u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f5xoxfe6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14202', 'data', 'file=/tmp/tmpoat8y4sf/cglmb_4u.json', 'init=/tmp/tmpoat8y4sf/f5xoxfe6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modele3p5bs22/prophet_model-20221204101227.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1nri2wle.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rn884_41.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99793', 'data', 'file=/tmp/tmpoat8y4sf/1nri2wle.json', 'init=/tmp/tmpoat8y4sf/rn884_41.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpf9zgb83/prophet_model-20221204101228.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n7_f_is1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iztfhuzk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=1849', 'data', 'file=/tmp/tmpoat8y4sf/n7_f_is1.json', 'init=/tmp/tmpoat8y4sf/iztfhuzk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5vjbju_1/prophet_model-20221204101229.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e5srocue.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/id4n37hw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=42033', 'data', 'file=/tmp/tmpoat8y4sf/e5srocue.json', 'init=/tmp/tmpoat8y4sf/id4n37hw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellgz1ed6u/prophet_model-20221204101230.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/teqovbck.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1u9gbkwa.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31055', 'data', 'file=/tmp/tmpoat8y4sf/teqovbck.json', 'init=/tmp/tmpoat8y4sf/1u9gbkwa.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model13s93vcy/prophet_model-20221204101230.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/krybi3ur.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/crztm5tb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=36381', 'data', 'file=/tmp/tmpoat8y4sf/krybi3ur.json', 'init=/tmp/tmpoat8y4sf/crztm5tb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqhmk0m_f/prophet_model-20221204101231.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ge8hy7cz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zsymz51k.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85644', 'data', 'file=/tmp/tmpoat8y4sf/ge8hy7cz.json', 'init=/tmp/tmpoat8y4sf/zsymz51k.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnz5vrqep/prophet_model-20221204101232.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j7_97ym6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pctxpxbg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90093', 'data', 'file=/tmp/tmpoat8y4sf/j7_97ym6.json', 'init=/tmp/tmpoat8y4sf/pctxpxbg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkph46nfo/prophet_model-20221204101232.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9nqex5ll.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q6lcyfc1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31967', 'data', 'file=/tmp/tmpoat8y4sf/9nqex5ll.json', 'init=/tmp/tmpoat8y4sf/q6lcyfc1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhlrwtw06/prophet_model-20221204101233.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gwtvt1na.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qc8somke.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74936', 'data', 'file=/tmp/tmpoat8y4sf/gwtvt1na.json', 'init=/tmp/tmpoat8y4sf/qc8somke.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1nga551q/prophet_model-20221204101234.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/q5j0lf95.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tbc_5mye.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4789', 'data', 'file=/tmp/tmpoat8y4sf/q5j0lf95.json', 'init=/tmp/tmpoat8y4sf/tbc_5mye.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqngpqni4/prophet_model-20221204101235.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iewvskuk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rzyru9vb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73920', 'data', 'file=/tmp/tmpoat8y4sf/iewvskuk.json', 'init=/tmp/tmpoat8y4sf/rzyru9vb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelksjvu7kc/prophet_model-20221204101236.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tbm7yd4n.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nyisaz3i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7806', 'data', 'file=/tmp/tmpoat8y4sf/tbm7yd4n.json', 'init=/tmp/tmpoat8y4sf/nyisaz3i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk721oppn/prophet_model-20221204101236.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6tk4f0n6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p5o92_sb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83374', 'data', 'file=/tmp/tmpoat8y4sf/6tk4f0n6.json', 'init=/tmp/tmpoat8y4sf/p5o92_sb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelny7jl6rr/prophet_model-20221204101237.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/115mf0ru.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g215lmzu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33968', 'data', 'file=/tmp/tmpoat8y4sf/115mf0ru.json', 'init=/tmp/tmpoat8y4sf/g215lmzu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelifc_no1r/prophet_model-20221204101238.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "60708e0d38184a428bd875d51d5511a8",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4im5aucd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mctxjd21.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30645', 'data', 'file=/tmp/tmpoat8y4sf/4im5aucd.json', 'init=/tmp/tmpoat8y4sf/mctxjd21.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model58erupnx/prophet_model-20221204101238.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/let5ygej.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ns8hl0si.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11949', 'data', 'file=/tmp/tmpoat8y4sf/let5ygej.json', 'init=/tmp/tmpoat8y4sf/ns8hl0si.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modely6le42aj/prophet_model-20221204101239.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zpw2qr3e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6hh_t2wg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66923', 'data', 'file=/tmp/tmpoat8y4sf/zpw2qr3e.json', 'init=/tmp/tmpoat8y4sf/6hh_t2wg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrzt6aiqs/prophet_model-20221204101240.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/am2_78qx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4tmim42g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34039', 'data', 'file=/tmp/tmpoat8y4sf/am2_78qx.json', 'init=/tmp/tmpoat8y4sf/4tmim42g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbf6z7u2y/prophet_model-20221204101241.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lzq7m450.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2s6twyvo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79247', 'data', 'file=/tmp/tmpoat8y4sf/lzq7m450.json', 'init=/tmp/tmpoat8y4sf/2s6twyvo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9_yyjo01/prophet_model-20221204101241.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xgc7hl2v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nirnjwi0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35609', 'data', 'file=/tmp/tmpoat8y4sf/xgc7hl2v.json', 'init=/tmp/tmpoat8y4sf/nirnjwi0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7grusao9/prophet_model-20221204101242.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fbu0x7qs.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cyer3yw1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25365', 'data', 'file=/tmp/tmpoat8y4sf/fbu0x7qs.json', 'init=/tmp/tmpoat8y4sf/cyer3yw1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu77ipkie/prophet_model-20221204101243.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ri_1xkyf.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vvnpo61m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12592', 'data', 'file=/tmp/tmpoat8y4sf/ri_1xkyf.json', 'init=/tmp/tmpoat8y4sf/vvnpo61m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelx4t3bb8m/prophet_model-20221204101243.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8jku3oa4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ztrwm10c.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83933', 'data', 'file=/tmp/tmpoat8y4sf/8jku3oa4.json', 'init=/tmp/tmpoat8y4sf/ztrwm10c.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeli69f7sv7/prophet_model-20221204101244.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7bkyqw_k.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/33cd9h7b.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25077', 'data', 'file=/tmp/tmpoat8y4sf/7bkyqw_k.json', 'init=/tmp/tmpoat8y4sf/33cd9h7b.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelq2s7idw5/prophet_model-20221204101245.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5cwbce7t.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ijs5qk5v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78305', 'data', 'file=/tmp/tmpoat8y4sf/5cwbce7t.json', 'init=/tmp/tmpoat8y4sf/ijs5qk5v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela4oxlab4/prophet_model-20221204101246.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hazfnk_q.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4b5ehcfs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11910', 'data', 'file=/tmp/tmpoat8y4sf/hazfnk_q.json', 'init=/tmp/tmpoat8y4sf/4b5ehcfs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9y5dbyf3/prophet_model-20221204101246.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p0tajwmq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3faxv5iu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9241', 'data', 'file=/tmp/tmpoat8y4sf/p0tajwmq.json', 'init=/tmp/tmpoat8y4sf/3faxv5iu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellz5y24mb/prophet_model-20221204101247.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cchogbru.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z33wm5ib.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=97982', 'data', 'file=/tmp/tmpoat8y4sf/cchogbru.json', 'init=/tmp/tmpoat8y4sf/z33wm5ib.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgm5hxen3/prophet_model-20221204101248.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/np06ux__.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0vxt_cby.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78517', 'data', 'file=/tmp/tmpoat8y4sf/np06ux__.json', 'init=/tmp/tmpoat8y4sf/0vxt_cby.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelya9hqn6w/prophet_model-20221204101249.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kvoqx7ta.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h0utwlvl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=27637', 'data', 'file=/tmp/tmpoat8y4sf/kvoqx7ta.json', 'init=/tmp/tmpoat8y4sf/h0utwlvl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model_gst5y49/prophet_model-20221204101250.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/if05wu0_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4g2igeh_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=14443', 'data', 'file=/tmp/tmpoat8y4sf/if05wu0_.json', 'init=/tmp/tmpoat8y4sf/4g2igeh_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxkgitbnd/prophet_model-20221204101250.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1_oxsxmj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/snoqw3a8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=24210', 'data', 'file=/tmp/tmpoat8y4sf/1_oxsxmj.json', 'init=/tmp/tmpoat8y4sf/snoqw3a8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6rue8aw7/prophet_model-20221204101252.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4smoj972.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oxpp5tgx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=65888', 'data', 'file=/tmp/tmpoat8y4sf/4smoj972.json', 'init=/tmp/tmpoat8y4sf/oxpp5tgx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4x884e52/prophet_model-20221204101253.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iyb4dx16.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yugsslj9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84275', 'data', 'file=/tmp/tmpoat8y4sf/iyb4dx16.json', 'init=/tmp/tmpoat8y4sf/yugsslj9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3_e7v1ud/prophet_model-20221204101253.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kukrxvt0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dt40ct9q.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75219', 'data', 'file=/tmp/tmpoat8y4sf/kukrxvt0.json', 'init=/tmp/tmpoat8y4sf/dt40ct9q.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliyhsc819/prophet_model-20221204101254.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h2srlnuu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tq2i5bi4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=46079', 'data', 'file=/tmp/tmpoat8y4sf/h2srlnuu.json', 'init=/tmp/tmpoat8y4sf/tq2i5bi4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelomysrvuw/prophet_model-20221204101255.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vppj2twm.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l5_wkub4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=59909', 'data', 'file=/tmp/tmpoat8y4sf/vppj2twm.json', 'init=/tmp/tmpoat8y4sf/l5_wkub4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model9hmbbm5n/prophet_model-20221204101256.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/auiebnbs.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/53w3xw3n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35102', 'data', 'file=/tmp/tmpoat8y4sf/auiebnbs.json', 'init=/tmp/tmpoat8y4sf/53w3xw3n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelx44jjkfr/prophet_model-20221204101256.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/85ox88oc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8xxzm36z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75429', 'data', 'file=/tmp/tmpoat8y4sf/85ox88oc.json', 'init=/tmp/tmpoat8y4sf/8xxzm36z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzhpqu_r2/prophet_model-20221204101257.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/63z99tcj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/orj740na.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12771', 'data', 'file=/tmp/tmpoat8y4sf/63z99tcj.json', 'init=/tmp/tmpoat8y4sf/orj740na.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbfhaj_kp/prophet_model-20221204101258.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/abij0fbi.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5moevfnp.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=77287', 'data', 'file=/tmp/tmpoat8y4sf/abij0fbi.json', 'init=/tmp/tmpoat8y4sf/5moevfnp.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxz911m1g/prophet_model-20221204101259.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "eacf15826a464c0391a6b3fbb2ea7c22",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hyqyzw1f.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/txh5rrkh.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48081', 'data', 'file=/tmp/tmpoat8y4sf/hyqyzw1f.json', 'init=/tmp/tmpoat8y4sf/txh5rrkh.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model93ax0e1s/prophet_model-20221204101259.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:12:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:12:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0fmfls23.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nyvtg87e.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72466', 'data', 'file=/tmp/tmpoat8y4sf/0fmfls23.json', 'init=/tmp/tmpoat8y4sf/nyvtg87e.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkwu5jfx4/prophet_model-20221204101300.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l0q65nt1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t1f7i2df.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=84910', 'data', 'file=/tmp/tmpoat8y4sf/l0q65nt1.json', 'init=/tmp/tmpoat8y4sf/t1f7i2df.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzhatw247/prophet_model-20221204101301.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/es3ih3en.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nxmzmh3y.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=18051', 'data', 'file=/tmp/tmpoat8y4sf/es3ih3en.json', 'init=/tmp/tmpoat8y4sf/nxmzmh3y.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model12v8ag1x/prophet_model-20221204101301.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/oba7a278.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jsp5in9r.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=63323', 'data', 'file=/tmp/tmpoat8y4sf/oba7a278.json', 'init=/tmp/tmpoat8y4sf/jsp5in9r.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmioryekf/prophet_model-20221204101302.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/owpn0gnr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rcg2tch4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8513', 'data', 'file=/tmp/tmpoat8y4sf/owpn0gnr.json', 'init=/tmp/tmpoat8y4sf/rcg2tch4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model3qs_9hmw/prophet_model-20221204101303.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ornmvwsr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ts1aa80g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21398', 'data', 'file=/tmp/tmpoat8y4sf/ornmvwsr.json', 'init=/tmp/tmpoat8y4sf/ts1aa80g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsa7b09aw/prophet_model-20221204101303.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b1ofwo9r.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/boyx5eox.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12709', 'data', 'file=/tmp/tmpoat8y4sf/b1ofwo9r.json', 'init=/tmp/tmpoat8y4sf/boyx5eox.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelauvkewai/prophet_model-20221204101304.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3s7pdygg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zvv4hoko.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7758', 'data', 'file=/tmp/tmpoat8y4sf/3s7pdygg.json', 'init=/tmp/tmpoat8y4sf/zvv4hoko.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbcius8do/prophet_model-20221204101305.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_tyejcfk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xex6zu0n.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44610', 'data', 'file=/tmp/tmpoat8y4sf/_tyejcfk.json', 'init=/tmp/tmpoat8y4sf/xex6zu0n.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model84ln_4bt/prophet_model-20221204101305.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xo70emyw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6cs84g2t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25298', 'data', 'file=/tmp/tmpoat8y4sf/xo70emyw.json', 'init=/tmp/tmpoat8y4sf/6cs84g2t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvoprem8v/prophet_model-20221204101306.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/28i1p93r.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/36dm5frs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55041', 'data', 'file=/tmp/tmpoat8y4sf/28i1p93r.json', 'init=/tmp/tmpoat8y4sf/36dm5frs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5ka0ulj4/prophet_model-20221204101307.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f52s4yoz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ub25hn74.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72373', 'data', 'file=/tmp/tmpoat8y4sf/f52s4yoz.json', 'init=/tmp/tmpoat8y4sf/ub25hn74.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelb_o3fy06/prophet_model-20221204101308.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lrq87p84.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_r7m7myk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58147', 'data', 'file=/tmp/tmpoat8y4sf/lrq87p84.json', 'init=/tmp/tmpoat8y4sf/_r7m7myk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyyvy229t/prophet_model-20221204101308.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pp2pgq39.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cs37qnrn.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45869', 'data', 'file=/tmp/tmpoat8y4sf/pp2pgq39.json', 'init=/tmp/tmpoat8y4sf/cs37qnrn.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelc6zo58cj/prophet_model-20221204101309.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/27h23__m.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g93utw1x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15023', 'data', 'file=/tmp/tmpoat8y4sf/27h23__m.json', 'init=/tmp/tmpoat8y4sf/g93utw1x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2divqzy7/prophet_model-20221204101310.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3708u8rh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g0ead30s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74706', 'data', 'file=/tmp/tmpoat8y4sf/3708u8rh.json', 'init=/tmp/tmpoat8y4sf/g0ead30s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxzrbl6s6/prophet_model-20221204101310.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/c20vzork.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pcqm6nre.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81941', 'data', 'file=/tmp/tmpoat8y4sf/c20vzork.json', 'init=/tmp/tmpoat8y4sf/pcqm6nre.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelz1ma9a00/prophet_model-20221204101311.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8iy369or.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g7d476m9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=48964', 'data', 'file=/tmp/tmpoat8y4sf/8iy369or.json', 'init=/tmp/tmpoat8y4sf/g7d476m9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model787wijv9/prophet_model-20221204101312.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ubi8piyr.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/vhex_r7e.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35973', 'data', 'file=/tmp/tmpoat8y4sf/ubi8piyr.json', 'init=/tmp/tmpoat8y4sf/vhex_r7e.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4jbzouij/prophet_model-20221204101313.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gbu854v4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/00nz1ivs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6251', 'data', 'file=/tmp/tmpoat8y4sf/gbu854v4.json', 'init=/tmp/tmpoat8y4sf/00nz1ivs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelj6y9twae/prophet_model-20221204101314.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/drinag1j.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xl2rctzj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45170', 'data', 'file=/tmp/tmpoat8y4sf/drinag1j.json', 'init=/tmp/tmpoat8y4sf/xl2rctzj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model96lksbse/prophet_model-20221204101314.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/g476bij5.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/v5eduu8x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86683', 'data', 'file=/tmp/tmpoat8y4sf/g476bij5.json', 'init=/tmp/tmpoat8y4sf/v5eduu8x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modell1dupx7z/prophet_model-20221204101315.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0eqb_hap.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0z9b9j0z.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=76876', 'data', 'file=/tmp/tmpoat8y4sf/0eqb_hap.json', 'init=/tmp/tmpoat8y4sf/0z9b9j0z.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmbnuf12e/prophet_model-20221204101316.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6pbcd32e.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pago9xve.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86825', 'data', 'file=/tmp/tmpoat8y4sf/6pbcd32e.json', 'init=/tmp/tmpoat8y4sf/pago9xve.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelwbgbtpra/prophet_model-20221204101317.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4u3ymuiz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hh8hhhgo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31711', 'data', 'file=/tmp/tmpoat8y4sf/4u3ymuiz.json', 'init=/tmp/tmpoat8y4sf/hh8hhhgo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliwhub396/prophet_model-20221204101317.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_0e19nfv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2am8an0c.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=47502', 'data', 'file=/tmp/tmpoat8y4sf/_0e19nfv.json', 'init=/tmp/tmpoat8y4sf/2am8an0c.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk73rq20b/prophet_model-20221204101318.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "afc34571f3bf4ecba001b31d0bd8e82b",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cv8g13wa.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/euj11ks4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13652', 'data', 'file=/tmp/tmpoat8y4sf/cv8g13wa.json', 'init=/tmp/tmpoat8y4sf/euj11ks4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf_twhq92/prophet_model-20221204101318.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gzh6gm6h.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/b8b81kpd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=26213', 'data', 'file=/tmp/tmpoat8y4sf/gzh6gm6h.json', 'init=/tmp/tmpoat8y4sf/b8b81kpd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2602o3nu/prophet_model-20221204101319.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aa8jc8ht.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8_tmol60.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=87541', 'data', 'file=/tmp/tmpoat8y4sf/aa8jc8ht.json', 'init=/tmp/tmpoat8y4sf/8_tmol60.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxkgzg8ux/prophet_model-20221204101320.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yuhudiu4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pac35dd0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10486', 'data', 'file=/tmp/tmpoat8y4sf/yuhudiu4.json', 'init=/tmp/tmpoat8y4sf/pac35dd0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljjc4rl6o/prophet_model-20221204101321.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2pqrqqxj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/liccgvxt.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55701', 'data', 'file=/tmp/tmpoat8y4sf/2pqrqqxj.json', 'init=/tmp/tmpoat8y4sf/liccgvxt.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model889mq36j/prophet_model-20221204101321.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lt82excb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zs46x3ph.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55659', 'data', 'file=/tmp/tmpoat8y4sf/lt82excb.json', 'init=/tmp/tmpoat8y4sf/zs46x3ph.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw065xw3a/prophet_model-20221204101322.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hq4wv10y.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a33ag4be.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96351', 'data', 'file=/tmp/tmpoat8y4sf/hq4wv10y.json', 'init=/tmp/tmpoat8y4sf/a33ag4be.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnrpoa3ur/prophet_model-20221204101323.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lc9kcxup.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4rgz5my6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51629', 'data', 'file=/tmp/tmpoat8y4sf/lc9kcxup.json', 'init=/tmp/tmpoat8y4sf/4rgz5my6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model12gl53al/prophet_model-20221204101323.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/83m5nrt4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fx4g51tg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55775', 'data', 'file=/tmp/tmpoat8y4sf/83m5nrt4.json', 'init=/tmp/tmpoat8y4sf/fx4g51tg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0dol79w8/prophet_model-20221204101324.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/673ynoll.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x6xteazd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31502', 'data', 'file=/tmp/tmpoat8y4sf/673ynoll.json', 'init=/tmp/tmpoat8y4sf/x6xteazd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnwgpma66/prophet_model-20221204101325.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7lm6021g.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xyhbd4du.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86732', 'data', 'file=/tmp/tmpoat8y4sf/7lm6021g.json', 'init=/tmp/tmpoat8y4sf/xyhbd4du.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt4x50u6q/prophet_model-20221204101325.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pzf8ry2c.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/btbg0noe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86612', 'data', 'file=/tmp/tmpoat8y4sf/pzf8ry2c.json', 'init=/tmp/tmpoat8y4sf/btbg0noe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelaeevvak8/prophet_model-20221204101326.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f49kb2wq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3y2vaelc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71610', 'data', 'file=/tmp/tmpoat8y4sf/f49kb2wq.json', 'init=/tmp/tmpoat8y4sf/3y2vaelc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpb6289rb/prophet_model-20221204101327.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a3hklri0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/cz_l1s8i.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16106', 'data', 'file=/tmp/tmpoat8y4sf/a3hklri0.json', 'init=/tmp/tmpoat8y4sf/cz_l1s8i.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2t4_p7zh/prophet_model-20221204101328.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d9cm_6r9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7qqm14y_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=12843', 'data', 'file=/tmp/tmpoat8y4sf/d9cm_6r9.json', 'init=/tmp/tmpoat8y4sf/7qqm14y_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloyxoy3ee/prophet_model-20221204101328.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8ha4fe8h.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3wm997gc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96543', 'data', 'file=/tmp/tmpoat8y4sf/8ha4fe8h.json', 'init=/tmp/tmpoat8y4sf/3wm997gc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5pey1kih/prophet_model-20221204101329.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xux3h9mb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f5ulldbd.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=9059', 'data', 'file=/tmp/tmpoat8y4sf/xux3h9mb.json', 'init=/tmp/tmpoat8y4sf/f5ulldbd.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluvox089u/prophet_model-20221204101330.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uddf6jyc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/p6mthfsj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10155', 'data', 'file=/tmp/tmpoat8y4sf/uddf6jyc.json', 'init=/tmp/tmpoat8y4sf/p6mthfsj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzutt0q3k/prophet_model-20221204101331.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aid1w7e4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/1a4skner.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4101', 'data', 'file=/tmp/tmpoat8y4sf/aid1w7e4.json', 'init=/tmp/tmpoat8y4sf/1a4skner.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnh4kv9hu/prophet_model-20221204101331.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/eny1lj2p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jbmybzo_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=3415', 'data', 'file=/tmp/tmpoat8y4sf/eny1lj2p.json', 'init=/tmp/tmpoat8y4sf/jbmybzo_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk4ioaq5p/prophet_model-20221204101332.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w6dza7rk.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ngusejon.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13413', 'data', 'file=/tmp/tmpoat8y4sf/w6dza7rk.json', 'init=/tmp/tmpoat8y4sf/ngusejon.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelu6lr4ats/prophet_model-20221204101333.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tr58qayc.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gmjkr6_r.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=4515', 'data', 'file=/tmp/tmpoat8y4sf/tr58qayc.json', 'init=/tmp/tmpoat8y4sf/gmjkr6_r.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw6isyekv/prophet_model-20221204101333.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_bcixoy6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9s71iup5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21436', 'data', 'file=/tmp/tmpoat8y4sf/_bcixoy6.json', 'init=/tmp/tmpoat8y4sf/9s71iup5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelop11cl7q/prophet_model-20221204101334.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tkltgujp.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/nq2rlms1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32423', 'data', 'file=/tmp/tmpoat8y4sf/tkltgujp.json', 'init=/tmp/tmpoat8y4sf/nq2rlms1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt4y5f2pl/prophet_model-20221204101335.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:35 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yky2121u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5z8exj02.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=60322', 'data', 'file=/tmp/tmpoat8y4sf/yky2121u.json', 'init=/tmp/tmpoat8y4sf/5z8exj02.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyzw26j3a/prophet_model-20221204101336.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:36 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fwyjw83i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iqy6i670.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15536', 'data', 'file=/tmp/tmpoat8y4sf/fwyjw83i.json', 'init=/tmp/tmpoat8y4sf/iqy6i670.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqgise25o/prophet_model-20221204101336.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:36 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:37 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9u899wpb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9huw6m6g.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=51664', 'data', 'file=/tmp/tmpoat8y4sf/9u899wpb.json', 'init=/tmp/tmpoat8y4sf/9huw6m6g.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model77fcns5l/prophet_model-20221204101337.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:37 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "208a269fa0ef40c5a82a1696e1fa5d0f",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ujvm52cu.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kitauv7k.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=73881', 'data', 'file=/tmp/tmpoat8y4sf/ujvm52cu.json', 'init=/tmp/tmpoat8y4sf/kitauv7k.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelpoamodht/prophet_model-20221204101338.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:38 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:38 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5kfvkg2x.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uqbmu26v.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=67016', 'data', 'file=/tmp/tmpoat8y4sf/5kfvkg2x.json', 'init=/tmp/tmpoat8y4sf/uqbmu26v.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeliq_56j6n/prophet_model-20221204101339.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/f_oxtf2a.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2mo9u024.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=60985', 'data', 'file=/tmp/tmpoat8y4sf/f_oxtf2a.json', 'init=/tmp/tmpoat8y4sf/2mo9u024.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrcimfuwy/prophet_model-20221204101339.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:39 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:39 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/crzm7czi.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ujljxygb.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57879', 'data', 'file=/tmp/tmpoat8y4sf/crzm7czi.json', 'init=/tmp/tmpoat8y4sf/ujljxygb.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelegopctp1/prophet_model-20221204101340.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:40 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:40 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pzwd2nti.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lbpkzrso.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=99871', 'data', 'file=/tmp/tmpoat8y4sf/pzwd2nti.json', 'init=/tmp/tmpoat8y4sf/lbpkzrso.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5lsxjtsl/prophet_model-20221204101341.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qacj01l3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sfq3pxxv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98652', 'data', 'file=/tmp/tmpoat8y4sf/qacj01l3.json', 'init=/tmp/tmpoat8y4sf/sfq3pxxv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelz4eszmrt/prophet_model-20221204101341.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:41 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:41 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kwhyz3r6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/j_jxk2ra.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35732', 'data', 'file=/tmp/tmpoat8y4sf/kwhyz3r6.json', 'init=/tmp/tmpoat8y4sf/j_jxk2ra.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelw4igsax2/prophet_model-20221204101342.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:42 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:42 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_f7x7see.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/plmuh2ip.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=33183', 'data', 'file=/tmp/tmpoat8y4sf/_f7x7see.json', 'init=/tmp/tmpoat8y4sf/plmuh2ip.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1mtxm61k/prophet_model-20221204101343.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:43 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:43 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rvgyjaie.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h5dhx6jg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90409', 'data', 'file=/tmp/tmpoat8y4sf/rvgyjaie.json', 'init=/tmp/tmpoat8y4sf/h5dhx6jg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0u14ul6v/prophet_model-20221204101344.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rk4qstx7.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/k42grz_w.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=11218', 'data', 'file=/tmp/tmpoat8y4sf/rk4qstx7.json', 'init=/tmp/tmpoat8y4sf/k42grz_w.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeld7b3c_05/prophet_model-20221204101344.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:44 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:44 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i12bjp5k.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_agawnt3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=54302', 'data', 'file=/tmp/tmpoat8y4sf/i12bjp5k.json', 'init=/tmp/tmpoat8y4sf/_agawnt3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf3r_wy9x/prophet_model-20221204101345.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:45 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:45 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a6wo80ga.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xgcyj50x.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=79131', 'data', 'file=/tmp/tmpoat8y4sf/a6wo80ga.json', 'init=/tmp/tmpoat8y4sf/xgcyj50x.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqwwzib8f/prophet_model-20221204101346.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:46 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9n7xybqv.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m5quhatu.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30368', 'data', 'file=/tmp/tmpoat8y4sf/9n7xybqv.json', 'init=/tmp/tmpoat8y4sf/m5quhatu.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5n4xp6w6/prophet_model-20221204101346.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:46 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/e9ttcq4g.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ltz1ox7u.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91912', 'data', 'file=/tmp/tmpoat8y4sf/e9ttcq4g.json', 'init=/tmp/tmpoat8y4sf/ltz1ox7u.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelh1oxnqvv/prophet_model-20221204101347.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:47 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:47 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a4fm0t6c.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8u9drdbc.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=94844', 'data', 'file=/tmp/tmpoat8y4sf/a4fm0t6c.json', 'init=/tmp/tmpoat8y4sf/8u9drdbc.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelgsznatn4/prophet_model-20221204101348.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:48 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:48 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jsz0yhnd.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/8vi5s9co.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=30593', 'data', 'file=/tmp/tmpoat8y4sf/jsz0yhnd.json', 'init=/tmp/tmpoat8y4sf/8vi5s9co.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzq5g6vb1/prophet_model-20221204101349.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5j4y9iyg.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xd7qpp_l.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28774', 'data', 'file=/tmp/tmpoat8y4sf/5j4y9iyg.json', 'init=/tmp/tmpoat8y4sf/xd7qpp_l.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8umz_3pr/prophet_model-20221204101349.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:49 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:49 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ldegz5su.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h0h5wurj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=89672', 'data', 'file=/tmp/tmpoat8y4sf/ldegz5su.json', 'init=/tmp/tmpoat8y4sf/h0h5wurj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelzx5rrzpk/prophet_model-20221204101350.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:50 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:50 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pesw3qml.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/t780z1z9.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=62469', 'data', 'file=/tmp/tmpoat8y4sf/pesw3qml.json', 'init=/tmp/tmpoat8y4sf/t780z1z9.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelkfvgd4e2/prophet_model-20221204101351.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:51 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:51 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ucgpnx88.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bqlgkxci.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=98598', 'data', 'file=/tmp/tmpoat8y4sf/ucgpnx88.json', 'init=/tmp/tmpoat8y4sf/bqlgkxci.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model4demx8kq/prophet_model-20221204101352.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_bap3twz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/4v4mscca.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45312', 'data', 'file=/tmp/tmpoat8y4sf/_bap3twz.json', 'init=/tmp/tmpoat8y4sf/4v4mscca.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model2v3s9zg6/prophet_model-20221204101352.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:52 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:52 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ykyu0uuy.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/moan_2_1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55949', 'data', 'file=/tmp/tmpoat8y4sf/ykyu0uuy.json', 'init=/tmp/tmpoat8y4sf/moan_2_1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modele3050gl8/prophet_model-20221204101353.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:53 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:53 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/l8bdk1se.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rvi0nrdr.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=32497', 'data', 'file=/tmp/tmpoat8y4sf/l8bdk1se.json', 'init=/tmp/tmpoat8y4sf/rvi0nrdr.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqi18vjqc/prophet_model-20221204101354.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/grh3qo1q.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ag07hrom.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=88996', 'data', 'file=/tmp/tmpoat8y4sf/grh3qo1q.json', 'init=/tmp/tmpoat8y4sf/ag07hrom.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modela1ud0jde/prophet_model-20221204101354.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:54 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:54 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/uc7em32i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zjn1f2vj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44280', 'data', 'file=/tmp/tmpoat8y4sf/uc7em32i.json', 'init=/tmp/tmpoat8y4sf/zjn1f2vj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljj89v4jw/prophet_model-20221204101355.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:55 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:55 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u4xwke55.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5nnh5dd5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=15311', 'data', 'file=/tmp/tmpoat8y4sf/u4xwke55.json', 'init=/tmp/tmpoat8y4sf/5nnh5dd5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelk1kearp9/prophet_model-20221204101356.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:56 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:56 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2qbuyzq1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fcsyp6ft.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=45997', 'data', 'file=/tmp/tmpoat8y4sf/2qbuyzq1.json', 'init=/tmp/tmpoat8y4sf/fcsyp6ft.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0dnqze4d/prophet_model-20221204101357.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f747440643e349c0b798c6be5e7d5e7c",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ujn7t1ty.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/a1alujes.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19963', 'data', 'file=/tmp/tmpoat8y4sf/ujn7t1ty.json', 'init=/tmp/tmpoat8y4sf/a1alujes.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnwy_m2kl/prophet_model-20221204101357.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:57 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:57 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9p0xlpue.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ic58i0w6.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=96015', 'data', 'file=/tmp/tmpoat8y4sf/9p0xlpue.json', 'init=/tmp/tmpoat8y4sf/ic58i0w6.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model61wmy1na/prophet_model-20221204101358.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:58 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:58 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/batkd7rw.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/r72ep_vj.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=8096', 'data', 'file=/tmp/tmpoat8y4sf/batkd7rw.json', 'init=/tmp/tmpoat8y4sf/r72ep_vj.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1ot9oelj/prophet_model-20221204101359.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:13:59 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0abvy6h5.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6qllokr8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=90550', 'data', 'file=/tmp/tmpoat8y4sf/0abvy6h5.json', 'init=/tmp/tmpoat8y4sf/6qllokr8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model57p5zg4t/prophet_model-20221204101359.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:13:59 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_bzspznl.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6jf1igtp.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=58534', 'data', 'file=/tmp/tmpoat8y4sf/_bzspznl.json', 'init=/tmp/tmpoat8y4sf/6jf1igtp.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelmp_s0h4e/prophet_model-20221204101400.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:00 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:00 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/s3_zg9ct.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qzhvwg7m.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=61486', 'data', 'file=/tmp/tmpoat8y4sf/s3_zg9ct.json', 'init=/tmp/tmpoat8y4sf/qzhvwg7m.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelke_cw5pq/prophet_model-20221204101401.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:01 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xvgizp05.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yq7m7sa_.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2127', 'data', 'file=/tmp/tmpoat8y4sf/xvgizp05.json', 'init=/tmp/tmpoat8y4sf/yq7m7sa_.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model5xgczs9u/prophet_model-20221204101401.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:01 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hfsw24sy.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/5ox97fbo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=64743', 'data', 'file=/tmp/tmpoat8y4sf/hfsw24sy.json', 'init=/tmp/tmpoat8y4sf/5ox97fbo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelnd1grfk7/prophet_model-20221204101402.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:02 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:02 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/d_laqvat.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ow8sz1zl.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13688', 'data', 'file=/tmp/tmpoat8y4sf/d_laqvat.json', 'init=/tmp/tmpoat8y4sf/ow8sz1zl.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelujp75jwk/prophet_model-20221204101403.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:03 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:03 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jluhm25c.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/63von_01.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=81586', 'data', 'file=/tmp/tmpoat8y4sf/jluhm25c.json', 'init=/tmp/tmpoat8y4sf/63von_01.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrb9vwyy9/prophet_model-20221204101404.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u3esdmzs.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zhkgdvkv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=44096', 'data', 'file=/tmp/tmpoat8y4sf/u3esdmzs.json', 'init=/tmp/tmpoat8y4sf/zhkgdvkv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model1f8dur0_/prophet_model-20221204101404.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:04 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:04 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gesk3cbj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0wv3v6iv.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50116', 'data', 'file=/tmp/tmpoat8y4sf/gesk3cbj.json', 'init=/tmp/tmpoat8y4sf/0wv3v6iv.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqi5frfis/prophet_model-20221204101405.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:05 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:05 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2pb4q34u.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/mo0b6rav.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=6229', 'data', 'file=/tmp/tmpoat8y4sf/2pb4q34u.json', 'init=/tmp/tmpoat8y4sf/mo0b6rav.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modello1zotnf/prophet_model-20221204101406.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/560pcwrx.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/urlp65qe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=66437', 'data', 'file=/tmp/tmpoat8y4sf/560pcwrx.json', 'init=/tmp/tmpoat8y4sf/urlp65qe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelt44wcd69/prophet_model-20221204101406.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:06 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:06 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fbwdwcrt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/eclfv2h5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86949', 'data', 'file=/tmp/tmpoat8y4sf/fbwdwcrt.json', 'init=/tmp/tmpoat8y4sf/eclfv2h5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsiw9btsd/prophet_model-20221204101407.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:07 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:07 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w94dzgm_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/9wmf8k6t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=57096', 'data', 'file=/tmp/tmpoat8y4sf/w94dzgm_.json', 'init=/tmp/tmpoat8y4sf/9wmf8k6t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7r53njia/prophet_model-20221204101408.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:08 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qesmno7s.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ir_rlvdq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72530', 'data', 'file=/tmp/tmpoat8y4sf/qesmno7s.json', 'init=/tmp/tmpoat8y4sf/ir_rlvdq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelr71uisik/prophet_model-20221204101408.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:08 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/idrszxl_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/0m3is0eq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=10368', 'data', 'file=/tmp/tmpoat8y4sf/idrszxl_.json', 'init=/tmp/tmpoat8y4sf/0m3is0eq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqx5ze8s0/prophet_model-20221204101409.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:09 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:09 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/h8jz2qc1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xpnt9a5t.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37339', 'data', 'file=/tmp/tmpoat8y4sf/h8jz2qc1.json', 'init=/tmp/tmpoat8y4sf/xpnt9a5t.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model83hca0eo/prophet_model-20221204101410.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:10 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:10 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/30pcsk8i.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pkif3eyo.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50636', 'data', 'file=/tmp/tmpoat8y4sf/30pcsk8i.json', 'init=/tmp/tmpoat8y4sf/pkif3eyo.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelq2ono6kv/prophet_model-20221204101411.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:11 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pu1ycbvh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bz4y9tjg.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=7209', 'data', 'file=/tmp/tmpoat8y4sf/pu1ycbvh.json', 'init=/tmp/tmpoat8y4sf/bz4y9tjg.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelsar4u7ij/prophet_model-20221204101411.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:11 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/bgxr550z.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x5kjicw5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=25249', 'data', 'file=/tmp/tmpoat8y4sf/bgxr550z.json', 'init=/tmp/tmpoat8y4sf/x5kjicw5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelbtkeh4ll/prophet_model-20221204101412.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:12 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:12 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ps79ss9v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x0ouf6_h.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=70821', 'data', 'file=/tmp/tmpoat8y4sf/ps79ss9v.json', 'init=/tmp/tmpoat8y4sf/x0ouf6_h.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltrc45lco/prophet_model-20221204101413.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:13 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:13 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/n5r0e0r0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/paea60bz.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19217', 'data', 'file=/tmp/tmpoat8y4sf/n5r0e0r0.json', 'init=/tmp/tmpoat8y4sf/paea60bz.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelqs4diuxt/prophet_model-20221204101414.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:14 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:14 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wpnlulv9.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/m2sqsnit.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28890', 'data', 'file=/tmp/tmpoat8y4sf/wpnlulv9.json', 'init=/tmp/tmpoat8y4sf/m2sqsnit.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelq003h010/prophet_model-20221204101415.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fkksftoh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3k1xnyfs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=17497', 'data', 'file=/tmp/tmpoat8y4sf/fkksftoh.json', 'init=/tmp/tmpoat8y4sf/3k1xnyfs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelf8x64fco/prophet_model-20221204101415.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:15 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:15 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "    changepoint_prior_scale  seasonality_prior_scale       rmse\n",
            "0                     0.001                     0.01  30.558345\n",
            "1                     0.001                     0.10  29.782836\n",
            "2                     0.001                     1.00  29.786268\n",
            "3                     0.001                    10.00  29.754296\n",
            "4                     0.010                     0.01  27.464218\n",
            "5                     0.010                     0.10  26.673877\n",
            "6                     0.010                     1.00  26.417649\n",
            "7                     0.010                    10.00  26.527828\n",
            "8                     0.100                     0.01  29.277454\n",
            "9                     0.100                     0.10  28.199794\n",
            "10                    0.100                     1.00  28.237209\n",
            "11                    0.100                    10.00  28.286310\n",
            "12                    0.500                     0.01  28.649825\n",
            "13                    0.500                     0.10  27.703147\n",
            "14                    0.500                     1.00  27.687107\n",
            "15                    0.500                    10.00  27.729795\n"
          ]
        }
      ],
      "source": [
        "for params in all_params:\n",
        "    model = Prophet(**params).fit(df_burger)  # Fit model with given params\n",
        "    df_cv = cross_validation(model, \n",
        "                             horizon=\"30 days\",\n",
        "                             period='15 days', #shift - moving windows\n",
        "                             initial='150 days', \n",
        "                             )\n",
        "    \n",
        "    df_performance = performance_metrics(df_cv, rolling_window=1)\n",
        "    rmses.append(df_performance['rmse'].values[0])\n",
        "\n",
        "tuning_results = pd.DataFrame(all_params)\n",
        "tuning_results['rmse'] = rmses\n",
        "print(tuning_results)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-BQd849iSFxc",
        "outputId": "a6271bdb-4d0b-4cc6-8907-15244fedf3bb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'changepoint_prior_scale': 0.01, 'seasonality_prior_scale': 1.0}\n"
          ]
        }
      ],
      "source": [
        "best_params = all_params[np.argmin(rmses)]\n",
        "print(best_params)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r6QFLQeTWMQE",
        "outputId": "0907bd86-2dce-47b0-f50f-01f22c7c8459"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this.\n",
            "INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jk3zj3j6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/18f5l4b5.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=19088', 'data', 'file=/tmp/tmpoat8y4sf/jk3zj3j6.json', 'init=/tmp/tmpoat8y4sf/18f5l4b5.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model7o99hi53/prophet_model-20221204101416.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:16 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:16 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<prophet.forecaster.Prophet at 0x7f3398d21c10>"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model_tuned = Prophet(seasonality_mode='multiplicative', \n",
        "            interval_width=0.95,\n",
        "            changepoint_prior_scale= 0.01, \n",
        "            seasonality_prior_scale= 1.0,)\n",
        "model_tuned.fit(df_burger)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "debf9722b49e4db78ba18b4d1247fcd7",
            "3c1e499bf997452f83a058722e83f966",
            "b501bb65a11a40beab8f85945d708e27",
            "2bc838b5ba204e90b2820902d5438014",
            "cc41918bb370430da68ac51f110daed3",
            "98f573abdcff4c419536ca74f9d8de51",
            "924d066082864cfa8cda815fd6d28608",
            "809cf6be7c954b8f84213dc1301ed08d",
            "9068982c5d894c358d76c749af52fd1e",
            "cc81925a22934f40b402fe34a3c2a4a1",
            "c4d52415bdac411a80f66e4490dbd931"
          ]
        },
        "id": "iM5TJXWSW7ew",
        "outputId": "6b8ee18a-e4f1-4f1c-b017-17f256c7a9fd"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:prophet:Making 26 forecasts with cutoffs between 2021-10-13 00:00:00 and 2022-10-23 00:00:00\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "debf9722b49e4db78ba18b4d1247fcd7",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/26 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/90m_6f70.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tg5uyumq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=74189', 'data', 'file=/tmp/tmpoat8y4sf/90m_6f70.json', 'init=/tmp/tmpoat8y4sf/tg5uyumq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeluajuh_vj/prophet_model-20221204101416.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "10:14:17 - cmdstanpy - ERROR - Chain [1] error: error during processing Communication error on send\n",
            "ERROR:cmdstanpy:Chain [1] error: error during processing Communication error on send\n",
            "WARNING:prophet.models:Optimization terminated abnormally. Falling back to Newton.\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fkv3kxgz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/r3aqohys.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=83184', 'data', 'file=/tmp/tmpoat8y4sf/fkv3kxgz.json', 'init=/tmp/tmpoat8y4sf/r3aqohys.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelopxkzqc7/prophet_model-20221204101417.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w92zmvix.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fu20sewi.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=75692', 'data', 'file=/tmp/tmpoat8y4sf/w92zmvix.json', 'init=/tmp/tmpoat8y4sf/fu20sewi.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeloippg2dw/prophet_model-20221204101417.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:17 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ti2f5kpb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x1v68za0.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=31638', 'data', 'file=/tmp/tmpoat8y4sf/ti2f5kpb.json', 'init=/tmp/tmpoat8y4sf/x1v68za0.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelusvnc9d4/prophet_model-20221204101418.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:18 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:18 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/tpy_1l0v.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/dz4jgzrq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=85657', 'data', 'file=/tmp/tmpoat8y4sf/tpy_1l0v.json', 'init=/tmp/tmpoat8y4sf/dz4jgzrq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyedu1_fj/prophet_model-20221204101419.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:19 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:19 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/7rfcmhb6.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/330wal2s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=41162', 'data', 'file=/tmp/tmpoat8y4sf/7rfcmhb6.json', 'init=/tmp/tmpoat8y4sf/330wal2s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model690op9k5/prophet_model-20221204101420.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/07j9qrvn.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/iy4o50fx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=34103', 'data', 'file=/tmp/tmpoat8y4sf/07j9qrvn.json', 'init=/tmp/tmpoat8y4sf/iy4o50fx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_models5ysboem/prophet_model-20221204101420.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:20 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:20 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hia03rj3.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xlsslmdm.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16731', 'data', 'file=/tmp/tmpoat8y4sf/hia03rj3.json', 'init=/tmp/tmpoat8y4sf/xlsslmdm.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelah6agkli/prophet_model-20221204101421.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:21 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:21 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kjdva5k_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/06r4suie.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=37641', 'data', 'file=/tmp/tmpoat8y4sf/kjdva5k_.json', 'init=/tmp/tmpoat8y4sf/06r4suie.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model273loeid/prophet_model-20221204101422.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jiqaskbq.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ilzpxr9q.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=29957', 'data', 'file=/tmp/tmpoat8y4sf/jiqaskbq.json', 'init=/tmp/tmpoat8y4sf/ilzpxr9q.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelvo9agznu/prophet_model-20221204101422.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:22 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:22 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/wxc0m63n.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/3kdd2h1s.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35109', 'data', 'file=/tmp/tmpoat8y4sf/wxc0m63n.json', 'init=/tmp/tmpoat8y4sf/3kdd2h1s.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelyzdg1f50/prophet_model-20221204101423.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:23 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:23 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/_3sv72ap.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/trfmnvae.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=78995', 'data', 'file=/tmp/tmpoat8y4sf/_3sv72ap.json', 'init=/tmp/tmpoat8y4sf/trfmnvae.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelxoz079ls/prophet_model-20221204101424.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/6efmdyf_.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/rferc9nw.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=95779', 'data', 'file=/tmp/tmpoat8y4sf/6efmdyf_.json', 'init=/tmp/tmpoat8y4sf/rferc9nw.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelrpii41i3/prophet_model-20221204101424.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:24 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:24 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/ja6agijb.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2yqvavtx.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=35212', 'data', 'file=/tmp/tmpoat8y4sf/ja6agijb.json', 'init=/tmp/tmpoat8y4sf/2yqvavtx.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelh8lbpyqg/prophet_model-20221204101425.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:25 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:25 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sr953nwt.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2onregv3.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=71488', 'data', 'file=/tmp/tmpoat8y4sf/sr953nwt.json', 'init=/tmp/tmpoat8y4sf/2onregv3.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltv58iguc/prophet_model-20221204101426.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:26 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/hf00d5t0.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/yry7w3el.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56146', 'data', 'file=/tmp/tmpoat8y4sf/hf00d5t0.json', 'init=/tmp/tmpoat8y4sf/yry7w3el.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model6rizen9e/prophet_model-20221204101426.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:26 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/u6rwhdis.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/w_xapcvs.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=68210', 'data', 'file=/tmp/tmpoat8y4sf/u6rwhdis.json', 'init=/tmp/tmpoat8y4sf/w_xapcvs.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model8cxk2gfm/prophet_model-20221204101427.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:27 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:27 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/qtwehhoj.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kv2ullzq.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=2843', 'data', 'file=/tmp/tmpoat8y4sf/qtwehhoj.json', 'init=/tmp/tmpoat8y4sf/kv2ullzq.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model0iyyo5v2/prophet_model-20221204101428.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:28 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:28 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/gp80gdia.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/fha39bb4.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=28375', 'data', 'file=/tmp/tmpoat8y4sf/gp80gdia.json', 'init=/tmp/tmpoat8y4sf/fha39bb4.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_model777gltcg/prophet_model-20221204101429.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/lrnfa5ov.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/xzbkedt7.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=16924', 'data', 'file=/tmp/tmpoat8y4sf/lrnfa5ov.json', 'init=/tmp/tmpoat8y4sf/xzbkedt7.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeljykt7pds/prophet_model-20221204101429.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:29 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:29 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/2y64fuw4.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/do15kaa1.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=56299', 'data', 'file=/tmp/tmpoat8y4sf/2y64fuw4.json', 'init=/tmp/tmpoat8y4sf/do15kaa1.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modeltngcpa_f/prophet_model-20221204101430.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:30 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:30 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aagbz_ms.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/z7_sdqms.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=72968', 'data', 'file=/tmp/tmpoat8y4sf/aagbz_ms.json', 'init=/tmp/tmpoat8y4sf/z7_sdqms.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelhlrr7sn7/prophet_model-20221204101431.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:31 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:31 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/jgi6lbx1.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/zt5_rn34.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=86256', 'data', 'file=/tmp/tmpoat8y4sf/jgi6lbx1.json', 'init=/tmp/tmpoat8y4sf/zt5_rn34.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelq3dqlejt/prophet_model-20221204101432.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/kk_7ni8s.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/pwvredhe.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=55496', 'data', 'file=/tmp/tmpoat8y4sf/kk_7ni8s.json', 'init=/tmp/tmpoat8y4sf/pwvredhe.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modellll3bp4i/prophet_model-20221204101432.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:32 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:32 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/v9ai_j8p.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/i9lax9k8.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=50753', 'data', 'file=/tmp/tmpoat8y4sf/v9ai_j8p.json', 'init=/tmp/tmpoat8y4sf/i9lax9k8.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelp5d2yk2u/prophet_model-20221204101433.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:33 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:33 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/giv7k1hh.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/aufjxjxk.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=91024', 'data', 'file=/tmp/tmpoat8y4sf/giv7k1hh.json', 'init=/tmp/tmpoat8y4sf/aufjxjxk.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelde_eg8rj/prophet_model-20221204101434.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:34 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/x9xc90kz.json\n",
            "DEBUG:cmdstanpy:input tempfile: /tmp/tmpoat8y4sf/sd9r6oew.json\n",
            "DEBUG:cmdstanpy:idx 0\n",
            "DEBUG:cmdstanpy:running CmdStan, num_threads: None\n",
            "DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.8/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=21666', 'data', 'file=/tmp/tmpoat8y4sf/x9xc90kz.json', 'init=/tmp/tmpoat8y4sf/sd9r6oew.json', 'output', 'file=/tmp/tmpoat8y4sf/prophet_modelo7yevfao/prophet_model-20221204101434.csv', 'method=optimize', 'algorithm=lbfgs', 'iter=10000']\n",
            "10:14:34 - cmdstanpy - INFO - Chain [1] start processing\n",
            "INFO:cmdstanpy:Chain [1] start processing\n",
            "10:14:35 - cmdstanpy - INFO - Chain [1] done processing\n",
            "INFO:cmdstanpy:Chain [1] done processing\n"
          ]
        }
      ],
      "source": [
        "df_cv_final = cross_validation(model_tuned,\n",
        "                         horizon = \"30 days\",\n",
        "                         period = \"15 days\",\n",
        "                         initial = \"150 days\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "cqolq0AnXOT_",
        "outputId": "3e34d9e7-6cbb-47bf-af40-72954f982d61"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"d7232ff2-5f71-4039-98a1-d2d61887404b\" class=\"plotly-graph-div\" style=\"height:600px; width:900px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d7232ff2-5f71-4039-98a1-d2d61887404b\")) {                    Plotly.newPlot(                        \"d7232ff2-5f71-4039-98a1-d2d61887404b\",                        [{\"marker\":{\"color\":\"black\",\"size\":4},\"mode\":\"markers\",\"name\":\"Actual\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\"],\"y\":[13.0,3.0,58.0,62.0,55.0,74.0,64.0,66.0,34.0,65.0,67.0,48.0,76.0,73.0,48.0,46.0,60.0,78.0,36.0,75.0,63.0,72.0,36.0,78.0,74.0,48.0,75.0,51.0,42.0,48.0,52.0,77.0,86.0,48.0,42.0,62.0,29.0,49.2,46.0,37.0,70.0,58.0,70.0,31.0,47.0,58.0,39.0,57.0,58.0,69.0,33.0,55.0,68.0,72.0,54.0,101.0,70.0,27.0,54.0,77.0,79.0,56.0,33.0,67.0,49.0,80.0,78.0,65.0,70.0,64.0,53.0,40.0,69.0,46.0,21.0,44.0,68.0,47.0,55.0,81.0,48.0,69.0,75.0,63.0,57.0,38.0,42.0,69.0,58.0,52.0,74.0,54.0,41.0,31.0,68.0,63.0,31.0,42.0,55.0,52.0,86.0,83.0,64.0,67.0,75.0,79.0,65.0,81.0,85.8,61.0,30.0,75.0,63.0,49.15,97.0,124.0,54.0,45.0,63.0,51.0,59.0,60.0,110.0,52.0,29.0,56.0,62.0,78.01,70.0,115.0,86.0,23.0,66.0,53.0,23.0,47.0,94.0,51.0,11.0,44.0,16.0,51.0,75.0,95.0,67.0,26.0,33.0,53.0,43.33,63.98,83.86,44.0,24.99,21.97,37.0,39.0,48.93,67.0,52.0,43.0,17.0,38.0,47.0,77.0,70.0,31.0,20.0,31.0,11.0,39.0,57.0,88.97,45.0,11.0,31.0,50.0,40.0,65.98,79.0,43.0,17.99,39.0,42.0,46.11,46.0,60.02,37.0,21.0,22.0,35.0,34.0,42.0,69.12,51.0,35.0,36.59,45.81,39.0,41.0,42.0,44.0,45.05,43.0,49.0,52.0,57.97,72.0,50.0,33.0,68.0,34.98,47.69,37.97,16.0,41.0,39.0,51.0,61.2,54.0,50.0,1.0,27.0,48.0,26.0,43.0,73.97,29.0,33.0,36.98,48.99,38.0,51.0,82.0,48.98,18.0,57.0,38.0,36.0,93.94,97.16,57.0,27.0,35.98,43.0,43.97,73.97,56.97,50.76,18.0,17.0,77.94,43.0,72.0,79.98,26.0,29.0,36.03,89.29,40.97,60.3,83.0,68.02,13.0,13.99,48.0,31.0,60.0,50.97,44.0,30.0,21.0,40.0,41.0,54.98,78.0,34.0,23.98,52.0,47.0,18.6,56.0,75.97,38.0,24.0,72.0,47.0,75.0,68.6,79.0,58.0,37.78,38.97,37.0,40.0,91.02,79.0,41.0,13.0,33.0,46.2,17.99,61.2,68.97,61.2,22.0,38.99,45.0,33.24,51.93,58.0,43.0,42.0,40.0,22.0,66.88,38.0,51.0,43.0,57.98,38.97,34.0,42.68,47.97,65.19,68.38,49.0,21.0,45.17,57.0,81.97,54.0,57.0,15.0,35.97,34.0,33.05,44.0,83.13,26.0,42.0,62.0,52.0,20.0,85.73,99.0,54.98,43.0,17.0,66.97,43.0,64.0,81.0,63.0,24.0,63.97,38.99,40.0,67.0,83.0,51.0,34.0,35.0,71.0,42.12,57.0,80.0,61.0,35.0,70.1,87.16,31.0,43.0,99.0,56.0,28.0,60.93,62.97,39.96,36.97,45.0,38.0,36.0,40.0,73.0,46.0,62.97,39.0,43.0,43.01,44.0,77.0,41.0,36.0,41.0,59.07,39.97,50.0,75.0,88.0,137.0,131.97,110.0,33.97,86.0,125.98,90.91,117.1,98.0,111.0,44.0,106.0,119.01,104.99,106.07,94.97,97.0,48.85,111.97,142.87,103.0,74.0,88.97,106.97,56.0,76.0,116.0,93.08,109.0,69.0,97.0,60.97,115.0,63.0,101.0,104.0,76.0,80.98,139.98,144.97,106.94,34.97,69.0,102.12,85.97,121.0,75.0,123.98,52.97,75.0,83.0,66.97,94.98,101.98,109.0,34.05,89.0,83.0,90.07,96.97,121.97,68.0,34.99,87.0,64.0,60.0,107.95,134.88,138.98,31.0,54.97,70.0,67.13,119.99,118.97,95.0,13.0,36.0,27.0,32.98,46.0,78.64,25.0,14.0,34.99,31.0,31.0,39.0,66.94,51.0,31.0,40.0,20.0,23.0,35.0,79.91,35.0,39.97,23.9,39.0,28.0,61.97,92.97,21.0,29.0,58.24,41.91,22.0,56.98,69.0,52.09,58.97,23.98,23.0,26.0,33.93,65.09,62.2,46.24,27.0,16.0],\"type\":\"scatter\"},{\"hoverinfo\":\"skip\",\"line\":{\"width\":0},\"mode\":\"lines\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[33.975000382823886,26.024575514242695,10.233188431635215,15.971142077863064,3.8447147387998633,20.209503382478744,31.7208279610754,14.68999405705289,-12.823120329791854,8.322084512681386,14.263503820574119,7.4073579158459015,20.591663780014525,28.07956262530997,12.357174655104483,-9.977773783358614,4.7925831888421015,14.416574940389992,4.585179794978542,21.758627073715175,30.802929829768214,11.142148939625057,-8.471410597696778,4.229348998311293,12.485998448536956,5.804948090630594,19.54398430375141,33.91152271640267,17.701041900812964,-9.926857873769308,7.495544652989536,15.640355910481484,4.863296784409698,24.643120939427373,30.49707995102321,14.984183529939504,-11.421394308769038,8.563849006615573,12.788416759408715,2.9971727726202877,23.61991199022866,29.518537447586827,15.579519969825581,-8.81461047748244,9.278148214920831,14.021375823639225,8.61482000443346,19.32694256534011,29.92460908031004,18.209517777995956,-11.235046149776945,7.5362111514109404,15.72751750579803,6.29643578310166,19.55839996393253,30.956811086813342,12.9713657249962,-10.061612429575638,7.860302621208088,7.562668116409738,5.305513661591021,20.280766653389513,31.235601275129635,13.240030546462618,-7.0260892232745675,8.674742385993913,10.405837616142158,5.28385464807431,19.612926727811548,25.919220759356747,10.568494878714333,-10.204634720344854,6.712866230145477,7.989355468505364,5.143873059755147,19.46460811389848,31.835265228681564,14.971696232017095,-11.9440343767904,8.517880481820116,14.15313548096012,4.837877892711328,-12.08719074564439,6.491287588717318,11.9701832656201,2.6097980727064463,21.289713747629833,28.775395657339903,8.381177966730307,-11.950204776564256,8.725516559444475,14.477000440394399,3.412910873039795,20.377708502567124,27.0581748293166,14.544569888409972,-10.030190326684364,8.633778454674795,12.026792736599006,1.3208790117261962,18.020673935973576,26.99023134872441,16.439308026502086,-12.302066946163656,7.202887632468389,11.778923685093067,5.7137352217398005,22.16627200118586,32.52817370609483,12.512973465585583,-10.375804629625005,6.2008504822955555,10.065876444138675,4.687267252817951,17.614710942249744,29.817116747233978,6.751259804882176,-9.98746665240872,3.935289883383258,13.694797288835147,5.740385033100109,17.458006186494675,28.62713996888979,13.693098545826173,-11.961796126825677,5.642384405062792,10.33345590676997,-0.5754890833740655,18.377655576047157,26.85240881945255,12.424540126353286,-13.676285788832931,5.190095237151999,12.979450272794706,6.868473538772905,16.51978248433705,26.593164604160677,11.615432881765301,-12.057669733198214,3.47828350583583,10.467687913938711,4.617462879336043,18.20641843085723,29.04714833124244,11.498894302269651,-14.504444462331252,5.764660429801774,8.800501605550991,4.36427839216396,16.8195281022937,24.304343342940907,14.86347686683973,-10.143583583832415,8.298128170479604,9.598762282438903,6.662216786868363,19.892148257511128,29.77927401781251,14.927906960231885,-12.173411708485272,6.12356077853096,9.415000595427356,2.5350260043004367,19.85298665314664,26.267532864348595,9.541339961628307,-11.47489150666476,4.185232158704627,11.310492900541277,5.973313989437239,17.31194502623234,25.47314572850777,10.239535098413198,-10.869708139632802,0.7652726438275296,10.760525658932925,4.772574934067355,14.174609391663179,29.11941679216606,7.929793084254854,-14.032916140325725,4.367444580338289,11.417073339640321,4.380456322549734,16.89804105561503,28.09613811304769,11.814689995032522,-12.227361067260134,5.347133713116998,8.5891415763272,0.42316584214162506,11.747297488760221,25.84276756244447,8.325929656816788,-9.756522487071582,1.554702740189434,9.923764364469514,-0.46486116528169846,18.338048977018218,26.389640963570137,7.9977369633910085,-12.09478492881358,7.481251782458578,8.052006326822053,4.002739696897173,16.905973848118695,24.415616000941824,10.180358882113676,-9.225023169820917,2.269899836262251,8.883063367804347,4.3443634206219475,17.300169652781648,24.464191768020903,10.273406518911775,-15.947965419117336,3.3626871095699107,9.611558455507044,9.233642314805214,11.731426284152448,-13.212708334714002,2.5794398865271586,7.710930517150677,2.5707968321875185,15.032480630805097,26.53557562780268,12.516909555543348,-11.396002006606373,5.662076483538435,7.793043980044388,2.7322716032264216,16.14343093454879,26.249031939877852,11.895571104752342,-11.198786401919067,4.817109229644764,7.948356414390157,4.573318977108956,15.097384438177583,24.72077815051865,9.308666312430343,-9.240245224696944,6.590388598087819,10.655000053227003,2.0152983656962915,20.47706400772886,25.434772623840576,13.514845082559455,-13.649912330447357,1.0616665574943704,9.757773975267307,-1.3982843578037767,16.599573984215088,25.756119452795318,12.275836544518917,-12.075803253811221,8.103182801053988,11.212738812437117,3.999686222473561,15.858793132530035,24.968320411286346,14.525732072421432,-13.62709054838241,7.683238579891879,9.887178892764718,2.7630099922015114,15.080851473721832,28.818190527314204,10.733914247331455,-11.63004744266365,9.212625038274664,10.856431724685821,3.6268526171476014,21.22254828011324,27.6624599233103,11.418009193532846,-13.917352315243662,2.9550298915640214,14.258342585095365,5.513478246959629,17.633149679713963,27.89313170678914,16.056172374766515,-9.146202474728446,6.7009650240874965,11.824145399373688,5.461394431801241,21.800224897549725,31.110461812550973,13.938415431542092,-12.430844752926564,6.793840024824708,14.748695456766434,5.700361796535937,17.261114259526316,30.20835068704248,13.691193652298375,-8.185061400053014,5.8588404469642965,11.155684045007686,6.639340327654756,19.52813232661733,32.659974987240666,13.483993910541061,-8.233273290483114,3.4018410846250378,15.933944971487978,10.178155669565106,20.344598864039465,29.54310159990412,18.90355481946328,-10.577501595682198,8.611570932853848,16.185541824771548,6.773944647262895,23.360195854544788,30.991907705991522,13.615551955089195,-9.227542920897019,8.017142219000498,14.486125010712021,6.586501612417067,22.95316231665066,33.09911272661464,17.74119032176525,-9.868116672203255,9.027500506742495,16.314588328644103,8.057012471374522,24.196239896777968,32.143924452402615,17.66737792356261,-8.208398360769806,10.194228516520392,15.457908327007582,8.254395967266513,24.257803214731013,32.42414668785235,18.165899870363294,-9.39276524013567,11.035569592447608,17.474168756425627,7.531699514942015,28.51509296658525,34.50920778976161,17.539728321731896,-7.067146210868947,7.603277678366893,17.08872667698502,9.052629053114545,25.071412680733665,35.121502402515496,17.99959219619988,-10.393672918487471,7.915707924778821,19.004936505708816,6.917831346351986,19.819864899691083,31.951890467730184,16.704052744199597,-7.394880373505246,9.606537161506955,18.263403764945085,7.592779992303458,23.012250445538065,35.62855546947747,18.27646955112413,-9.365011526132545,10.648838897654617,15.194523509920375,9.550270825209152,26.432334964661948,38.155953090680335,19.970098010413963,-5.721834125982188,13.46851365621323,16.760769666816458,12.126343505966103,28.385450691990183,36.40246516337866,20.2196498788666,-3.8862442760711717,13.430118405814634,17.855935631471738,12.378685754955603,26.69366697687238,39.87960674963982,20.007231815287106,-4.55726025112407,12.677393076658491,19.86815858948505,13.439404416524493,29.48010351535153,39.0122142615642,20.695754200812264,-4.427057663118696,13.645564203644483,17.519397098786165,11.62400226357925,31.23293929800567,39.28427771236962,19.819066045820644,-6.991934282657335,13.357904950090369,19.265956787256513,11.413461314496839,28.74446220568695,42.12171962593161,23.154107738389094,-5.046317898746646,12.230475815995009,20.90112777106709,12.981866158043628,30.06244669685752,41.953713950450904,20.838065581801352,-4.925082466332063,13.054490702512107,21.449625404251126,14.530931680050909,30.928245054887864,41.91199239093714,20.15177180403963,-5.0365924753589475,13.502113800383457,23.948598865029787,12.37599915035192,25.65612978697277,40.77040589053938,21.89014023506316,-2.965462683003224,14.683585421524466,20.705949968789255,12.78873175652744,14.80712747501578,20.032248616783203,13.040206753276378,32.20785165909999,41.51158108042318,23.397844310732186,-6.671981887959918,16.392486291998875,22.77969298547757,16.19767458068107,32.21389332632907,42.747304928385255,22.210165808548748,-2.7392685948733733,18.900593356011402,22.027008961084984,9.025267018712492,33.508077914733015,43.956098113399115,25.23679092425195,-1.4070740395162593,14.381546160472881,23.147131439926895,15.092463861668138,31.12607205309117,44.872571975524075,22.718722941663685,-5.011347259586183,11.483639588359326,26.285521394352546,12.281327590748226,35.65505781956516,42.63554063167946,25.145376244761074,-3.162850667332099,15.312779441149672,22.622951229230758,15.450598173300442,30.710297328534878,43.30416026401986,25.921348731904462,-2.5494648300416896,14.768873273449563,26.53209189161269,14.460641425654721,33.86662857165426,43.71014767706415,22.172187467249984,-5.423797317819781,16.42958356382979,25.939230162319333,15.942108069578966,32.38557503207082,43.156537523395635,26.424287263080263,-2.525045296559104,17.261782716619653,29.191098998292773,14.18327066084756,31.493746079509467,43.62458001375359,27.855473624272058,-3.7213321848556427,14.511391730737783,22.139207279102642,15.76089347676533,34.87350908975655,46.708537053785584,25.703836198036434,-6.675218539079774,17.526536983292058,23.106792247399333,16.878690426488593,33.26406607375622,44.22511896631856,22.555604343371545,-3.527951663258605,20.210796410350735,23.601626586608646,17.91187391153913,35.1612309728171,46.51376819006203,47.15617794399678,24.361129634746806,-1.7802671428921537,19.15800972677516,24.534383688507994,16.413527345951493,38.05548466336591,49.54647959843448,25.357575633985835,-0.7175592351707605,18.31768387135173,21.953254093698703,16.50497757406589,35.88124960629731,48.07645006621906,30.173969327031624,-3.9456922351855814,15.840290927871246,25.931044582378576,21.52480400704078,38.24633029864496,47.97650169835539,30.301989541995244,-4.511000546388378,19.889378394032114,27.377170197981474,15.711955293369412,37.69309755957514,50.72128248322235,30.89944236228975,-1.2860295678072071,19.302080625450667,26.455432737846774,16.32221693584043],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 114, 178, 0.2)\",\"line\":{\"color\":\"#0072B2\",\"width\":2},\"mode\":\"lines\",\"name\":\"Predicted\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[74.76528521329429,64.73417323024454,50.909472019541575,56.679785902378505,49.112206641244626,64.58095748477294,74.2367349981811,57.990063402210716,33.17799427804259,50.78881400918307,56.54540645983498,48.99572936691737,64.42774173933188,74.06055159314428,57.852390969462625,33.099200695258304,50.6681559989015,56.411027017271856,48.879252092158204,64.2745259928258,73.88436818630701,57.714718534728945,33.02040711114415,50.5474979861762,56.27664757153361,48.76277481508268,64.12131024365733,73.70818477710723,57.57704609860176,32.94161352649808,50.426839972983196,56.14226812583448,48.64629753798387,63.96809449458066,73.5320013661262,57.43937365970249,32.862819939468004,50.30618195497753,56.00788867333428,48.52982025385164,63.814878734710014,73.3558179445279,57.301701213876676,32.784026349271,50.185523933360585,55.87350921814875,48.41334296854719,63.66166297482416,73.17963452289999,57.16402876805096,32.705232759073986,50.06486591170363,55.7391297629298,48.296865683196025,63.50844721484605,73.00345110111232,57.02635632205928,32.6264391687709,49.944207889917784,55.604750307556365,48.18038839774779,63.3552314547459,72.82726767924622,56.8886838761658,32.54764557845469,49.82354986810041,55.47037085216366,48.06391111188509,63.20201569358019,72.65108425567223,56.75101142836762,32.4688519868835,49.70289184397507,55.33599139376991,47.94743382380218,63.048799930029475,72.47490082982101,56.61333897923553,32.39005839478505,49.582233819369115,55.2016119353377,47.830956535700274,32.311264802686644,49.461575794838275,55.067232475849664,47.714479245700055,62.742368399167226,72.12253397238898,56.33799407548434,32.232471206753644,49.3409177634247,54.932853009752165,47.59800195095788,62.589152626861576,71.94635053649573,56.2003216184985,32.153677610160656,49.2202597320266,54.79847354369281,47.481524656230626,62.4359368545855,71.77016710199234,56.06264916369727,32.074884015456,49.09960170442651,54.664094082926084,47.36504736701046,62.28272109078878,71.59398367589677,55.92497671435748,31.996090423238982,48.9789436796551,54.52971462431067,47.248570078751904,62.12950532691795,71.41780024977231,55.78730426501836,31.917296830775946,48.85828565414999,54.39533516436547,47.13209278891498,61.97628956057158,71.24161682012492,55.64963181245217,31.83850323671259,48.73762762660983,54.26095570260109,47.01561549792693,61.82307379319932,71.06543338988772,55.5119593600086,31.75970964265808,48.61696959906962,54.12657624081789,46.899138205648576,61.66985802242735,70.88924995394837,55.37428690151822,31.68091604436896,48.49631156374067,53.99219676895211,46.78266090589231,61.51664224353096,70.71306651044269,55.23661443858494,31.60212244438043,48.37565352705562,53.857817297048804,46.6661836061137,61.36342646460528,70.53688306805141,55.098941977404515,31.523328845888795,48.25499549348752,53.723437829425265,46.54970631078656,61.21021069252552,70.36069963240628,54.96126952060985,31.444535249422167,48.13433746225541,53.589058363532324,46.43322901620513,61.05699492043117,70.18451619674826,54.8235970638153,31.365741652938077,48.01367944894763,53.45467893761822,46.31675177359227,60.90377923948702,70.00833289207398,54.685924729955374,31.286948138472592,47.89302154327741,53.32029961158328,46.20027460021482,60.75056362685487,69.83214963978236,54.54825241644604,31.208154623994528,47.77236363760716,53.18592028552987,46.08379742687395,60.59776603613847,69.65692775783823,54.4117069473849,31.130221006798706,47.653351701861055,53.05374074238975,45.96954476662988,60.44747657743698,69.48410930176274,54.27666393758869,31.052932312534292,47.534998153976666,52.921927829669606,45.85529210636761,60.297187118735415,69.3112908457076,54.151882791773524,30.98738989169643,47.4436255213249,52.8301805573214,45.784449514032836,60.215420272242,69.23039922319136,54.08867282901526,30.951213154442026,47.38822744216566,52.768482515238304,45.73097094887281,60.14507386114752,69.1495076006904,54.02546286625649,30.91503641717044,47.332829362949745,52.721454946376724,45.70292449896422,54.0374027813827,30.954509637395347,47.40644788187685,52.80344548729319,45.77399217529636,60.21839142087158,69.25305005468215,54.12140251394353,30.978547274226926,47.44325714135536,52.844440757779786,45.8095260134624,60.26513310106602,69.3067985016553,54.18252692517524,31.024475879125063,47.53034944208982,52.960104446211616,45.92596111933001,60.439577096868184,69.53186659235202,54.3583986062398,31.125131904206206,47.684485797902106,53.13176944809831,46.07475673227821,60.635304811837344,69.7569346830334,54.534270287185144,31.225787929287357,47.838622153699454,53.321504030798025,46.254877010352644,60.89283984439482,70.07676608599031,54.80270386223244,31.390014705154243,48.10633003014065,53.61965609811734,46.51330895116562,61.23278463355427,70.4676699731346,55.10816219492036,31.56483660614334,48.37403790665428,53.917808165436455,46.771740891978546,61.57272942272839,70.87982325353528,55.446829735643284,31.76816827216365,48.69995579468976,54.29699742292449,47.114462431097756,62.042029138274955,71.41947289338368,55.86852029602906,32.00951295818454,49.06953119133993,54.708601556447235,47.47123223661559,62.511328853821816,71.95912253323996,56.290210856413395,32.25644347765051,49.45621395952799,55.148784965954356,47.861031262502195,63.034937410452955,72.57371212016358,56.78022052041708,32.53688899770573,49.885665156560584,55.62707407675577,48.27560220373135,63.58026950344796,73.20079169829701,57.270230184419816,32.81733451776098,50.31511635360921,56.1053631876162,48.69017440419465,64.12560490935914,73.82787699055672,57.76024580191971,33.09778429698765,50.74457537714004,56.58366246783494,49.104754160022615,64.6709485973351,74.45496990167983,58.250265884669794,33.37823577988641,51.17403570521086,57.06196174807317,49.519333915889334,65.21629228529592,75.08206281305364,58.74028596768565,33.6586872631402,51.603496033952865,57.54026102926783,49.9339136727354,65.76163597472068,75.70915572594046,59.2303060516798,33.939138746823964,52.03295636313161,58.018560310845075,50.348493429763074,66.3069796642078,76.33624863881896,59.72032613567473,34.21959023052135,52.4624166943161,58.49685959669547,50.76307319233307,66.85232336348562,76.96334156578423,60.210346232864744,34.50004172302573,52.89187703708263,58.97515889332021,51.17765296238613,67.39766707013844,77.59043449836462,60.70036633225431,34.780493215530136,53.321337379849616,59.45345818992559,51.592232732419,67.9430107750308,78.21752742697755,61.19038642698196,35.060944704472895,53.75079771577585,59.93175747743229,52.00681249325601,68.4883544695665,78.84462034563325,61.68040651563156,35.34139619076356,54.18025804901323,60.41005676340177,52.421392254088744,69.03369816398748,79.47171326430623,62.17042660227454,35.62184767489212,54.60971837731252,60.88835604210525,52.83597200702431,69.57904184604097,80.09880616621187,62.66044667768659,35.90229915367421,55.03917869896702,61.36665531528546,53.25055175675078,70.12438552597871,80.72589906809978,63.15046675323636,36.1827506324463,55.468639020704266,61.844954116187715,53.665130687759714,70.6697275904225,81.35298949311043,63.64048440927983,36.46320044963533,55.89809637394321,62.32325008331003,54.07970757185289,71.21506750085226,81.98007806041497,64.13050109757384,36.743649989870285,56.32755372714709,62.80154605038904,54.494284455963175,71.75888235351832,82.6036592875539,64.61640675122356,37.02096239131461,56.751006135045856,63.271816612077004,54.90074571198498,72.29354685958343,83.21847216425314,65.09683102534605,37.29592193865035,57.17205656470428,63.740749606196175,55.307206968050146,72.82821136557905,83.83328504095557,65.57725529946751,37.55487947658912,57.54409867307178,64.1278101549059,55.61904780592129,73.20729468646314,84.23341379718734,65.86196250623125,37.71782495813543,57.79361997791553,64.40570744299309,55.8599233301027,73.52414553329243,84.59776186667553,66.14666971313946,37.88077043970268,58.04314128279582,64.68360473112503,56.10079885432827,58.29266258765801,64.96150201921205,56.34167437853625,74.15784722684558,85.32645800566115,66.71608412666704,38.206661402799874,58.54218389243177,65.23939930732153,56.58254990273962,74.47469807365734,85.69080607513979,67.00079133343114,38.36960688435663,58.79170519729376,65.51729659540825,56.82342542694295,74.79154892046917,86.055154144653,67.28549854019437,38.5325523659134,59.04122650217448,65.79519388354052,57.064300951173436,75.10839976731666,86.41950221414109,67.57020574695738,38.695497847470186,59.290747807018086,66.07309117165109,57.30517647537679,75.42525061412873,86.78385028363869,67.8549129538686,38.85844332902105,59.54026911189916,66.35098845976059,57.54605199958008,75.74210146095879,87.1481983531171,68.13962016063242,39.02138881058867,59.78979041678048,66.6288857478701,57.78692752378332,76.05895230768034,87.51254642261466,68.4243273673947,39.18433429213464,60.039311721643145,66.90678303600394,58.02780304800946,76.37580315451036,87.87689449211229,68.70903457415808,39.347279773691454,60.288833026414764,67.18468032409022,58.26867857218964,76.69265400132238,88.24124256160664,68.99374178107149,39.51022525524829,60.53835433127724,67.46257761222323,58.509554096415876,77.00950484815273,88.60559063110432,69.27844898783505,39.67317073680513,60.787875636159,67.74047490030934,58.7504296206238,77.32635569498328,88.96993870059225,69.56315619459703,39.83611621835093,61.03739694091025,68.01837218839529,58.99130514482689,77.64320654181401,89.33428677008013,90.06298290908214,70.41727781488432,40.32495266302646,61.785960855517274,68.85206405274874,59.71393171748314,78.59375908217642,90.42733097857001,70.70198502164676,40.48789814457716,62.035482160380056,69.12996134083433,59.954807241662515,78.91060992900744,90.7916790480578,70.98669222856358,40.6508436261453,62.2850034652626,69.40785862896794,60.19568276588927,79.22746077572536,91.15602711754559,71.2713994353255,40.81378910769091,62.53452477012569,69.68575591705336,60.43655829009718,79.54431162255632,91.5203751870434,71.55610664208719,40.97673458923644,62.784046074893936,69.96365320516288,60.67743381430013],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 114, 178, 0.2)\",\"hoverinfo\":\"skip\",\"line\":{\"width\":0},\"mode\":\"lines\",\"x\":[\"2021-05-08T00:00:00\",\"2021-05-21T00:00:00\",\"2021-05-25T00:00:00\",\"2021-05-26T00:00:00\",\"2021-05-27T00:00:00\",\"2021-05-28T00:00:00\",\"2021-05-29T00:00:00\",\"2021-05-30T00:00:00\",\"2021-05-31T00:00:00\",\"2021-06-01T00:00:00\",\"2021-06-02T00:00:00\",\"2021-06-03T00:00:00\",\"2021-06-04T00:00:00\",\"2021-06-05T00:00:00\",\"2021-06-06T00:00:00\",\"2021-06-07T00:00:00\",\"2021-06-08T00:00:00\",\"2021-06-09T00:00:00\",\"2021-06-10T00:00:00\",\"2021-06-11T00:00:00\",\"2021-06-12T00:00:00\",\"2021-06-13T00:00:00\",\"2021-06-14T00:00:00\",\"2021-06-15T00:00:00\",\"2021-06-16T00:00:00\",\"2021-06-17T00:00:00\",\"2021-06-18T00:00:00\",\"2021-06-19T00:00:00\",\"2021-06-20T00:00:00\",\"2021-06-21T00:00:00\",\"2021-06-22T00:00:00\",\"2021-06-23T00:00:00\",\"2021-06-24T00:00:00\",\"2021-06-25T00:00:00\",\"2021-06-26T00:00:00\",\"2021-06-27T00:00:00\",\"2021-06-28T00:00:00\",\"2021-06-29T00:00:00\",\"2021-06-30T00:00:00\",\"2021-07-01T00:00:00\",\"2021-07-02T00:00:00\",\"2021-07-03T00:00:00\",\"2021-07-04T00:00:00\",\"2021-07-05T00:00:00\",\"2021-07-06T00:00:00\",\"2021-07-07T00:00:00\",\"2021-07-08T00:00:00\",\"2021-07-09T00:00:00\",\"2021-07-10T00:00:00\",\"2021-07-11T00:00:00\",\"2021-07-12T00:00:00\",\"2021-07-13T00:00:00\",\"2021-07-14T00:00:00\",\"2021-07-15T00:00:00\",\"2021-07-16T00:00:00\",\"2021-07-17T00:00:00\",\"2021-07-18T00:00:00\",\"2021-07-19T00:00:00\",\"2021-07-20T00:00:00\",\"2021-07-21T00:00:00\",\"2021-07-22T00:00:00\",\"2021-07-23T00:00:00\",\"2021-07-24T00:00:00\",\"2021-07-25T00:00:00\",\"2021-07-26T00:00:00\",\"2021-07-27T00:00:00\",\"2021-07-28T00:00:00\",\"2021-07-29T00:00:00\",\"2021-07-30T00:00:00\",\"2021-07-31T00:00:00\",\"2021-08-01T00:00:00\",\"2021-08-02T00:00:00\",\"2021-08-03T00:00:00\",\"2021-08-04T00:00:00\",\"2021-08-05T00:00:00\",\"2021-08-06T00:00:00\",\"2021-08-07T00:00:00\",\"2021-08-08T00:00:00\",\"2021-08-09T00:00:00\",\"2021-08-10T00:00:00\",\"2021-08-11T00:00:00\",\"2021-08-12T00:00:00\",\"2021-08-16T00:00:00\",\"2021-08-17T00:00:00\",\"2021-08-18T00:00:00\",\"2021-08-19T00:00:00\",\"2021-08-20T00:00:00\",\"2021-08-21T00:00:00\",\"2021-08-22T00:00:00\",\"2021-08-23T00:00:00\",\"2021-08-24T00:00:00\",\"2021-08-25T00:00:00\",\"2021-08-26T00:00:00\",\"2021-08-27T00:00:00\",\"2021-08-28T00:00:00\",\"2021-08-29T00:00:00\",\"2021-08-30T00:00:00\",\"2021-08-31T00:00:00\",\"2021-09-01T00:00:00\",\"2021-09-02T00:00:00\",\"2021-09-03T00:00:00\",\"2021-09-04T00:00:00\",\"2021-09-05T00:00:00\",\"2021-09-06T00:00:00\",\"2021-09-07T00:00:00\",\"2021-09-08T00:00:00\",\"2021-09-09T00:00:00\",\"2021-09-10T00:00:00\",\"2021-09-11T00:00:00\",\"2021-09-12T00:00:00\",\"2021-09-13T00:00:00\",\"2021-09-14T00:00:00\",\"2021-09-15T00:00:00\",\"2021-09-16T00:00:00\",\"2021-09-17T00:00:00\",\"2021-09-18T00:00:00\",\"2021-09-19T00:00:00\",\"2021-09-20T00:00:00\",\"2021-09-21T00:00:00\",\"2021-09-22T00:00:00\",\"2021-09-23T00:00:00\",\"2021-09-24T00:00:00\",\"2021-09-25T00:00:00\",\"2021-09-26T00:00:00\",\"2021-09-27T00:00:00\",\"2021-09-28T00:00:00\",\"2021-09-29T00:00:00\",\"2021-09-30T00:00:00\",\"2021-10-01T00:00:00\",\"2021-10-02T00:00:00\",\"2021-10-03T00:00:00\",\"2021-10-04T00:00:00\",\"2021-10-05T00:00:00\",\"2021-10-06T00:00:00\",\"2021-10-07T00:00:00\",\"2021-10-08T00:00:00\",\"2021-10-09T00:00:00\",\"2021-10-10T00:00:00\",\"2021-10-11T00:00:00\",\"2021-10-12T00:00:00\",\"2021-10-13T00:00:00\",\"2021-10-14T00:00:00\",\"2021-10-15T00:00:00\",\"2021-10-16T00:00:00\",\"2021-10-17T00:00:00\",\"2021-10-18T00:00:00\",\"2021-10-19T00:00:00\",\"2021-10-20T00:00:00\",\"2021-10-21T00:00:00\",\"2021-10-22T00:00:00\",\"2021-10-23T00:00:00\",\"2021-10-24T00:00:00\",\"2021-10-25T00:00:00\",\"2021-10-26T00:00:00\",\"2021-10-27T00:00:00\",\"2021-10-28T00:00:00\",\"2021-10-29T00:00:00\",\"2021-10-30T00:00:00\",\"2021-10-31T00:00:00\",\"2021-11-01T00:00:00\",\"2021-11-02T00:00:00\",\"2021-11-03T00:00:00\",\"2021-11-04T00:00:00\",\"2021-11-05T00:00:00\",\"2021-11-06T00:00:00\",\"2021-11-07T00:00:00\",\"2021-11-08T00:00:00\",\"2021-11-09T00:00:00\",\"2021-11-10T00:00:00\",\"2021-11-11T00:00:00\",\"2021-11-12T00:00:00\",\"2021-11-13T00:00:00\",\"2021-11-14T00:00:00\",\"2021-11-15T00:00:00\",\"2021-11-16T00:00:00\",\"2021-11-17T00:00:00\",\"2021-11-18T00:00:00\",\"2021-11-19T00:00:00\",\"2021-11-20T00:00:00\",\"2021-11-21T00:00:00\",\"2021-11-22T00:00:00\",\"2021-11-23T00:00:00\",\"2021-11-24T00:00:00\",\"2021-11-25T00:00:00\",\"2021-11-26T00:00:00\",\"2021-11-27T00:00:00\",\"2021-11-28T00:00:00\",\"2021-11-29T00:00:00\",\"2021-11-30T00:00:00\",\"2021-12-01T00:00:00\",\"2021-12-02T00:00:00\",\"2021-12-03T00:00:00\",\"2021-12-04T00:00:00\",\"2021-12-05T00:00:00\",\"2021-12-06T00:00:00\",\"2021-12-07T00:00:00\",\"2021-12-08T00:00:00\",\"2021-12-09T00:00:00\",\"2021-12-10T00:00:00\",\"2021-12-11T00:00:00\",\"2021-12-12T00:00:00\",\"2021-12-13T00:00:00\",\"2021-12-14T00:00:00\",\"2021-12-15T00:00:00\",\"2021-12-16T00:00:00\",\"2021-12-17T00:00:00\",\"2021-12-18T00:00:00\",\"2021-12-19T00:00:00\",\"2021-12-20T00:00:00\",\"2021-12-21T00:00:00\",\"2021-12-22T00:00:00\",\"2021-12-23T00:00:00\",\"2021-12-24T00:00:00\",\"2021-12-25T00:00:00\",\"2021-12-26T00:00:00\",\"2021-12-27T00:00:00\",\"2021-12-28T00:00:00\",\"2021-12-29T00:00:00\",\"2021-12-30T00:00:00\",\"2022-01-02T00:00:00\",\"2022-01-10T00:00:00\",\"2022-01-11T00:00:00\",\"2022-01-12T00:00:00\",\"2022-01-13T00:00:00\",\"2022-01-14T00:00:00\",\"2022-01-15T00:00:00\",\"2022-01-16T00:00:00\",\"2022-01-17T00:00:00\",\"2022-01-18T00:00:00\",\"2022-01-19T00:00:00\",\"2022-01-20T00:00:00\",\"2022-01-21T00:00:00\",\"2022-01-22T00:00:00\",\"2022-01-23T00:00:00\",\"2022-01-24T00:00:00\",\"2022-01-25T00:00:00\",\"2022-01-26T00:00:00\",\"2022-01-27T00:00:00\",\"2022-01-28T00:00:00\",\"2022-01-29T00:00:00\",\"2022-01-30T00:00:00\",\"2022-01-31T00:00:00\",\"2022-02-01T00:00:00\",\"2022-02-02T00:00:00\",\"2022-02-03T00:00:00\",\"2022-02-04T00:00:00\",\"2022-02-05T00:00:00\",\"2022-02-06T00:00:00\",\"2022-02-07T00:00:00\",\"2022-02-08T00:00:00\",\"2022-02-09T00:00:00\",\"2022-02-10T00:00:00\",\"2022-02-11T00:00:00\",\"2022-02-12T00:00:00\",\"2022-02-13T00:00:00\",\"2022-02-14T00:00:00\",\"2022-02-15T00:00:00\",\"2022-02-16T00:00:00\",\"2022-02-17T00:00:00\",\"2022-02-18T00:00:00\",\"2022-02-19T00:00:00\",\"2022-02-20T00:00:00\",\"2022-02-21T00:00:00\",\"2022-02-22T00:00:00\",\"2022-02-23T00:00:00\",\"2022-02-24T00:00:00\",\"2022-02-25T00:00:00\",\"2022-02-26T00:00:00\",\"2022-02-27T00:00:00\",\"2022-02-28T00:00:00\",\"2022-03-01T00:00:00\",\"2022-03-02T00:00:00\",\"2022-03-03T00:00:00\",\"2022-03-04T00:00:00\",\"2022-03-05T00:00:00\",\"2022-03-06T00:00:00\",\"2022-03-07T00:00:00\",\"2022-03-08T00:00:00\",\"2022-03-09T00:00:00\",\"2022-03-10T00:00:00\",\"2022-03-11T00:00:00\",\"2022-03-12T00:00:00\",\"2022-03-13T00:00:00\",\"2022-03-14T00:00:00\",\"2022-03-15T00:00:00\",\"2022-03-16T00:00:00\",\"2022-03-17T00:00:00\",\"2022-03-18T00:00:00\",\"2022-03-19T00:00:00\",\"2022-03-20T00:00:00\",\"2022-03-21T00:00:00\",\"2022-03-22T00:00:00\",\"2022-03-23T00:00:00\",\"2022-03-24T00:00:00\",\"2022-03-25T00:00:00\",\"2022-03-26T00:00:00\",\"2022-03-27T00:00:00\",\"2022-03-28T00:00:00\",\"2022-03-29T00:00:00\",\"2022-03-30T00:00:00\",\"2022-03-31T00:00:00\",\"2022-04-01T00:00:00\",\"2022-04-02T00:00:00\",\"2022-04-03T00:00:00\",\"2022-04-04T00:00:00\",\"2022-04-05T00:00:00\",\"2022-04-06T00:00:00\",\"2022-04-07T00:00:00\",\"2022-04-08T00:00:00\",\"2022-04-09T00:00:00\",\"2022-04-10T00:00:00\",\"2022-04-11T00:00:00\",\"2022-04-12T00:00:00\",\"2022-04-13T00:00:00\",\"2022-04-14T00:00:00\",\"2022-04-15T00:00:00\",\"2022-04-16T00:00:00\",\"2022-04-17T00:00:00\",\"2022-04-18T00:00:00\",\"2022-04-19T00:00:00\",\"2022-04-20T00:00:00\",\"2022-04-21T00:00:00\",\"2022-04-22T00:00:00\",\"2022-04-23T00:00:00\",\"2022-04-24T00:00:00\",\"2022-04-25T00:00:00\",\"2022-04-26T00:00:00\",\"2022-04-27T00:00:00\",\"2022-04-28T00:00:00\",\"2022-04-29T00:00:00\",\"2022-04-30T00:00:00\",\"2022-05-01T00:00:00\",\"2022-05-02T00:00:00\",\"2022-05-03T00:00:00\",\"2022-05-04T00:00:00\",\"2022-05-05T00:00:00\",\"2022-05-06T00:00:00\",\"2022-05-07T00:00:00\",\"2022-05-08T00:00:00\",\"2022-05-09T00:00:00\",\"2022-05-10T00:00:00\",\"2022-05-11T00:00:00\",\"2022-05-12T00:00:00\",\"2022-05-13T00:00:00\",\"2022-05-14T00:00:00\",\"2022-05-15T00:00:00\",\"2022-05-16T00:00:00\",\"2022-05-17T00:00:00\",\"2022-05-18T00:00:00\",\"2022-05-19T00:00:00\",\"2022-05-20T00:00:00\",\"2022-05-21T00:00:00\",\"2022-05-22T00:00:00\",\"2022-05-23T00:00:00\",\"2022-05-24T00:00:00\",\"2022-05-25T00:00:00\",\"2022-05-26T00:00:00\",\"2022-05-27T00:00:00\",\"2022-05-28T00:00:00\",\"2022-05-29T00:00:00\",\"2022-05-30T00:00:00\",\"2022-05-31T00:00:00\",\"2022-06-01T00:00:00\",\"2022-06-02T00:00:00\",\"2022-06-03T00:00:00\",\"2022-06-04T00:00:00\",\"2022-06-05T00:00:00\",\"2022-06-06T00:00:00\",\"2022-06-07T00:00:00\",\"2022-06-08T00:00:00\",\"2022-06-09T00:00:00\",\"2022-06-10T00:00:00\",\"2022-06-11T00:00:00\",\"2022-06-12T00:00:00\",\"2022-06-13T00:00:00\",\"2022-06-14T00:00:00\",\"2022-06-15T00:00:00\",\"2022-06-16T00:00:00\",\"2022-06-17T00:00:00\",\"2022-06-18T00:00:00\",\"2022-06-19T00:00:00\",\"2022-06-20T00:00:00\",\"2022-06-21T00:00:00\",\"2022-06-22T00:00:00\",\"2022-06-23T00:00:00\",\"2022-06-24T00:00:00\",\"2022-06-25T00:00:00\",\"2022-06-26T00:00:00\",\"2022-06-27T00:00:00\",\"2022-06-28T00:00:00\",\"2022-06-29T00:00:00\",\"2022-06-30T00:00:00\",\"2022-07-01T00:00:00\",\"2022-07-02T00:00:00\",\"2022-07-03T00:00:00\",\"2022-07-04T00:00:00\",\"2022-07-05T00:00:00\",\"2022-07-06T00:00:00\",\"2022-07-07T00:00:00\",\"2022-07-08T00:00:00\",\"2022-07-09T00:00:00\",\"2022-07-10T00:00:00\",\"2022-07-11T00:00:00\",\"2022-07-12T00:00:00\",\"2022-07-13T00:00:00\",\"2022-07-14T00:00:00\",\"2022-07-15T00:00:00\",\"2022-07-16T00:00:00\",\"2022-07-17T00:00:00\",\"2022-07-18T00:00:00\",\"2022-07-19T00:00:00\",\"2022-07-20T00:00:00\",\"2022-07-21T00:00:00\",\"2022-07-22T00:00:00\",\"2022-07-23T00:00:00\",\"2022-07-24T00:00:00\",\"2022-07-25T00:00:00\",\"2022-07-26T00:00:00\",\"2022-07-27T00:00:00\",\"2022-07-28T00:00:00\",\"2022-07-29T00:00:00\",\"2022-07-30T00:00:00\",\"2022-07-31T00:00:00\",\"2022-08-01T00:00:00\",\"2022-08-02T00:00:00\",\"2022-08-03T00:00:00\",\"2022-08-04T00:00:00\",\"2022-08-05T00:00:00\",\"2022-08-06T00:00:00\",\"2022-08-07T00:00:00\",\"2022-08-08T00:00:00\",\"2022-08-09T00:00:00\",\"2022-08-10T00:00:00\",\"2022-08-11T00:00:00\",\"2022-08-16T00:00:00\",\"2022-08-17T00:00:00\",\"2022-08-18T00:00:00\",\"2022-08-19T00:00:00\",\"2022-08-20T00:00:00\",\"2022-08-21T00:00:00\",\"2022-08-22T00:00:00\",\"2022-08-23T00:00:00\",\"2022-08-24T00:00:00\",\"2022-08-25T00:00:00\",\"2022-08-26T00:00:00\",\"2022-08-27T00:00:00\",\"2022-08-28T00:00:00\",\"2022-08-29T00:00:00\",\"2022-08-30T00:00:00\",\"2022-08-31T00:00:00\",\"2022-09-01T00:00:00\",\"2022-09-02T00:00:00\",\"2022-09-03T00:00:00\",\"2022-09-04T00:00:00\",\"2022-09-05T00:00:00\",\"2022-09-06T00:00:00\",\"2022-09-07T00:00:00\",\"2022-09-08T00:00:00\",\"2022-09-09T00:00:00\",\"2022-09-10T00:00:00\",\"2022-09-11T00:00:00\",\"2022-09-12T00:00:00\",\"2022-09-13T00:00:00\",\"2022-09-14T00:00:00\",\"2022-09-15T00:00:00\",\"2022-09-16T00:00:00\",\"2022-09-17T00:00:00\",\"2022-09-18T00:00:00\",\"2022-09-19T00:00:00\",\"2022-09-20T00:00:00\",\"2022-09-21T00:00:00\",\"2022-09-22T00:00:00\",\"2022-09-23T00:00:00\",\"2022-09-24T00:00:00\",\"2022-09-25T00:00:00\",\"2022-09-26T00:00:00\",\"2022-09-27T00:00:00\",\"2022-09-28T00:00:00\",\"2022-09-29T00:00:00\",\"2022-09-30T00:00:00\",\"2022-10-01T00:00:00\",\"2022-10-02T00:00:00\",\"2022-10-03T00:00:00\",\"2022-10-04T00:00:00\",\"2022-10-05T00:00:00\",\"2022-10-06T00:00:00\",\"2022-10-07T00:00:00\",\"2022-10-08T00:00:00\",\"2022-10-09T00:00:00\",\"2022-10-10T00:00:00\",\"2022-10-11T00:00:00\",\"2022-10-12T00:00:00\",\"2022-10-13T00:00:00\",\"2022-10-14T00:00:00\",\"2022-10-15T00:00:00\",\"2022-10-16T00:00:00\",\"2022-10-17T00:00:00\",\"2022-10-18T00:00:00\",\"2022-10-19T00:00:00\",\"2022-10-20T00:00:00\",\"2022-10-21T00:00:00\",\"2022-10-22T00:00:00\",\"2022-10-23T00:00:00\",\"2022-10-24T00:00:00\",\"2022-10-25T00:00:00\",\"2022-10-26T00:00:00\",\"2022-10-27T00:00:00\",\"2022-10-28T00:00:00\",\"2022-10-29T00:00:00\",\"2022-10-30T00:00:00\",\"2022-10-31T00:00:00\",\"2022-11-01T00:00:00\",\"2022-11-02T00:00:00\",\"2022-11-03T00:00:00\",\"2022-11-04T00:00:00\",\"2022-11-05T00:00:00\",\"2022-11-19T00:00:00\",\"2022-11-20T00:00:00\",\"2022-11-21T00:00:00\",\"2022-11-22T00:00:00\",\"2022-11-23T00:00:00\",\"2022-11-24T00:00:00\",\"2022-11-25T00:00:00\",\"2022-11-26T00:00:00\",\"2022-11-27T00:00:00\",\"2022-11-28T00:00:00\",\"2022-11-29T00:00:00\",\"2022-11-30T00:00:00\",\"2022-12-01T00:00:00\",\"2022-12-02T00:00:00\",\"2022-12-03T00:00:00\",\"2022-12-04T00:00:00\",\"2022-12-05T00:00:00\",\"2022-12-06T00:00:00\",\"2022-12-07T00:00:00\",\"2022-12-08T00:00:00\",\"2022-12-09T00:00:00\",\"2022-12-10T00:00:00\",\"2022-12-11T00:00:00\",\"2022-12-12T00:00:00\",\"2022-12-13T00:00:00\",\"2022-12-14T00:00:00\",\"2022-12-15T00:00:00\",\"2022-12-16T00:00:00\",\"2022-12-17T00:00:00\",\"2022-12-18T00:00:00\",\"2022-12-19T00:00:00\",\"2022-12-20T00:00:00\",\"2022-12-21T00:00:00\",\"2022-12-22T00:00:00\"],\"y\":[117.59511758108488,105.9746269511468,94.55552386160615,100.8959262784946,92.0087685473862,108.1704889426326,118.1393347538625,98.11788277219358,75.90453232978668,95.18083766680414,102.07113641628378,91.17205244300233,106.2773808558168,116.3941934885524,100.28902870055133,76.83612950201052,95.02910462151875,101.877513327111,91.49226328673964,107.62584771634995,117.93307708041077,98.82797996924899,77.7328865900065,90.28628454778276,99.0141529148012,91.85277709903056,108.04486353494988,118.24678062303842,101.26320430579986,72.32178135157754,93.59634822491597,99.57390042159555,91.81507538504837,109.8753062539262,117.10465771479326,100.5100356764435,77.34077687931483,95.2944228531914,98.46905544013279,89.42375537072697,107.31450472375124,118.05767888717874,99.87850076353374,77.04050738941051,92.16351553686435,99.79913890284665,91.15243483319635,106.93693400387117,115.34369751337957,99.70295025420681,75.29385093354138,90.96079451015504,99.98844600677697,92.3728177817775,105.52120814069856,117.95145429586559,102.83034474715406,77.64104663830415,92.8970635380991,98.34638878218205,90.52262934148345,103.72795579994936,116.9477643383998,98.5089556911876,78.51022508216556,94.3325474931469,99.34275931852827,90.50250055001194,106.08427140135638,115.29769467991227,99.88088573263273,77.37060877599964,92.63251874129335,100.11410294654856,91.37830701798141,104.53332870571262,115.85593526002407,99.2360495223126,74.94243105912535,92.96499557234421,97.36916884545738,90.91745058690726,73.05594522982645,91.57806387791305,98.1435697139076,90.7216324527977,107.46104621319107,118.31621806747683,99.62386075331813,76.6957577955189,91.48562393066784,99.26713806638283,92.74386739794322,102.76966385941961,113.14821364742085,100.50994354122697,73.71177112870386,92.84938425545751,95.78166059439152,87.1784035000082,101.46848653510237,114.32470416862868,98.65818240793854,72.3076055790662,94.36562589626226,96.17898515395234,92.6084600333812,105.9129742706152,116.60094743160714,100.02165180147712,72.86424000457288,92.94421053262354,97.27478654151741,93.22687760264401,107.68936099257107,112.23694408974322,101.26519659522722,75.30221043756241,92.09615090983408,99.86663920223246,91.97143114645525,110.0257595524737,117.09562755931933,98.63815129107653,73.46186304504185,91.59863586704935,95.17820817868851,91.31607451878057,103.8809060466526,112.93016565147708,99.3440007054326,71.58163972620076,93.94978556946938,99.16357953767894,87.1944556189446,105.32020763680556,114.73847675859167,100.81569371679797,78.15347971451965,92.22283035104824,97.67117465594036,95.13385998699987,104.49490900275875,112.56843865851799,99.2251366612309,71.00887350950636,90.74875415166716,96.4196787654178,93.20094833341115,101.35601538546253,112.24368338380864,96.18511440670152,75.46292426816719,94.0548250850769,96.13825019305688,89.0115969073166,108.40686506358207,115.09029536389521,100.49531911525486,76.56717953777515,89.39206868230686,95.96096031974545,89.54526731810671,104.64528035645971,115.19638856749356,96.25902349377895,75.52715038558368,93.19359847239465,97.99583487851878,93.50286188051399,106.30327637727164,112.0849762997713,96.94651880035218,75.54414646172813,90.16719637935626,94.62301794503138,90.7847672443552,102.30609607933265,114.78176311365047,97.50601165089488,77.89295934558776,91.19198138831521,96.28320670475738,89.0245707090413,103.47838029169989,115.21870798812655,96.57877978800441,73.61989610071923,88.64413220317184,96.98804651467533,87.37142735253354,103.16389132237107,115.22661067366764,98.79383558087456,76.97130412070882,89.82686360710264,96.67530218122597,90.5869348439911,102.60880387608614,115.06084292319038,98.48392914775928,73.61242885359177,90.87732839345276,93.60499245477507,93.98159902153338,108.03648722919479,108.69457717910518,98.83300313513578,75.35544544308367,88.30388698674024,95.2256606093154,86.74303982332704,105.42199841763068,114.1053088479133,97.37391175840905,73.01991812160993,89.01121192685221,96.14384860212115,87.8061563079859,94.91613178582975,76.06497306493505,90.5203624156669,97.30940901611223,88.58362069852897,100.75633789079974,110.204993105538,99.9998738760268,74.67929892294651,92.7938751062798,93.81429824693575,88.55673257005951,104.8340407713931,116.04728582291843,100.24382026684677,74.50824814734499,90.29261471190783,97.37694505042153,87.30287870801821,100.96659380874759,112.97143726157805,99.00028861059769,77.58229901842898,88.41305586955635,96.01106264907352,88.23383375633982,103.45075241870487,112.92410666519892,98.04512181305718,73.87889346180246,86.99957090606136,97.59860354352952,89.59289251679405,104.58971516955089,112.358865069643,96.93964026844625,72.71386698058657,90.54959400411109,94.97813576579874,92.748052066832,101.96263804926843,111.64189791475327,97.75856543983718,73.34613646164819,92.54974553489745,96.4124221183266,89.54084840031747,102.88618037558706,112.62111544472904,101.21971752395964,74.75967000927979,93.58396797412698,96.1805147107474,88.65388638232123,107.21000471197583,111.57762951283557,97.57410349533117,74.15410175371136,90.92224325025985,96.87718266626678,90.109238382165,102.57050167900012,114.64641629067714,101.41086222413821,76.5616827905204,92.7805551006939,96.62001679396181,91.43959711912922,106.05506246330835,114.2998345709404,100.31749279649742,74.06768638998032,94.5993650579177,97.19981691311318,91.89488255789793,102.82587851600736,119.39662217935377,104.73118922331388,74.3480359247425,92.03324201864544,101.43662175820296,88.55235651144646,109.12356983255741,118.51178612742382,98.86163610771628,76.00834706898372,96.51927697481611,100.30660894873917,93.95947272480633,108.73648234047184,120.57231436692281,104.42217102609861,80.36553317990344,91.58213405909805,103.57394027781235,95.75698123036034,109.61282469830705,119.65803340763146,103.0852424940347,75.19732006569663,98.1609168743171,102.06124471488133,91.08834848032235,108.503580878962,119.64149481425022,103.42460148811985,78.62204854252418,95.10775905740863,100.89369148569739,92.3682767926715,108.94166584537845,123.2052076507243,100.95691252148468,77.97776719086174,94.79278990812378,101.7041668340353,95.94184000421961,109.27443418345922,122.3471435544163,104.14670199707741,78.7057059711531,94.77949954388801,101.19268637194727,92.8671127537268,110.21515890802746,123.15585920020945,101.305664390853,77.61287491130457,97.24025759193283,102.10355399760219,93.11167609786202,111.42575328060774,117.58491356003513,104.63060579243684,79.9442681106971,97.52377489947618,105.23570725637218,98.99645234771734,112.26480297850388,121.65776357369657,105.39906071285448,78.04489843450921,92.73949015599747,105.9108698982097,98.18791834912184,115.51311233835642,120.03170518658516,101.39584840914695,78.15553378920636,95.09189740652917,101.79333701333265,90.56766109212214,112.2685623495765,125.43671865895594,106.28206678857022,76.75847768973833,98.6924352077506,105.47281001362455,94.99823017123812,113.92920206186986,124.34476930474537,105.9257627174144,81.82736980777746,99.72419799709647,105.34590682785287,96.77324473425492,113.88529508870609,125.91929105242572,110.09591618935075,84.0145123800569,100.38065011657567,108.54894383433216,96.26872488328542,117.25436380661186,126.32234691256642,103.93853061912347,77.88600637464769,96.11240478259951,104.94629667556038,101.45055657679627,113.78594702796889,122.93653983141046,108.04979937209045,77.03888056190817,99.00077267694992,103.92879094057575,100.74992324029398,114.75092615024973,122.68213092760112,105.399470228526,83.04905287599026,100.10479291872119,106.74448792945236,98.64638447020012,113.98861384997036,126.71154083946176,107.41662931560805,82.94325816544081,100.64374454681132,104.73882351275688,98.4244235942274,115.66229814302882,125.1850523991651,108.97844547900321,79.93599366730047,99.15013138968311,109.0690669547259,103.37358422323796,114.65688085742292,126.19977954740406,108.71128619238944,78.13829636152096,100.17196463477417,109.19925944049784,98.80963458896304,100.2763076396438,106.82266621400862,98.84670591804361,115.95180453783428,124.67204890157497,107.68683431898292,84.83670460564291,107.00376895961543,107.91511711658009,102.54304853258088,114.58016731649982,131.21408254563946,111.78794682625082,80.10277006073743,101.99644494330481,111.42437864804762,101.76262672857311,118.40683735937813,129.68146791274836,111.3080143507983,80.42967451921095,99.25478171440288,107.31944384072379,101.43865237018726,119.90637166163442,126.88941300411581,111.9403907173148,80.01832709109198,101.45926786975464,110.09666609577636,98.25923988663524,120.10941530371292,131.09805331510358,107.2776975709044,79.67627074942102,101.18746658184651,110.11743568202662,96.69232933968539,117.05204058230467,132.14969698930017,110.8685707012683,82.34498013121977,101.35061252606201,108.4073913443944,101.99578925984822,125.16042785020879,134.1611592511561,110.75706481415872,84.14512137135146,106.64873164506365,109.41443973193337,99.79739960386277,122.86115079494806,132.61207092276823,112.31442559454295,83.02955173018123,103.52361444323695,112.04880699544121,101.64012082776073,123.7504681660161,129.93442525977076,113.15041669036475,83.35630159123748,99.88595946094122,109.89368088907518,106.72198318713606,122.43421682277315,133.37837841077067,115.59968992232893,81.81643906674488,106.07953072837678,111.33102645256238,103.13194928673188,119.80601764965483,127.32940229535164,113.53342621270804,82.36460088441959,104.79352219696715,112.07857714592538,103.32023358559458,119.95172214822895,133.0810011425971,134.77934321780697,115.73151525838503,83.08574789792372,104.60206802295197,107.64567508325806,105.63658417436793,125.77032805083044,132.21729208131802,112.8933895696864,83.93377468903688,104.23981374858487,113.32355658577404,105.48495449457322,121.71610510794454,135.00613330719045,116.6239778700557,84.39444962915572,107.65333649644417,114.60524143268469,102.08655230305027,126.07787413623204,135.4335667346462,114.71861072247019,84.82145063778997,108.3832047654239,110.79484129097891,103.99707370682005,122.57297048524141,140.0382478359965,113.10230750914496,82.9971762630671,103.96258862039491,113.2054300744719,103.89409572593868],\"type\":\"scatter\"}],                        {\"height\":600,\"showlegend\":false,\"width\":900,\"xaxis\":{\"rangeselector\":{\"buttons\":[{\"count\":7,\"label\":\"1w\",\"step\":\"day\",\"stepmode\":\"backward\"},{\"count\":1,\"label\":\"1m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":6,\"label\":\"6m\",\"step\":\"month\",\"stepmode\":\"backward\"},{\"count\":1,\"label\":\"1y\",\"step\":\"year\",\"stepmode\":\"backward\"},{\"step\":\"all\"}]},\"rangeslider\":{\"visible\":true},\"title\":{\"text\":\"Date\"},\"type\":\"date\"},\"yaxis\":{\"title\":{\"text\":\"Quantit\\u00e0\"}},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Vendita Burger\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d7232ff2-5f71-4039-98a1-d2d61887404b');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig = plot_plotly(model_tuned, forecast)\n",
        "\n",
        "fig.update_layout(yaxis_title = 'QuantitÃ ',\n",
        "                  xaxis_title = 'Date',\n",
        "                  title = 'Vendita Burger'\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W3QUxrKPpxVU"
      },
      "source": [
        "# XG BOOST"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G923DFIErNOn"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import mean_squared_error"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "1Xa8PpAXrTCb",
        "outputId": "df19c0e8-974f-4b0b-d957-ab509b78eacf"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-81092137-edec-4534-9888-5a8aec11d34e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantita</th>\n",
              "      <th>Tipologia</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Calendario</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-05-05</th>\n",
              "      <td>2.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-21</th>\n",
              "      <td>3.25</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-25</th>\n",
              "      <td>228.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-26</th>\n",
              "      <td>181.80</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-05-27</th>\n",
              "      <td>256.00</td>\n",
              "      <td>Spine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-05</th>\n",
              "      <td>128.18</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-19</th>\n",
              "      <td>58.12</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-20</th>\n",
              "      <td>16.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-21</th>\n",
              "      <td>12.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-22</th>\n",
              "      <td>1.00</td>\n",
              "      <td>Cocktail</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2600 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81092137-edec-4534-9888-5a8aec11d34e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-81092137-edec-4534-9888-5a8aec11d34e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-81092137-edec-4534-9888-5a8aec11d34e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "            Quantita Tipologia\n",
              "Calendario                    \n",
              "2021-05-05      2.00     Spine\n",
              "2021-05-21      3.25     Spine\n",
              "2021-05-25    228.00     Spine\n",
              "2021-05-26    181.80     Spine\n",
              "2021-05-27    256.00     Spine\n",
              "...              ...       ...\n",
              "2022-11-05    128.18  Cocktail\n",
              "2022-11-19     58.12  Cocktail\n",
              "2022-11-20     16.00  Cocktail\n",
              "2022-11-21     12.00  Cocktail\n",
              "2022-11-22      1.00  Cocktail\n",
              "\n",
              "[2600 rows x 2 columns]"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "jmfIjssirdk3",
        "outputId": "bad5c33f-854a-4982-9cfa-041883e77de4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "data.plot(style='-',\n",
        "        figsize=(15, 5),\n",
        "        #color=color_pal[0],\n",
        "        title='Vendita Burger')\n",
        "plt.grid()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "sCww5-TdvWAg",
        "outputId": "3d2c3876-c8c6-44ca-9576-ff10fa4ee35f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Divido in train e test\n",
        "train = data.loc[data.index < '2022-08-01']\n",
        "test = data.loc[data.index >= '2022-08-01']\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(15, 5))\n",
        "train.plot(ax=ax, label='Training Set', title='Data Train/Test Split')\n",
        "test.plot(ax=ax, label='Test Set')\n",
        "ax.axvline('2022-08-01', color='black', ls='--')\n",
        "ax.legend(['Training Set', 'Test Set'])\n",
        "plt.grid()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "6uqhzw7VxEcQ",
        "outputId": "27ef99f7-2515-42fc-9898-dfe1b8a26fd3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "data.loc[(data.index > '2022-04-01') & (data.index < '2022-05-01')] \\\n",
        "    .plot(figsize=(15, 5), title='Month Of Data')\n",
        "\n",
        "plt.grid()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1G_3SXq-xoBj"
      },
      "outputs": [],
      "source": [
        "# Creo feature\n",
        "def create_features(data):\n",
        "    \"\"\"\n",
        "    Create time series features based on time series index.\n",
        "    \"\"\"\n",
        "    data = data.copy()\n",
        "    #data['hour'] = data.index.hour\n",
        "    data['dayofweek'] = data.index.dayofweek\n",
        "    data['quarter'] = data.index.quarter\n",
        "    data['month'] = data.index.month\n",
        "    data['year'] = data.index.year\n",
        "    data['dayofyear'] = data.index.dayofyear\n",
        "    data['dayofmonth'] = data.index.day\n",
        "    data['weekofyear'] = data.index.isocalendar().week\n",
        "    return data\n",
        "\n",
        "data = create_features(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "79W_tofSzZVz",
        "outputId": "36f4bb69-2074-4d81-ffbc-9e311bfc869c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "sns.boxplot(data=data, x='dayofweek', y='Quantita')\n",
        "ax.set_title('Vendite per giorno della settimana')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "ZBY7-WOlzsP6",
        "outputId": "67c7c9f5-fa0e-4c72-87a0-26be63b10446"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "sns.boxplot(data=data, x='month', y='Quantita')\n",
        "ax.set_title('Vendite per giorno per mese')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WSYWHjxg0B6z"
      },
      "outputs": [],
      "source": [
        "# Creo modello XGBoost\n",
        "train = create_features(train)\n",
        "test = create_features(test)\n",
        "\n",
        "FEATURES = ['dayofyear', 'dayofweek', 'quarter', 'month', 'year']\n",
        "TARGET = 'Quantita'\n",
        "\n",
        "X_train = train[FEATURES]\n",
        "y_train = train[TARGET]\n",
        "\n",
        "X_test = test[FEATURES]\n",
        "y_test = test[TARGET]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sin0vs8P0nyq"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.9.13 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.9.13"
    },
    "vscode": {
      "interpreter": {
        "hash": "25f08c7b3fae6a7f4c1c6807d0bfb3a94540b6919ec42402396b397047eb57cb"
      }
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "00577790f1554400baa4786eb929df0e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "01a9e83170f34645a32f3300097801c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "02e989694d1b4381a563d8e7869c1ce1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_41fe9df8e6604afda937319be4ec2444",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ced0349faa9a464b92069f932e31fdf2",
            "value": 26
          }
        },
        "0491709c4a074c0492ca2b87d5e5b9c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f490ac84ef534391aff37fcf9dcadffc",
              "IPY_MODEL_43e97b68277b4375a56ed4c9f7ff320e",
              "IPY_MODEL_f083f92e059f444784c39bb2920ef428"
            ],
            "layout": "IPY_MODEL_88c809ca93bd4083bdafc9c06513fa6c"
          }
        },
        "04c50686bdb04dfa914d4be515b9a1da": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_96e62d07f8de439d927d79f2e597a5c5",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_76a8d60a71f74135ac3be8f23fd78205",
            "value": " 26/26 [00:18&lt;00:00,  1.28it/s]"
          }
        },
        "05191cbb6463461a80c38da3d8337ca7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0671b98281bc4f00bcc92dd5b02b0a37": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f6d2222fce4a4ffb95c72359d1957aa1",
              "IPY_MODEL_ebf0bf235aaa4d32996f57210fa87aa8",
              "IPY_MODEL_77adf870ba274266a864db81897b4441"
            ],
            "layout": "IPY_MODEL_20e209426d76480bb3906fb4bb1c1456"
          }
        },
        "0b3b94a48a9640c39eba002e8ebb09fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0bde97b031224aa8aa3073b67d71f992": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_384e162cff9b40a2b93ae7b5399d1059",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b1424e2cada644d09ae8d320ddf4dde2",
            "value": 26
          }
        },
        "0d0b6e271c1546b1883f0595fe1a7960": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bf8868af998c4e11b4a574480271977d",
              "IPY_MODEL_250293c97fef4a2985a3c7d3889cb74e",
              "IPY_MODEL_201b72dd50e94c6a93034d5c6cfbbde4"
            ],
            "layout": "IPY_MODEL_ce24f97a1c1f4c73af96123f980975a6"
          }
        },
        "0d1f5b590a044c688b3be6d9ecf30117": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c910c2f951c046c39b0ed8173ad76807",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8a7a471c2cb743c180905275e3b745bb",
            "value": 26
          }
        },
        "0f5e8d91a9ce41fc831e1f064852c60c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "10cd8dff59864385b5e4a85c00d05e78": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "10d58ba54f96402db7be31da320a8c71": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "113b321bcacb4b07a0eb67f5ed52ebe4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1208c7fd06d243da93c6add9a2d43900": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1289879d59a449769cfdc58cdb29479d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d54cff3c92cc47d49075c0e07f9c24c2",
              "IPY_MODEL_fecb328da56f4fa2aee166e9f1c24965",
              "IPY_MODEL_2a35acec239047b3a5a97bdff86dbd5e"
            ],
            "layout": "IPY_MODEL_b44781c769cf4f88be1e5b854d4f3ebe"
          }
        },
        "169c17fbb1cf4c9b8e0bafcf542cb126": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "17f67ee153dc48f18d9e92512413d39f": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1a334dc355b840d2bdcf5f990e53dc14": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1a49fac56c484ee6b53507cd59ffd103": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1c3ca86467e74d8fbf18d4daf7567f30": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "1dfa011f57e344c1b06d26e98f21655d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_90706474d0fc4d3d8ffd63607ef691bb",
              "IPY_MODEL_02e989694d1b4381a563d8e7869c1ce1",
              "IPY_MODEL_9944b4f7de494da0860bdcd76056d53d"
            ],
            "layout": "IPY_MODEL_dc5c1d0ffc2d4dd790c4e7f3e72e4e3d"
          }
        },
        "1e12056ee5d240da87459fe8b2432f40": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "201b72dd50e94c6a93034d5c6cfbbde4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4a552f6a92b1444681a59d69b2ae5acb",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_d7871c9b5bb8428e8ce62bb450aedf8b",
            "value": " 26/26 [00:18&lt;00:00,  1.37it/s]"
          }
        },
        "208a269fa0ef40c5a82a1696e1fa5d0f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_98f3a83c89974b03ad17afd3613b4c0e",
              "IPY_MODEL_3c21d28c1d5c437ba6c92fc1f8401b0b",
              "IPY_MODEL_230242e99d28488081fbebf25383f46f"
            ],
            "layout": "IPY_MODEL_932997138a884569bd6b3fa11d308b52"
          }
        },
        "2092f8c5b3c24f15bfb83e29db2a11bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cae1725b301d4b4eba2a486ac110b8dd",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_eb9e901d604443fd860e6947d0dab4c4",
            "value": " 26/26 [00:32&lt;00:00,  1.26s/it]"
          }
        },
        "20e209426d76480bb3906fb4bb1c1456": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "223901b3ecb4438f9f65d48a407f2f81": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2255145d64734873afc9a6912970ad5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "230242e99d28488081fbebf25383f46f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4d3d636e5a3747d68f6f3fcbddf7adef",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_f3e8e43314ca4c38a9c375d8655f32fe",
            "value": " 26/26 [00:19&lt;00:00,  1.33it/s]"
          }
        },
        "2315c2f7fa254d2196154100f573a6c6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "24cd3d5a26e4410a8fbb8936cf2d63f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "250293c97fef4a2985a3c7d3889cb74e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0f5e8d91a9ce41fc831e1f064852c60c",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1c3ca86467e74d8fbf18d4daf7567f30",
            "value": 26
          }
        },
        "2583fb152066425d80de4056bce98074": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "26d4bf62d96f4c50a9815cf96279b00f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_da2663a5261240f281b0d8ff6773573e",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_74827c7a41bd478798ac5c681e6dae68",
            "value": 26
          }
        },
        "28104bf1e7c34229b5d6aa63df65fe6a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "29a58ecc40364e5cb0207f7ba1fe5317": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f13f2d7cde12456bb9ff9b658fff0d3e",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_9c4a718559c549a59492b4140c9e98ef",
            "value": "100%"
          }
        },
        "2a35acec239047b3a5a97bdff86dbd5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a7db999e623c424fb129f1a548d8e8e5",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_b24519b8b0c04dfca1c1a8ff0375a2a1",
            "value": " 26/26 [00:30&lt;00:00,  1.18s/it]"
          }
        },
        "2bc838b5ba204e90b2820902d5438014": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cc81925a22934f40b402fe34a3c2a4a1",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_c4d52415bdac411a80f66e4490dbd931",
            "value": " 26/26 [00:18&lt;00:00,  1.38it/s]"
          }
        },
        "2d598aa9224841fc8c84578c42a84753": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2f80c3d7ffa34966a78334d8e5c1c640": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_be01eecb3cf44ae5a386c3aecdbafcd8",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_24cd3d5a26e4410a8fbb8936cf2d63f0",
            "value": "100%"
          }
        },
        "37a37567f5e64c6b83b524e47ff7e0fd": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "384e162cff9b40a2b93ae7b5399d1059": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3a2954d11ca24a2e91b1b3138ebc3df9": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fbd2cb1237fc497791af7b5677f2223b",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_1a334dc355b840d2bdcf5f990e53dc14",
            "value": "100%"
          }
        },
        "3bcb58a4cb4c4009834ecb1ec52e8116": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c1e499bf997452f83a058722e83f966": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_98f573abdcff4c419536ca74f9d8de51",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_924d066082864cfa8cda815fd6d28608",
            "value": "100%"
          }
        },
        "3c21d28c1d5c437ba6c92fc1f8401b0b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bc7d1f876b60468aaf409b02c40078de",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_67a2345f3f09495f9375403cc03d8533",
            "value": 26
          }
        },
        "41fe9df8e6604afda937319be4ec2444": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "43e97b68277b4375a56ed4c9f7ff320e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_90ede8eced9742fdac79fc1f0450b2a0",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e171d32ddb134d63a4873f63636eb4f1",
            "value": 26
          }
        },
        "462bc4e3dce648d2b8766cfa4dead886": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ff8234e125874485996eb96d780fa1c6",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a5afa7c823314ac88fde18c639f2bef1",
            "value": 26
          }
        },
        "479837382fed49faa021030a0ca41d7b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2583fb152066425d80de4056bce98074",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_6f416731283b482c9107b35592dfaba6",
            "value": " 26/26 [00:18&lt;00:00,  1.33it/s]"
          }
        },
        "48c068f0590f4175ba97a016e36806de": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "49cd5aed9c4047fdb824edd022fb2c72": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4a552f6a92b1444681a59d69b2ae5acb": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4a9128a24290497baba0a9dd69a00b11": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fbd4c5ce3197404291c3e90a1a82de12",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b9ec099d4b6942b4888e649f8a3aa1b1",
            "value": 26
          }
        },
        "4d3d636e5a3747d68f6f3fcbddf7adef": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4f2fc73c97004020ae8390fb89165b79": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cd2e2148528448e4a8fdd5a2117327d0",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9f6db232b3db4e6ab123ba0194bba8e8",
            "value": 26
          }
        },
        "50c44cb9a1bf455db9b3cb0d27ddabf0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9134bb8cc4c24e418531a5449fcd9c01",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_93ee66045f614e56b1596c3457ec3d7a",
            "value": 26
          }
        },
        "5169a9715dab4e419c1e3da76daf50f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "564f6c98c1c8461d8beebf68fce36404": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1208c7fd06d243da93c6add9a2d43900",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_113b321bcacb4b07a0eb67f5ed52ebe4",
            "value": " 26/26 [00:18&lt;00:00,  1.36it/s]"
          }
        },
        "57328abadb6a48108824f0c2ae852ad4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2315c2f7fa254d2196154100f573a6c6",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a72f9fe7f66443b6afe99b4375276a05",
            "value": 26
          }
        },
        "5ed349e615564cd48719031e585d7781": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5f6802f38fc94223903f103fcc34c8c0": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5f73f2ca477740368bce6b1a1f84aa0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2f80c3d7ffa34966a78334d8e5c1c640",
              "IPY_MODEL_0bde97b031224aa8aa3073b67d71f992",
              "IPY_MODEL_71fc5d0a5b794803a1ddffbe8dc78343"
            ],
            "layout": "IPY_MODEL_b3643947ab8f43f28164954558629f56"
          }
        },
        "60708e0d38184a428bd875d51d5511a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_fbab70642e2444e5abad84742d72d2b0",
              "IPY_MODEL_4f2fc73c97004020ae8390fb89165b79",
              "IPY_MODEL_de7b2caac8d74277a4c4eb5a028c4074"
            ],
            "layout": "IPY_MODEL_7f079821b70a40bbbbdb35598491fbb9"
          }
        },
        "67083fb32a584418b57b3016b0feb64e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8f2fff0f6f7e42edb189c02dd8962147",
              "IPY_MODEL_50c44cb9a1bf455db9b3cb0d27ddabf0",
              "IPY_MODEL_793fcc4298a3468d8388f0fd9be9cfc1"
            ],
            "layout": "IPY_MODEL_8957ba2f398a4159babcc3d55e2cec92"
          }
        },
        "678a4d4fb25646348efd35134880e649": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "67a2345f3f09495f9375403cc03d8533": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6ce9b9c602d044389d258aeda65bb159": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2d598aa9224841fc8c84578c42a84753",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_6ee721afab5b4a47a95c31fb912b9b3b",
            "value": "100%"
          }
        },
        "6ee721afab5b4a47a95c31fb912b9b3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6ef1c263e9f6481ea76316d35129e806": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6f416731283b482c9107b35592dfaba6": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "71fc5d0a5b794803a1ddffbe8dc78343": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a54ff83ded0f4401bd977929f87befc8",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_00577790f1554400baa4786eb929df0e",
            "value": " 26/26 [00:26&lt;00:00,  1.49it/s]"
          }
        },
        "74827c7a41bd478798ac5c681e6dae68": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "76a8d60a71f74135ac3be8f23fd78205": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "77adf870ba274266a864db81897b4441": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6d6145b612a4087b67685be412b35c2",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_a83aa86d4fda47b58dea0582e6c1fc31",
            "value": " 26/26 [00:18&lt;00:00,  1.35it/s]"
          }
        },
        "793fcc4298a3468d8388f0fd9be9cfc1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_abe0da8fefdc443cb9d3591fa6530ba2",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_d50302d4870244b0ae56e9d8dc7e2caf",
            "value": " 26/26 [00:29&lt;00:00,  1.15s/it]"
          }
        },
        "797236a6623c4e59a8e48a6300d633af": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8b5b99662b834da981d2795331060b83",
              "IPY_MODEL_26d4bf62d96f4c50a9815cf96279b00f",
              "IPY_MODEL_564f6c98c1c8461d8beebf68fce36404"
            ],
            "layout": "IPY_MODEL_49cd5aed9c4047fdb824edd022fb2c72"
          }
        },
        "7a5b86cd2a91485985a0bdfaf14684aa": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7bb89c010cb24c0f8bef7347b303b1b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b5db22e396a24aea90988c05c29ed975",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_890d7d8f4a174e3e95490c2272ec6ede",
            "value": "100%"
          }
        },
        "7dd698405df544a1beb6830cdfc8c120": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7ed69a987e9948709ac048ea29b852c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7f079821b70a40bbbbdb35598491fbb9": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "809cf6be7c954b8f84213dc1301ed08d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "825642a934dd49788b7b4916381c7586": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "88c809ca93bd4083bdafc9c06513fa6c": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "890d7d8f4a174e3e95490c2272ec6ede": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8957ba2f398a4159babcc3d55e2cec92": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8a7a471c2cb743c180905275e3b745bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8b5b99662b834da981d2795331060b83": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f940c937e370471a85698d4d91dc749f",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_fc91b6ab98d946868b12f3c2569562ba",
            "value": "100%"
          }
        },
        "8e2081a8b7ab465ba5631e6095ca5a4f": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b3c3fdaef52543689150282b1950b851",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_01a9e83170f34645a32f3300097801c4",
            "value": 26
          }
        },
        "8f2fff0f6f7e42edb189c02dd8962147": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_998481c2103546859d2a008d1e51d572",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_a77b10ac70774750a3419aa481a93b13",
            "value": "100%"
          }
        },
        "9068982c5d894c358d76c749af52fd1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "90706474d0fc4d3d8ffd63607ef691bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cac0bce5c07945449f59ee13ea533606",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_9371cbecc9e24fd0ba056a8982918f4d",
            "value": "100%"
          }
        },
        "90ba6705901d49f9a753c1084433a71b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_be05229af4b34fdb9bf3c0c2023f5f3b",
              "IPY_MODEL_462bc4e3dce648d2b8766cfa4dead886",
              "IPY_MODEL_cd42dcc5c3e24d64a76b9d4aedf45cdf"
            ],
            "layout": "IPY_MODEL_a2bc695e013740fbaea888ee44998daf"
          }
        },
        "90ede8eced9742fdac79fc1f0450b2a0": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9134bb8cc4c24e418531a5449fcd9c01": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "924d066082864cfa8cda815fd6d28608": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "929d9264dfef4a0991b2ff3344936791": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "932997138a884569bd6b3fa11d308b52": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9371cbecc9e24fd0ba056a8982918f4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "93ee66045f614e56b1596c3457ec3d7a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "96e62d07f8de439d927d79f2e597a5c5": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "98f3a83c89974b03ad17afd3613b4c0e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9a0966b8bc5c46b3996eadc48ffcda97",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_05191cbb6463461a80c38da3d8337ca7",
            "value": "100%"
          }
        },
        "98f573abdcff4c419536ca74f9d8de51": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9944b4f7de494da0860bdcd76056d53d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5f6802f38fc94223903f103fcc34c8c0",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_d3d83870bd8f42f8a1386bdfe314e082",
            "value": " 26/26 [00:18&lt;00:00,  1.30it/s]"
          }
        },
        "998481c2103546859d2a008d1e51d572": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9a0966b8bc5c46b3996eadc48ffcda97": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9c4a718559c549a59492b4140c9e98ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9f38e8f5afed451d8d8abbe30c261d3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_223901b3ecb4438f9f65d48a407f2f81",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_f2752dcaac354f5fafa68514b663ac9a",
            "value": "100%"
          }
        },
        "9f6db232b3db4e6ab123ba0194bba8e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a2bc695e013740fbaea888ee44998daf": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a54ff83ded0f4401bd977929f87befc8": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a5afa7c823314ac88fde18c639f2bef1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a72f9fe7f66443b6afe99b4375276a05": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a77b10ac70774750a3419aa481a93b13": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a7db999e623c424fb129f1a548d8e8e5": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a83aa86d4fda47b58dea0582e6c1fc31": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a9570bca0de34eca9eb1ee8bba67cbbb": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e1bc3a6283094c16a5354b30c6c88939",
              "IPY_MODEL_4a9128a24290497baba0a9dd69a00b11",
              "IPY_MODEL_2092f8c5b3c24f15bfb83e29db2a11bf"
            ],
            "layout": "IPY_MODEL_f197a097b8fd4a148d59a0eee395e0c7"
          }
        },
        "aa09eba3c47b4234b3dd07df221ff69a": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "aa7dedd3f3d5434bae21108958d766a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cfd88fa93a4b4ba0bc0670fae2c0eb94",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_eb438c5d46e64f2d92ca3a079a41ebda",
            "value": 26
          }
        },
        "abe0da8fefdc443cb9d3591fa6530ba2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ac192278cf3b492fae055c3d91aac495": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ac7343a1259745d1a9ffdd6a3ae000de": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae11956b3c2c42ce823f26844224ca8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "afc34571f3bf4ecba001b31d0bd8e82b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3a2954d11ca24a2e91b1b3138ebc3df9",
              "IPY_MODEL_0d1f5b590a044c688b3be6d9ecf30117",
              "IPY_MODEL_04c50686bdb04dfa914d4be515b9a1da"
            ],
            "layout": "IPY_MODEL_6ef1c263e9f6481ea76316d35129e806"
          }
        },
        "b1424e2cada644d09ae8d320ddf4dde2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b1c2189a0eee4b77b3346e5fa996f949": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b24519b8b0c04dfca1c1a8ff0375a2a1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b2c399782be0484884edf9f1d742e535": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9f38e8f5afed451d8d8abbe30c261d3d",
              "IPY_MODEL_e62af28f15dd46b5a183bef741b2643e",
              "IPY_MODEL_da36832f6c6745d4866dc8bd06085bea"
            ],
            "layout": "IPY_MODEL_1a49fac56c484ee6b53507cd59ffd103"
          }
        },
        "b3643947ab8f43f28164954558629f56": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3c3fdaef52543689150282b1950b851": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b44781c769cf4f88be1e5b854d4f3ebe": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b501bb65a11a40beab8f85945d708e27": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_809cf6be7c954b8f84213dc1301ed08d",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9068982c5d894c358d76c749af52fd1e",
            "value": 26
          }
        },
        "b5db22e396a24aea90988c05c29ed975": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b6d6145b612a4087b67685be412b35c2": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b9ec099d4b6942b4888e649f8a3aa1b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bc7d1f876b60468aaf409b02c40078de": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "be01eecb3cf44ae5a386c3aecdbafcd8": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "be05229af4b34fdb9bf3c0c2023f5f3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c0cf6fafc3b34a8c9b4288432cce76cd",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_d962b6bbde8542afbc4cfc2db0299361",
            "value": "100%"
          }
        },
        "be62328866284b5c932c2212fcad97dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_37a37567f5e64c6b83b524e47ff7e0fd",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_e053aac825394dd1b26fb5d00a789264",
            "value": " 26/26 [00:18&lt;00:00,  1.27it/s]"
          }
        },
        "bf859654aa69416e802406e0f9beeec2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7bb89c010cb24c0f8bef7347b303b1b5",
              "IPY_MODEL_57328abadb6a48108824f0c2ae852ad4",
              "IPY_MODEL_d71b3c787ea74773a6931e9ec5fe6ff2"
            ],
            "layout": "IPY_MODEL_b1c2189a0eee4b77b3346e5fa996f949"
          }
        },
        "bf8868af998c4e11b4a574480271977d": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ac7343a1259745d1a9ffdd6a3ae000de",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_0b3b94a48a9640c39eba002e8ebb09fb",
            "value": "100%"
          }
        },
        "c0cf6fafc3b34a8c9b4288432cce76cd": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c15afebb137f439e96acfff7256262ef": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c4d52415bdac411a80f66e4490dbd931": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c910c2f951c046c39b0ed8173ad76807": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ca47fb76a84144c7bf1cba82a8fe94f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ca91b7077429478fb04ca908db053adc": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cac0bce5c07945449f59ee13ea533606": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cae1725b301d4b4eba2a486ac110b8dd": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cc41918bb370430da68ac51f110daed3": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cc81925a22934f40b402fe34a3c2a4a1": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd2e2148528448e4a8fdd5a2117327d0": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd42dcc5c3e24d64a76b9d4aedf45cdf": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_28104bf1e7c34229b5d6aa63df65fe6a",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_48c068f0590f4175ba97a016e36806de",
            "value": " 26/26 [00:19&lt;00:00,  1.40it/s]"
          }
        },
        "ce24f97a1c1f4c73af96123f980975a6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ced0349faa9a464b92069f932e31fdf2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cfd88fa93a4b4ba0bc0670fae2c0eb94": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3d83870bd8f42f8a1386bdfe314e082": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d50302d4870244b0ae56e9d8dc7e2caf": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d54cff3c92cc47d49075c0e07f9c24c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_10d58ba54f96402db7be31da320a8c71",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_ac192278cf3b492fae055c3d91aac495",
            "value": "100%"
          }
        },
        "d71b3c787ea74773a6931e9ec5fe6ff2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c15afebb137f439e96acfff7256262ef",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_825642a934dd49788b7b4916381c7586",
            "value": " 26/26 [00:33&lt;00:00,  1.33s/it]"
          }
        },
        "d7871c9b5bb8428e8ce62bb450aedf8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d962b6bbde8542afbc4cfc2db0299361": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "da2663a5261240f281b0d8ff6773573e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "da36832f6c6745d4866dc8bd06085bea": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3bcb58a4cb4c4009834ecb1ec52e8116",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_5169a9715dab4e419c1e3da76daf50f5",
            "value": " 26/26 [00:18&lt;00:00,  1.40it/s]"
          }
        },
        "dc5c1d0ffc2d4dd790c4e7f3e72e4e3d": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "de7b2caac8d74277a4c4eb5a028c4074": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9c9a3edaf5242d097528d76b40a5852",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_f519155251ee493fa6ea657772621ea2",
            "value": " 26/26 [00:20&lt;00:00,  1.27it/s]"
          }
        },
        "debf9722b49e4db78ba18b4d1247fcd7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3c1e499bf997452f83a058722e83f966",
              "IPY_MODEL_b501bb65a11a40beab8f85945d708e27",
              "IPY_MODEL_2bc838b5ba204e90b2820902d5438014"
            ],
            "layout": "IPY_MODEL_cc41918bb370430da68ac51f110daed3"
          }
        },
        "e02237ce6db94f07a65d4838cdfe2963": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e053aac825394dd1b26fb5d00a789264": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e171d32ddb134d63a4873f63636eb4f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e1bc3a6283094c16a5354b30c6c88939": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_678a4d4fb25646348efd35134880e649",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_e02237ce6db94f07a65d4838cdfe2963",
            "value": "100%"
          }
        },
        "e62af28f15dd46b5a183bef741b2643e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_aa09eba3c47b4234b3dd07df221ff69a",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2255145d64734873afc9a6912970ad5e",
            "value": 26
          }
        },
        "e9c38750112f405486a7ebc7530868c6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e9c9a3edaf5242d097528d76b40a5852": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eacf15826a464c0391a6b3fbb2ea7c22": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_29a58ecc40364e5cb0207f7ba1fe5317",
              "IPY_MODEL_8e2081a8b7ab465ba5631e6095ca5a4f",
              "IPY_MODEL_479837382fed49faa021030a0ca41d7b"
            ],
            "layout": "IPY_MODEL_169c17fbb1cf4c9b8e0bafcf542cb126"
          }
        },
        "eb438c5d46e64f2d92ca3a079a41ebda": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "eb9e901d604443fd860e6947d0dab4c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ebf0bf235aaa4d32996f57210fa87aa8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_17f67ee153dc48f18d9e92512413d39f",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ca47fb76a84144c7bf1cba82a8fe94f3",
            "value": 26
          }
        },
        "f083f92e059f444784c39bb2920ef428": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1e12056ee5d240da87459fe8b2432f40",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_10cd8dff59864385b5e4a85c00d05e78",
            "value": " 26/26 [00:18&lt;00:00,  1.40it/s]"
          }
        },
        "f13f2d7cde12456bb9ff9b658fff0d3e": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f197a097b8fd4a148d59a0eee395e0c7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f2752dcaac354f5fafa68514b663ac9a": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f3e8e43314ca4c38a9c375d8655f32fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f490ac84ef534391aff37fcf9dcadffc": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9c38750112f405486a7ebc7530868c6",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_ae11956b3c2c42ce823f26844224ca8c",
            "value": "100%"
          }
        },
        "f519155251ee493fa6ea657772621ea2": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f6d2222fce4a4ffb95c72359d1957aa1": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5ed349e615564cd48719031e585d7781",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_7ed69a987e9948709ac048ea29b852c4",
            "value": "100%"
          }
        },
        "f747440643e349c0b798c6be5e7d5e7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6ce9b9c602d044389d258aeda65bb159",
              "IPY_MODEL_aa7dedd3f3d5434bae21108958d766a0",
              "IPY_MODEL_be62328866284b5c932c2212fcad97dd"
            ],
            "layout": "IPY_MODEL_f81150dfcaa44e4086299af3791abfea"
          }
        },
        "f81150dfcaa44e4086299af3791abfea": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f940c937e370471a85698d4d91dc749f": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbab70642e2444e5abad84742d72d2b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7a5b86cd2a91485985a0bdfaf14684aa",
            "placeholder": "â€‹",
            "style": "IPY_MODEL_929d9264dfef4a0991b2ff3344936791",
            "value": "100%"
          }
        },
        "fbd2cb1237fc497791af7b5677f2223b": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbd4c5ce3197404291c3e90a1a82de12": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fc91b6ab98d946868b12f3c2569562ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fecb328da56f4fa2aee166e9f1c24965": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ca91b7077429478fb04ca908db053adc",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7dd698405df544a1beb6830cdfc8c120",
            "value": 26
          }
        },
        "ff8234e125874485996eb96d780fa1c6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
